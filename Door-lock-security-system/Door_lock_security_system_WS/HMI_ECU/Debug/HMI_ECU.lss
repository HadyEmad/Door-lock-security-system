
HMI_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002c6a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000106  00800060  00002c6a  00002cfe  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000007  00800166  00800166  00002e04  2**0
                  ALLOC
  3 .stab         00002a84  00000000  00000000  00002e04  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000013fa  00000000  00000000  00005888  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00006c82  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00006dc2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00006f32  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00008b7b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00009a66  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000a814  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000a974  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000ac01  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000b3cf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 48 12 	jmp	0x2490	; 0x2490 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 7b 12 	jmp	0x24f6	; 0x24f6 <__vector_19>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea e6       	ldi	r30, 0x6A	; 106
      68:	fc e2       	ldi	r31, 0x2C	; 44
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 36       	cpi	r26, 0x66	; 102
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a6 e6       	ldi	r26, 0x66	; 102
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ad 36       	cpi	r26, 0x6D	; 109
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 a3 05 	call	0xb46	; 0xb46 <main>
      8a:	0c 94 33 16 	jmp	0x2c66	; 0x2c66 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 b7 15 	jmp	0x2b6e	; 0x2b6e <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a1 e5       	ldi	r26, 0x51	; 81
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 d3 15 	jmp	0x2ba6	; 0x2ba6 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 c3 15 	jmp	0x2b86	; 0x2b86 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 df 15 	jmp	0x2bbe	; 0x2bbe <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 c3 15 	jmp	0x2b86	; 0x2b86 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 df 15 	jmp	0x2bbe	; 0x2bbe <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 b7 15 	jmp	0x2b6e	; 0x2b6e <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	81 e5       	ldi	r24, 0x51	; 81
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 d3 15 	jmp	0x2ba6	; 0x2ba6 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 c3 15 	jmp	0x2b86	; 0x2b86 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 df 15 	jmp	0x2bbe	; 0x2bbe <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 c3 15 	jmp	0x2b86	; 0x2b86 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 df 15 	jmp	0x2bbe	; 0x2bbe <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 c3 15 	jmp	0x2b86	; 0x2b86 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 df 15 	jmp	0x2bbe	; 0x2bbe <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 c7 15 	jmp	0x2b8e	; 0x2b8e <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 e3 15 	jmp	0x2bc6	; 0x2bc6 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <main>:

/*******************************************************************************
 *                          ECU Main function                                  *
 *******************************************************************************/

int main() {
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
     b4e:	69 97       	sbiw	r28, 0x19	; 25
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61

	SREG |= (1 << 7);
     b5a:	af e5       	ldi	r26, 0x5F	; 95
     b5c:	b0 e0       	ldi	r27, 0x00	; 0
     b5e:	ef e5       	ldi	r30, 0x5F	; 95
     b60:	f0 e0       	ldi	r31, 0x00	; 0
     b62:	80 81       	ld	r24, Z
     b64:	80 68       	ori	r24, 0x80	; 128
     b66:	8c 93       	st	X, r24
	uint8 option = 1;
     b68:	81 e0       	ldi	r24, 0x01	; 1
     b6a:	89 83       	std	Y+1, r24	; 0x01
	uint8 pass_attempts = 3;
     b6c:	83 e0       	ldi	r24, 0x03	; 3
     b6e:	8a 83       	std	Y+2, r24	; 0x02
	LCD_init();
     b70:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <LCD_init>
	UART_configType UART_config = { ONE_STOP_BIT, CHAR_SIZE_8, NO_PARITY,
			NO_INT, 14400 };
     b74:	9e 01       	movw	r18, r28
     b76:	2d 5f       	subi	r18, 0xFD	; 253
     b78:	3f 4f       	sbci	r19, 0xFF	; 255
     b7a:	3e 8b       	std	Y+22, r19	; 0x16
     b7c:	2d 8b       	std	Y+21, r18	; 0x15
     b7e:	89 e5       	ldi	r24, 0x59	; 89
     b80:	91 e0       	ldi	r25, 0x01	; 1
     b82:	98 8f       	std	Y+24, r25	; 0x18
     b84:	8f 8b       	std	Y+23, r24	; 0x17
     b86:	98 e0       	ldi	r25, 0x08	; 8
     b88:	99 8f       	std	Y+25, r25	; 0x19
     b8a:	ef 89       	ldd	r30, Y+23	; 0x17
     b8c:	f8 8d       	ldd	r31, Y+24	; 0x18
     b8e:	00 80       	ld	r0, Z
     b90:	2f 89       	ldd	r18, Y+23	; 0x17
     b92:	38 8d       	ldd	r19, Y+24	; 0x18
     b94:	2f 5f       	subi	r18, 0xFF	; 255
     b96:	3f 4f       	sbci	r19, 0xFF	; 255
     b98:	38 8f       	std	Y+24, r19	; 0x18
     b9a:	2f 8b       	std	Y+23, r18	; 0x17
     b9c:	ed 89       	ldd	r30, Y+21	; 0x15
     b9e:	fe 89       	ldd	r31, Y+22	; 0x16
     ba0:	00 82       	st	Z, r0
     ba2:	2d 89       	ldd	r18, Y+21	; 0x15
     ba4:	3e 89       	ldd	r19, Y+22	; 0x16
     ba6:	2f 5f       	subi	r18, 0xFF	; 255
     ba8:	3f 4f       	sbci	r19, 0xFF	; 255
     baa:	3e 8b       	std	Y+22, r19	; 0x16
     bac:	2d 8b       	std	Y+21, r18	; 0x15
     bae:	39 8d       	ldd	r19, Y+25	; 0x19
     bb0:	31 50       	subi	r19, 0x01	; 1
     bb2:	39 8f       	std	Y+25, r19	; 0x19
     bb4:	89 8d       	ldd	r24, Y+25	; 0x19
     bb6:	88 23       	and	r24, r24
     bb8:	41 f7       	brne	.-48     	; 0xb8a <main+0x44>
	UART_init(&UART_config);
     bba:	ce 01       	movw	r24, r28
     bbc:	03 96       	adiw	r24, 0x03	; 3
     bbe:	0e 94 b1 13 	call	0x2762	; 0x2762 <UART_init>

	while (1) {

		switch (option) {
     bc2:	89 81       	ldd	r24, Y+1	; 0x01
     bc4:	e8 2f       	mov	r30, r24
     bc6:	f0 e0       	ldi	r31, 0x00	; 0
     bc8:	fc 8b       	std	Y+20, r31	; 0x14
     bca:	eb 8b       	std	Y+19, r30	; 0x13
     bcc:	2b 89       	ldd	r18, Y+19	; 0x13
     bce:	3c 89       	ldd	r19, Y+20	; 0x14
     bd0:	22 30       	cpi	r18, 0x02	; 2
     bd2:	31 05       	cpc	r19, r1
     bd4:	09 f4       	brne	.+2      	; 0xbd8 <main+0x92>
     bd6:	6b c0       	rjmp	.+214    	; 0xcae <main+0x168>
     bd8:	8b 89       	ldd	r24, Y+19	; 0x13
     bda:	9c 89       	ldd	r25, Y+20	; 0x14
     bdc:	83 30       	cpi	r24, 0x03	; 3
     bde:	91 05       	cpc	r25, r1
     be0:	34 f4       	brge	.+12     	; 0xbee <main+0xa8>
     be2:	eb 89       	ldd	r30, Y+19	; 0x13
     be4:	fc 89       	ldd	r31, Y+20	; 0x14
     be6:	e1 30       	cpi	r30, 0x01	; 1
     be8:	f1 05       	cpc	r31, r1
     bea:	71 f0       	breq	.+28     	; 0xc08 <main+0xc2>
     bec:	ea cf       	rjmp	.-44     	; 0xbc2 <main+0x7c>
     bee:	2b 89       	ldd	r18, Y+19	; 0x13
     bf0:	3c 89       	ldd	r19, Y+20	; 0x14
     bf2:	23 30       	cpi	r18, 0x03	; 3
     bf4:	31 05       	cpc	r19, r1
     bf6:	09 f4       	brne	.+2      	; 0xbfa <main+0xb4>
     bf8:	5f c0       	rjmp	.+190    	; 0xcb8 <main+0x172>
     bfa:	8b 89       	ldd	r24, Y+19	; 0x13
     bfc:	9c 89       	ldd	r25, Y+20	; 0x14
     bfe:	84 30       	cpi	r24, 0x04	; 4
     c00:	91 05       	cpc	r25, r1
     c02:	09 f4       	brne	.+2      	; 0xc06 <main+0xc0>
     c04:	62 c0       	rjmp	.+196    	; 0xcca <main+0x184>
     c06:	dd cf       	rjmp	.-70     	; 0xbc2 <main+0x7c>

		/* Creating new password step */
		case 1: {
			uint32 pass = 0;
     c08:	1b 86       	std	Y+11, r1	; 0x0b
     c0a:	1c 86       	std	Y+12, r1	; 0x0c
     c0c:	1d 86       	std	Y+13, r1	; 0x0d
     c0e:	1e 86       	std	Y+14, r1	; 0x0e
			uint32 repass = 0;
     c10:	1f 86       	std	Y+15, r1	; 0x0f
     c12:	18 8a       	std	Y+16, r1	; 0x10
     c14:	19 8a       	std	Y+17, r1	; 0x11
     c16:	1a 8a       	std	Y+18, r1	; 0x12
			ask_for_new_pass(&pass, &repass);
     c18:	ce 01       	movw	r24, r28
     c1a:	0b 96       	adiw	r24, 0x0b	; 11
     c1c:	9e 01       	movw	r18, r28
     c1e:	21 5f       	subi	r18, 0xF1	; 241
     c20:	3f 4f       	sbci	r19, 0xFF	; 255
     c22:	b9 01       	movw	r22, r18
     c24:	0e 94 6e 06 	call	0xcdc	; 0xcdc <ask_for_new_pass>
			if (pass == repass) {
     c28:	2b 85       	ldd	r18, Y+11	; 0x0b
     c2a:	3c 85       	ldd	r19, Y+12	; 0x0c
     c2c:	4d 85       	ldd	r20, Y+13	; 0x0d
     c2e:	5e 85       	ldd	r21, Y+14	; 0x0e
     c30:	8f 85       	ldd	r24, Y+15	; 0x0f
     c32:	98 89       	ldd	r25, Y+16	; 0x10
     c34:	a9 89       	ldd	r26, Y+17	; 0x11
     c36:	ba 89       	ldd	r27, Y+18	; 0x12
     c38:	28 17       	cp	r18, r24
     c3a:	39 07       	cpc	r19, r25
     c3c:	4a 07       	cpc	r20, r26
     c3e:	5b 07       	cpc	r21, r27
     c40:	01 f5       	brne	.+64     	; 0xc82 <main+0x13c>
				LCD_clearScreen();
     c42:	0e 94 3e 12 	call	0x247c	; 0x247c <LCD_clearScreen>
				LCD_displayString("Password match !");
     c46:	80 e6       	ldi	r24, 0x60	; 96
     c48:	90 e0       	ldi	r25, 0x00	; 0
     c4a:	0e 94 97 11 	call	0x232e	; 0x232e <LCD_displayString>
				delay_millis(3000);
     c4e:	68 eb       	ldi	r22, 0xB8	; 184
     c50:	7b e0       	ldi	r23, 0x0B	; 11
     c52:	80 e0       	ldi	r24, 0x00	; 0
     c54:	90 e0       	ldi	r25, 0x00	; 0
     c56:	0e 94 23 13 	call	0x2646	; 0x2646 <delay_millis>

				UART_sendByte(SEND_PASS);
     c5a:	81 ef       	ldi	r24, 0xF1	; 241
     c5c:	90 e0       	ldi	r25, 0x00	; 0
     c5e:	0e 94 4a 14 	call	0x2894	; 0x2894 <UART_sendByte>

				while (UART_recieveByte() != PASS_OK) {
     c62:	0e 94 74 14 	call	0x28e8	; 0x28e8 <UART_recieveByte>
     c66:	83 3f       	cpi	r24, 0xF3	; 243
     c68:	91 05       	cpc	r25, r1
     c6a:	d9 f7       	brne	.-10     	; 0xc62 <main+0x11c>
				};

				UART_sendLong(pass);
     c6c:	8b 85       	ldd	r24, Y+11	; 0x0b
     c6e:	9c 85       	ldd	r25, Y+12	; 0x0c
     c70:	ad 85       	ldd	r26, Y+13	; 0x0d
     c72:	be 85       	ldd	r27, Y+14	; 0x0e
     c74:	bc 01       	movw	r22, r24
     c76:	cd 01       	movw	r24, r26
     c78:	0e 94 20 15 	call	0x2a40	; 0x2a40 <UART_sendLong>
				option = 2;
     c7c:	82 e0       	ldi	r24, 0x02	; 2
     c7e:	89 83       	std	Y+1, r24	; 0x01
     c80:	a0 cf       	rjmp	.-192    	; 0xbc2 <main+0x7c>
			} else {
				LCD_clearScreen();
     c82:	0e 94 3e 12 	call	0x247c	; 0x247c <LCD_clearScreen>
				LCD_displayString("Pass mismatch !");
     c86:	81 e7       	ldi	r24, 0x71	; 113
     c88:	90 e0       	ldi	r25, 0x00	; 0
     c8a:	0e 94 97 11 	call	0x232e	; 0x232e <LCD_displayString>
				LCD_displayStringRowColumn(1, 0, "Please try again");
     c8e:	21 e8       	ldi	r18, 0x81	; 129
     c90:	30 e0       	ldi	r19, 0x00	; 0
     c92:	81 e0       	ldi	r24, 0x01	; 1
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	a9 01       	movw	r20, r18
     c98:	0e 94 02 12 	call	0x2404	; 0x2404 <LCD_displayStringRowColumn>
				option = 1;
     c9c:	81 e0       	ldi	r24, 0x01	; 1
     c9e:	89 83       	std	Y+1, r24	; 0x01
				delay_millis(3000);
     ca0:	68 eb       	ldi	r22, 0xB8	; 184
     ca2:	7b e0       	ldi	r23, 0x0B	; 11
     ca4:	80 e0       	ldi	r24, 0x00	; 0
     ca6:	90 e0       	ldi	r25, 0x00	; 0
     ca8:	0e 94 23 13 	call	0x2646	; 0x2646 <delay_millis>
     cac:	8a cf       	rjmp	.-236    	; 0xbc2 <main+0x7c>
		}
			break;

			/* Showing main menu step */
		case 2:
			show_main_options(&option);
     cae:	ce 01       	movw	r24, r28
     cb0:	01 96       	adiw	r24, 0x01	; 1
     cb2:	0e 94 eb 07 	call	0xfd6	; 0xfd6 <show_main_options>
     cb6:	85 cf       	rjmp	.-246    	; 0xbc2 <main+0x7c>
			break;

			/* Opening the door step */
		case 3:
			open_door(&pass_attempts, &option);
     cb8:	ce 01       	movw	r24, r28
     cba:	02 96       	adiw	r24, 0x02	; 2
     cbc:	9e 01       	movw	r18, r28
     cbe:	2f 5f       	subi	r18, 0xFF	; 255
     cc0:	3f 4f       	sbci	r19, 0xFF	; 255
     cc2:	b9 01       	movw	r22, r18
     cc4:	0e 94 60 08 	call	0x10c0	; 0x10c0 <open_door>
     cc8:	7c cf       	rjmp	.-264    	; 0xbc2 <main+0x7c>
			break;

			/* Changing password step */

		case 4:
			change_pass(&pass_attempts, &option);
     cca:	ce 01       	movw	r24, r28
     ccc:	02 96       	adiw	r24, 0x02	; 2
     cce:	9e 01       	movw	r18, r28
     cd0:	2f 5f       	subi	r18, 0xFF	; 255
     cd2:	3f 4f       	sbci	r19, 0xFF	; 255
     cd4:	b9 01       	movw	r22, r18
     cd6:	0e 94 ed 08 	call	0x11da	; 0x11da <change_pass>
     cda:	73 cf       	rjmp	.-282    	; 0xbc2 <main+0x7c>

00000cdc <ask_for_new_pass>:

/*******************************************************************************
 *                           Function definitions                              *
 *******************************************************************************/

void ask_for_new_pass(uint32 *pass, uint32 *repass) {
     cdc:	ef 92       	push	r14
     cde:	ff 92       	push	r15
     ce0:	0f 93       	push	r16
     ce2:	1f 93       	push	r17
     ce4:	df 93       	push	r29
     ce6:	cf 93       	push	r28
     ce8:	00 d0       	rcall	.+0      	; 0xcea <ask_for_new_pass+0xe>
     cea:	00 d0       	rcall	.+0      	; 0xcec <ask_for_new_pass+0x10>
     cec:	cd b7       	in	r28, 0x3d	; 61
     cee:	de b7       	in	r29, 0x3e	; 62
     cf0:	9a 83       	std	Y+2, r25	; 0x02
     cf2:	89 83       	std	Y+1, r24	; 0x01
     cf4:	7c 83       	std	Y+4, r23	; 0x04
     cf6:	6b 83       	std	Y+3, r22	; 0x03
	LCD_clearScreen();
     cf8:	0e 94 3e 12 	call	0x247c	; 0x247c <LCD_clearScreen>
	LCD_displayString("Please enter new ");
     cfc:	82 e9       	ldi	r24, 0x92	; 146
     cfe:	90 e0       	ldi	r25, 0x00	; 0
     d00:	0e 94 97 11 	call	0x232e	; 0x232e <LCD_displayString>
	LCD_displayStringRowColumn(1, 0, "password: ");
     d04:	24 ea       	ldi	r18, 0xA4	; 164
     d06:	30 e0       	ldi	r19, 0x00	; 0
     d08:	81 e0       	ldi	r24, 0x01	; 1
     d0a:	60 e0       	ldi	r22, 0x00	; 0
     d0c:	a9 01       	movw	r20, r18
     d0e:	0e 94 02 12 	call	0x2404	; 0x2404 <LCD_displayStringRowColumn>
     d12:	35 c0       	rjmp	.+106    	; 0xd7e <ask_for_new_pass+0xa2>
	while (*pass < 100000) {
		*pass += KEYPAD_getPressedKey();
     d14:	e9 81       	ldd	r30, Y+1	; 0x01
     d16:	fa 81       	ldd	r31, Y+2	; 0x02
     d18:	e0 80       	ld	r14, Z
     d1a:	f1 80       	ldd	r15, Z+1	; 0x01
     d1c:	02 81       	ldd	r16, Z+2	; 0x02
     d1e:	13 81       	ldd	r17, Z+3	; 0x03
     d20:	0e 94 94 0c 	call	0x1928	; 0x1928 <KEYPAD_getPressedKey>
     d24:	88 2f       	mov	r24, r24
     d26:	90 e0       	ldi	r25, 0x00	; 0
     d28:	a0 e0       	ldi	r26, 0x00	; 0
     d2a:	b0 e0       	ldi	r27, 0x00	; 0
     d2c:	8e 0d       	add	r24, r14
     d2e:	9f 1d       	adc	r25, r15
     d30:	a0 1f       	adc	r26, r16
     d32:	b1 1f       	adc	r27, r17
     d34:	e9 81       	ldd	r30, Y+1	; 0x01
     d36:	fa 81       	ldd	r31, Y+2	; 0x02
     d38:	80 83       	st	Z, r24
     d3a:	91 83       	std	Z+1, r25	; 0x01
     d3c:	a2 83       	std	Z+2, r26	; 0x02
     d3e:	b3 83       	std	Z+3, r27	; 0x03
		*pass *= 10;
     d40:	e9 81       	ldd	r30, Y+1	; 0x01
     d42:	fa 81       	ldd	r31, Y+2	; 0x02
     d44:	80 81       	ld	r24, Z
     d46:	91 81       	ldd	r25, Z+1	; 0x01
     d48:	a2 81       	ldd	r26, Z+2	; 0x02
     d4a:	b3 81       	ldd	r27, Z+3	; 0x03
     d4c:	2a e0       	ldi	r18, 0x0A	; 10
     d4e:	30 e0       	ldi	r19, 0x00	; 0
     d50:	40 e0       	ldi	r20, 0x00	; 0
     d52:	50 e0       	ldi	r21, 0x00	; 0
     d54:	bc 01       	movw	r22, r24
     d56:	cd 01       	movw	r24, r26
     d58:	0e 94 76 15 	call	0x2aec	; 0x2aec <__mulsi3>
     d5c:	dc 01       	movw	r26, r24
     d5e:	cb 01       	movw	r24, r22
     d60:	e9 81       	ldd	r30, Y+1	; 0x01
     d62:	fa 81       	ldd	r31, Y+2	; 0x02
     d64:	80 83       	st	Z, r24
     d66:	91 83       	std	Z+1, r25	; 0x01
     d68:	a2 83       	std	Z+2, r26	; 0x02
     d6a:	b3 83       	std	Z+3, r27	; 0x03
		LCD_displayCharacter('*');
     d6c:	8a e2       	ldi	r24, 0x2A	; 42
     d6e:	0e 94 a3 0f 	call	0x1f46	; 0x1f46 <LCD_displayCharacter>
		delay_millis(400);
     d72:	60 e9       	ldi	r22, 0x90	; 144
     d74:	71 e0       	ldi	r23, 0x01	; 1
     d76:	80 e0       	ldi	r24, 0x00	; 0
     d78:	90 e0       	ldi	r25, 0x00	; 0
     d7a:	0e 94 23 13 	call	0x2646	; 0x2646 <delay_millis>

void ask_for_new_pass(uint32 *pass, uint32 *repass) {
	LCD_clearScreen();
	LCD_displayString("Please enter new ");
	LCD_displayStringRowColumn(1, 0, "password: ");
	while (*pass < 100000) {
     d7e:	e9 81       	ldd	r30, Y+1	; 0x01
     d80:	fa 81       	ldd	r31, Y+2	; 0x02
     d82:	80 81       	ld	r24, Z
     d84:	91 81       	ldd	r25, Z+1	; 0x01
     d86:	a2 81       	ldd	r26, Z+2	; 0x02
     d88:	b3 81       	ldd	r27, Z+3	; 0x03
     d8a:	80 3a       	cpi	r24, 0xA0	; 160
     d8c:	26 e8       	ldi	r18, 0x86	; 134
     d8e:	92 07       	cpc	r25, r18
     d90:	21 e0       	ldi	r18, 0x01	; 1
     d92:	a2 07       	cpc	r26, r18
     d94:	20 e0       	ldi	r18, 0x00	; 0
     d96:	b2 07       	cpc	r27, r18
     d98:	08 f4       	brcc	.+2      	; 0xd9c <ask_for_new_pass+0xc0>
     d9a:	bc cf       	rjmp	.-136    	; 0xd14 <ask_for_new_pass+0x38>
		*pass += KEYPAD_getPressedKey();
		*pass *= 10;
		LCD_displayCharacter('*');
		delay_millis(400);
	}
	*pass /= 10;
     d9c:	e9 81       	ldd	r30, Y+1	; 0x01
     d9e:	fa 81       	ldd	r31, Y+2	; 0x02
     da0:	80 81       	ld	r24, Z
     da2:	91 81       	ldd	r25, Z+1	; 0x01
     da4:	a2 81       	ldd	r26, Z+2	; 0x02
     da6:	b3 81       	ldd	r27, Z+3	; 0x03
     da8:	2a e0       	ldi	r18, 0x0A	; 10
     daa:	30 e0       	ldi	r19, 0x00	; 0
     dac:	40 e0       	ldi	r20, 0x00	; 0
     dae:	50 e0       	ldi	r21, 0x00	; 0
     db0:	bc 01       	movw	r22, r24
     db2:	cd 01       	movw	r24, r26
     db4:	0e 94 95 15 	call	0x2b2a	; 0x2b2a <__udivmodsi4>
     db8:	da 01       	movw	r26, r20
     dba:	c9 01       	movw	r24, r18
     dbc:	e9 81       	ldd	r30, Y+1	; 0x01
     dbe:	fa 81       	ldd	r31, Y+2	; 0x02
     dc0:	80 83       	st	Z, r24
     dc2:	91 83       	std	Z+1, r25	; 0x01
     dc4:	a2 83       	std	Z+2, r26	; 0x02
     dc6:	b3 83       	std	Z+3, r27	; 0x03
	while (KEYPAD_getPressedKey() != 13) {
     dc8:	0e 94 94 0c 	call	0x1928	; 0x1928 <KEYPAD_getPressedKey>
     dcc:	8d 30       	cpi	r24, 0x0D	; 13
     dce:	e1 f7       	brne	.-8      	; 0xdc8 <ask_for_new_pass+0xec>
	};
	delay_millis(400);
     dd0:	60 e9       	ldi	r22, 0x90	; 144
     dd2:	71 e0       	ldi	r23, 0x01	; 1
     dd4:	80 e0       	ldi	r24, 0x00	; 0
     dd6:	90 e0       	ldi	r25, 0x00	; 0
     dd8:	0e 94 23 13 	call	0x2646	; 0x2646 <delay_millis>
	LCD_clearScreen();
     ddc:	0e 94 3e 12 	call	0x247c	; 0x247c <LCD_clearScreen>
	LCD_displayString("Please re-enter");
     de0:	8f ea       	ldi	r24, 0xAF	; 175
     de2:	90 e0       	ldi	r25, 0x00	; 0
     de4:	0e 94 97 11 	call	0x232e	; 0x232e <LCD_displayString>
	LCD_displayStringRowColumn(1, 0, "password: ");
     de8:	24 ea       	ldi	r18, 0xA4	; 164
     dea:	30 e0       	ldi	r19, 0x00	; 0
     dec:	81 e0       	ldi	r24, 0x01	; 1
     dee:	60 e0       	ldi	r22, 0x00	; 0
     df0:	a9 01       	movw	r20, r18
     df2:	0e 94 02 12 	call	0x2404	; 0x2404 <LCD_displayStringRowColumn>
     df6:	35 c0       	rjmp	.+106    	; 0xe62 <ask_for_new_pass+0x186>
	while (*repass < 100000) {
		*repass += KEYPAD_getPressedKey();
     df8:	eb 81       	ldd	r30, Y+3	; 0x03
     dfa:	fc 81       	ldd	r31, Y+4	; 0x04
     dfc:	e0 80       	ld	r14, Z
     dfe:	f1 80       	ldd	r15, Z+1	; 0x01
     e00:	02 81       	ldd	r16, Z+2	; 0x02
     e02:	13 81       	ldd	r17, Z+3	; 0x03
     e04:	0e 94 94 0c 	call	0x1928	; 0x1928 <KEYPAD_getPressedKey>
     e08:	88 2f       	mov	r24, r24
     e0a:	90 e0       	ldi	r25, 0x00	; 0
     e0c:	a0 e0       	ldi	r26, 0x00	; 0
     e0e:	b0 e0       	ldi	r27, 0x00	; 0
     e10:	8e 0d       	add	r24, r14
     e12:	9f 1d       	adc	r25, r15
     e14:	a0 1f       	adc	r26, r16
     e16:	b1 1f       	adc	r27, r17
     e18:	eb 81       	ldd	r30, Y+3	; 0x03
     e1a:	fc 81       	ldd	r31, Y+4	; 0x04
     e1c:	80 83       	st	Z, r24
     e1e:	91 83       	std	Z+1, r25	; 0x01
     e20:	a2 83       	std	Z+2, r26	; 0x02
     e22:	b3 83       	std	Z+3, r27	; 0x03
		*repass *= 10;
     e24:	eb 81       	ldd	r30, Y+3	; 0x03
     e26:	fc 81       	ldd	r31, Y+4	; 0x04
     e28:	80 81       	ld	r24, Z
     e2a:	91 81       	ldd	r25, Z+1	; 0x01
     e2c:	a2 81       	ldd	r26, Z+2	; 0x02
     e2e:	b3 81       	ldd	r27, Z+3	; 0x03
     e30:	2a e0       	ldi	r18, 0x0A	; 10
     e32:	30 e0       	ldi	r19, 0x00	; 0
     e34:	40 e0       	ldi	r20, 0x00	; 0
     e36:	50 e0       	ldi	r21, 0x00	; 0
     e38:	bc 01       	movw	r22, r24
     e3a:	cd 01       	movw	r24, r26
     e3c:	0e 94 76 15 	call	0x2aec	; 0x2aec <__mulsi3>
     e40:	dc 01       	movw	r26, r24
     e42:	cb 01       	movw	r24, r22
     e44:	eb 81       	ldd	r30, Y+3	; 0x03
     e46:	fc 81       	ldd	r31, Y+4	; 0x04
     e48:	80 83       	st	Z, r24
     e4a:	91 83       	std	Z+1, r25	; 0x01
     e4c:	a2 83       	std	Z+2, r26	; 0x02
     e4e:	b3 83       	std	Z+3, r27	; 0x03
		LCD_displayCharacter('*');
     e50:	8a e2       	ldi	r24, 0x2A	; 42
     e52:	0e 94 a3 0f 	call	0x1f46	; 0x1f46 <LCD_displayCharacter>
		delay_millis(400);
     e56:	60 e9       	ldi	r22, 0x90	; 144
     e58:	71 e0       	ldi	r23, 0x01	; 1
     e5a:	80 e0       	ldi	r24, 0x00	; 0
     e5c:	90 e0       	ldi	r25, 0x00	; 0
     e5e:	0e 94 23 13 	call	0x2646	; 0x2646 <delay_millis>
	};
	delay_millis(400);
	LCD_clearScreen();
	LCD_displayString("Please re-enter");
	LCD_displayStringRowColumn(1, 0, "password: ");
	while (*repass < 100000) {
     e62:	eb 81       	ldd	r30, Y+3	; 0x03
     e64:	fc 81       	ldd	r31, Y+4	; 0x04
     e66:	80 81       	ld	r24, Z
     e68:	91 81       	ldd	r25, Z+1	; 0x01
     e6a:	a2 81       	ldd	r26, Z+2	; 0x02
     e6c:	b3 81       	ldd	r27, Z+3	; 0x03
     e6e:	80 3a       	cpi	r24, 0xA0	; 160
     e70:	26 e8       	ldi	r18, 0x86	; 134
     e72:	92 07       	cpc	r25, r18
     e74:	21 e0       	ldi	r18, 0x01	; 1
     e76:	a2 07       	cpc	r26, r18
     e78:	20 e0       	ldi	r18, 0x00	; 0
     e7a:	b2 07       	cpc	r27, r18
     e7c:	08 f4       	brcc	.+2      	; 0xe80 <ask_for_new_pass+0x1a4>
     e7e:	bc cf       	rjmp	.-136    	; 0xdf8 <ask_for_new_pass+0x11c>
		*repass += KEYPAD_getPressedKey();
		*repass *= 10;
		LCD_displayCharacter('*');
		delay_millis(400);
	}
	*repass /= 10;
     e80:	eb 81       	ldd	r30, Y+3	; 0x03
     e82:	fc 81       	ldd	r31, Y+4	; 0x04
     e84:	80 81       	ld	r24, Z
     e86:	91 81       	ldd	r25, Z+1	; 0x01
     e88:	a2 81       	ldd	r26, Z+2	; 0x02
     e8a:	b3 81       	ldd	r27, Z+3	; 0x03
     e8c:	2a e0       	ldi	r18, 0x0A	; 10
     e8e:	30 e0       	ldi	r19, 0x00	; 0
     e90:	40 e0       	ldi	r20, 0x00	; 0
     e92:	50 e0       	ldi	r21, 0x00	; 0
     e94:	bc 01       	movw	r22, r24
     e96:	cd 01       	movw	r24, r26
     e98:	0e 94 95 15 	call	0x2b2a	; 0x2b2a <__udivmodsi4>
     e9c:	da 01       	movw	r26, r20
     e9e:	c9 01       	movw	r24, r18
     ea0:	eb 81       	ldd	r30, Y+3	; 0x03
     ea2:	fc 81       	ldd	r31, Y+4	; 0x04
     ea4:	80 83       	st	Z, r24
     ea6:	91 83       	std	Z+1, r25	; 0x01
     ea8:	a2 83       	std	Z+2, r26	; 0x02
     eaa:	b3 83       	std	Z+3, r27	; 0x03
	while (KEYPAD_getPressedKey() != 13) {
     eac:	0e 94 94 0c 	call	0x1928	; 0x1928 <KEYPAD_getPressedKey>
     eb0:	8d 30       	cpi	r24, 0x0D	; 13
     eb2:	e1 f7       	brne	.-8      	; 0xeac <ask_for_new_pass+0x1d0>
	};
	delay_millis(400);
     eb4:	60 e9       	ldi	r22, 0x90	; 144
     eb6:	71 e0       	ldi	r23, 0x01	; 1
     eb8:	80 e0       	ldi	r24, 0x00	; 0
     eba:	90 e0       	ldi	r25, 0x00	; 0
     ebc:	0e 94 23 13 	call	0x2646	; 0x2646 <delay_millis>
}
     ec0:	0f 90       	pop	r0
     ec2:	0f 90       	pop	r0
     ec4:	0f 90       	pop	r0
     ec6:	0f 90       	pop	r0
     ec8:	cf 91       	pop	r28
     eca:	df 91       	pop	r29
     ecc:	1f 91       	pop	r17
     ece:	0f 91       	pop	r16
     ed0:	ff 90       	pop	r15
     ed2:	ef 90       	pop	r14
     ed4:	08 95       	ret

00000ed6 <ask_for_pass>:

uint32 ask_for_pass(void) {
     ed6:	df 93       	push	r29
     ed8:	cf 93       	push	r28
     eda:	00 d0       	rcall	.+0      	; 0xedc <ask_for_pass+0x6>
     edc:	00 d0       	rcall	.+0      	; 0xede <ask_for_pass+0x8>
     ede:	cd b7       	in	r28, 0x3d	; 61
     ee0:	de b7       	in	r29, 0x3e	; 62
	uint32 password = 0;
     ee2:	19 82       	std	Y+1, r1	; 0x01
     ee4:	1a 82       	std	Y+2, r1	; 0x02
     ee6:	1b 82       	std	Y+3, r1	; 0x03
     ee8:	1c 82       	std	Y+4, r1	; 0x04
	delay_millis(400);
     eea:	60 e9       	ldi	r22, 0x90	; 144
     eec:	71 e0       	ldi	r23, 0x01	; 1
     eee:	80 e0       	ldi	r24, 0x00	; 0
     ef0:	90 e0       	ldi	r25, 0x00	; 0
     ef2:	0e 94 23 13 	call	0x2646	; 0x2646 <delay_millis>
	LCD_clearScreen();
     ef6:	0e 94 3e 12 	call	0x247c	; 0x247c <LCD_clearScreen>
	LCD_displayString("Please enter  ");
     efa:	8f eb       	ldi	r24, 0xBF	; 191
     efc:	90 e0       	ldi	r25, 0x00	; 0
     efe:	0e 94 97 11 	call	0x232e	; 0x232e <LCD_displayString>
	LCD_displayStringRowColumn(1, 0, "password: ");
     f02:	24 ea       	ldi	r18, 0xA4	; 164
     f04:	30 e0       	ldi	r19, 0x00	; 0
     f06:	81 e0       	ldi	r24, 0x01	; 1
     f08:	60 e0       	ldi	r22, 0x00	; 0
     f0a:	a9 01       	movw	r20, r18
     f0c:	0e 94 02 12 	call	0x2404	; 0x2404 <LCD_displayStringRowColumn>
     f10:	2d c0       	rjmp	.+90     	; 0xf6c <ask_for_pass+0x96>
	while (password < 100000) {
		password += KEYPAD_getPressedKey();
     f12:	0e 94 94 0c 	call	0x1928	; 0x1928 <KEYPAD_getPressedKey>
     f16:	28 2f       	mov	r18, r24
     f18:	30 e0       	ldi	r19, 0x00	; 0
     f1a:	40 e0       	ldi	r20, 0x00	; 0
     f1c:	50 e0       	ldi	r21, 0x00	; 0
     f1e:	89 81       	ldd	r24, Y+1	; 0x01
     f20:	9a 81       	ldd	r25, Y+2	; 0x02
     f22:	ab 81       	ldd	r26, Y+3	; 0x03
     f24:	bc 81       	ldd	r27, Y+4	; 0x04
     f26:	82 0f       	add	r24, r18
     f28:	93 1f       	adc	r25, r19
     f2a:	a4 1f       	adc	r26, r20
     f2c:	b5 1f       	adc	r27, r21
     f2e:	89 83       	std	Y+1, r24	; 0x01
     f30:	9a 83       	std	Y+2, r25	; 0x02
     f32:	ab 83       	std	Y+3, r26	; 0x03
     f34:	bc 83       	std	Y+4, r27	; 0x04
		password *= 10;
     f36:	89 81       	ldd	r24, Y+1	; 0x01
     f38:	9a 81       	ldd	r25, Y+2	; 0x02
     f3a:	ab 81       	ldd	r26, Y+3	; 0x03
     f3c:	bc 81       	ldd	r27, Y+4	; 0x04
     f3e:	2a e0       	ldi	r18, 0x0A	; 10
     f40:	30 e0       	ldi	r19, 0x00	; 0
     f42:	40 e0       	ldi	r20, 0x00	; 0
     f44:	50 e0       	ldi	r21, 0x00	; 0
     f46:	bc 01       	movw	r22, r24
     f48:	cd 01       	movw	r24, r26
     f4a:	0e 94 76 15 	call	0x2aec	; 0x2aec <__mulsi3>
     f4e:	dc 01       	movw	r26, r24
     f50:	cb 01       	movw	r24, r22
     f52:	89 83       	std	Y+1, r24	; 0x01
     f54:	9a 83       	std	Y+2, r25	; 0x02
     f56:	ab 83       	std	Y+3, r26	; 0x03
     f58:	bc 83       	std	Y+4, r27	; 0x04
		LCD_displayCharacter('*');
     f5a:	8a e2       	ldi	r24, 0x2A	; 42
     f5c:	0e 94 a3 0f 	call	0x1f46	; 0x1f46 <LCD_displayCharacter>
		delay_millis(400);
     f60:	60 e9       	ldi	r22, 0x90	; 144
     f62:	71 e0       	ldi	r23, 0x01	; 1
     f64:	80 e0       	ldi	r24, 0x00	; 0
     f66:	90 e0       	ldi	r25, 0x00	; 0
     f68:	0e 94 23 13 	call	0x2646	; 0x2646 <delay_millis>
	uint32 password = 0;
	delay_millis(400);
	LCD_clearScreen();
	LCD_displayString("Please enter  ");
	LCD_displayStringRowColumn(1, 0, "password: ");
	while (password < 100000) {
     f6c:	89 81       	ldd	r24, Y+1	; 0x01
     f6e:	9a 81       	ldd	r25, Y+2	; 0x02
     f70:	ab 81       	ldd	r26, Y+3	; 0x03
     f72:	bc 81       	ldd	r27, Y+4	; 0x04
     f74:	80 3a       	cpi	r24, 0xA0	; 160
     f76:	26 e8       	ldi	r18, 0x86	; 134
     f78:	92 07       	cpc	r25, r18
     f7a:	21 e0       	ldi	r18, 0x01	; 1
     f7c:	a2 07       	cpc	r26, r18
     f7e:	20 e0       	ldi	r18, 0x00	; 0
     f80:	b2 07       	cpc	r27, r18
     f82:	38 f2       	brcs	.-114    	; 0xf12 <ask_for_pass+0x3c>
		password += KEYPAD_getPressedKey();
		password *= 10;
		LCD_displayCharacter('*');
		delay_millis(400);
	}
	password /= 10;
     f84:	89 81       	ldd	r24, Y+1	; 0x01
     f86:	9a 81       	ldd	r25, Y+2	; 0x02
     f88:	ab 81       	ldd	r26, Y+3	; 0x03
     f8a:	bc 81       	ldd	r27, Y+4	; 0x04
     f8c:	2a e0       	ldi	r18, 0x0A	; 10
     f8e:	30 e0       	ldi	r19, 0x00	; 0
     f90:	40 e0       	ldi	r20, 0x00	; 0
     f92:	50 e0       	ldi	r21, 0x00	; 0
     f94:	bc 01       	movw	r22, r24
     f96:	cd 01       	movw	r24, r26
     f98:	0e 94 95 15 	call	0x2b2a	; 0x2b2a <__udivmodsi4>
     f9c:	da 01       	movw	r26, r20
     f9e:	c9 01       	movw	r24, r18
     fa0:	89 83       	std	Y+1, r24	; 0x01
     fa2:	9a 83       	std	Y+2, r25	; 0x02
     fa4:	ab 83       	std	Y+3, r26	; 0x03
     fa6:	bc 83       	std	Y+4, r27	; 0x04
	while (KEYPAD_getPressedKey() != 13) {
     fa8:	0e 94 94 0c 	call	0x1928	; 0x1928 <KEYPAD_getPressedKey>
     fac:	8d 30       	cpi	r24, 0x0D	; 13
     fae:	e1 f7       	brne	.-8      	; 0xfa8 <ask_for_pass+0xd2>
	};
	delay_millis(400);
     fb0:	60 e9       	ldi	r22, 0x90	; 144
     fb2:	71 e0       	ldi	r23, 0x01	; 1
     fb4:	80 e0       	ldi	r24, 0x00	; 0
     fb6:	90 e0       	ldi	r25, 0x00	; 0
     fb8:	0e 94 23 13 	call	0x2646	; 0x2646 <delay_millis>

	return password;
     fbc:	89 81       	ldd	r24, Y+1	; 0x01
     fbe:	9a 81       	ldd	r25, Y+2	; 0x02
     fc0:	ab 81       	ldd	r26, Y+3	; 0x03
     fc2:	bc 81       	ldd	r27, Y+4	; 0x04
}
     fc4:	bc 01       	movw	r22, r24
     fc6:	cd 01       	movw	r24, r26
     fc8:	0f 90       	pop	r0
     fca:	0f 90       	pop	r0
     fcc:	0f 90       	pop	r0
     fce:	0f 90       	pop	r0
     fd0:	cf 91       	pop	r28
     fd2:	df 91       	pop	r29
     fd4:	08 95       	ret

00000fd6 <show_main_options>:

void show_main_options(uint8 *option) {
     fd6:	df 93       	push	r29
     fd8:	cf 93       	push	r28
     fda:	00 d0       	rcall	.+0      	; 0xfdc <show_main_options+0x6>
     fdc:	0f 92       	push	r0
     fde:	cd b7       	in	r28, 0x3d	; 61
     fe0:	de b7       	in	r29, 0x3e	; 62
     fe2:	9b 83       	std	Y+3, r25	; 0x03
     fe4:	8a 83       	std	Y+2, r24	; 0x02
	uint8 key;
	LCD_clearScreen();
     fe6:	0e 94 3e 12 	call	0x247c	; 0x247c <LCD_clearScreen>
	LCD_displayString("+ :open the door");
     fea:	8e ec       	ldi	r24, 0xCE	; 206
     fec:	90 e0       	ldi	r25, 0x00	; 0
     fee:	0e 94 97 11 	call	0x232e	; 0x232e <LCD_displayString>
	LCD_displayStringRowColumn(1, 0, "- :change pass");
     ff2:	2f ed       	ldi	r18, 0xDF	; 223
     ff4:	30 e0       	ldi	r19, 0x00	; 0
     ff6:	81 e0       	ldi	r24, 0x01	; 1
     ff8:	60 e0       	ldi	r22, 0x00	; 0
     ffa:	a9 01       	movw	r20, r18
     ffc:	0e 94 02 12 	call	0x2404	; 0x2404 <LCD_displayStringRowColumn>
	key = KEYPAD_getPressedKey();
    1000:	0e 94 94 0c 	call	0x1928	; 0x1928 <KEYPAD_getPressedKey>
    1004:	89 83       	std	Y+1, r24	; 0x01
	delay_millis(400);
    1006:	60 e9       	ldi	r22, 0x90	; 144
    1008:	71 e0       	ldi	r23, 0x01	; 1
    100a:	80 e0       	ldi	r24, 0x00	; 0
    100c:	90 e0       	ldi	r25, 0x00	; 0
    100e:	0e 94 23 13 	call	0x2646	; 0x2646 <delay_millis>
	if (key == '+')
    1012:	89 81       	ldd	r24, Y+1	; 0x01
    1014:	8b 32       	cpi	r24, 0x2B	; 43
    1016:	29 f4       	brne	.+10     	; 0x1022 <show_main_options+0x4c>
		*option = 3;
    1018:	ea 81       	ldd	r30, Y+2	; 0x02
    101a:	fb 81       	ldd	r31, Y+3	; 0x03
    101c:	83 e0       	ldi	r24, 0x03	; 3
    101e:	80 83       	st	Z, r24
    1020:	1a c0       	rjmp	.+52     	; 0x1056 <show_main_options+0x80>
	else if (KEYPAD_getPressedKey() == '-')
    1022:	0e 94 94 0c 	call	0x1928	; 0x1928 <KEYPAD_getPressedKey>
    1026:	8d 32       	cpi	r24, 0x2D	; 45
    1028:	29 f4       	brne	.+10     	; 0x1034 <show_main_options+0x5e>
		*option = 4;
    102a:	ea 81       	ldd	r30, Y+2	; 0x02
    102c:	fb 81       	ldd	r31, Y+3	; 0x03
    102e:	84 e0       	ldi	r24, 0x04	; 4
    1030:	80 83       	st	Z, r24
    1032:	11 c0       	rjmp	.+34     	; 0x1056 <show_main_options+0x80>
	else {
		LCD_clearScreen();
    1034:	0e 94 3e 12 	call	0x247c	; 0x247c <LCD_clearScreen>
		LCD_displayString("Wrong choice!");
    1038:	8e ee       	ldi	r24, 0xEE	; 238
    103a:	90 e0       	ldi	r25, 0x00	; 0
    103c:	0e 94 97 11 	call	0x232e	; 0x232e <LCD_displayString>
		LCD_displayStringRowColumn(1, 0, "Please try again");
    1040:	21 e8       	ldi	r18, 0x81	; 129
    1042:	30 e0       	ldi	r19, 0x00	; 0
    1044:	81 e0       	ldi	r24, 0x01	; 1
    1046:	60 e0       	ldi	r22, 0x00	; 0
    1048:	a9 01       	movw	r20, r18
    104a:	0e 94 02 12 	call	0x2404	; 0x2404 <LCD_displayStringRowColumn>
		*option = 2;
    104e:	ea 81       	ldd	r30, Y+2	; 0x02
    1050:	fb 81       	ldd	r31, Y+3	; 0x03
    1052:	82 e0       	ldi	r24, 0x02	; 2
    1054:	80 83       	st	Z, r24
	}
}
    1056:	0f 90       	pop	r0
    1058:	0f 90       	pop	r0
    105a:	0f 90       	pop	r0
    105c:	cf 91       	pop	r28
    105e:	df 91       	pop	r29
    1060:	08 95       	ret

00001062 <check_pass>:

uint8 check_pass(void) {
    1062:	df 93       	push	r29
    1064:	cf 93       	push	r28
    1066:	00 d0       	rcall	.+0      	; 0x1068 <check_pass+0x6>
    1068:	00 d0       	rcall	.+0      	; 0x106a <check_pass+0x8>
    106a:	0f 92       	push	r0
    106c:	cd b7       	in	r28, 0x3d	; 61
    106e:	de b7       	in	r29, 0x3e	; 62
	uint32 pass;
	pass = ask_for_pass();
    1070:	0e 94 6b 07 	call	0xed6	; 0xed6 <ask_for_pass>
    1074:	dc 01       	movw	r26, r24
    1076:	cb 01       	movw	r24, r22
    1078:	89 83       	std	Y+1, r24	; 0x01
    107a:	9a 83       	std	Y+2, r25	; 0x02
    107c:	ab 83       	std	Y+3, r26	; 0x03
    107e:	bc 83       	std	Y+4, r27	; 0x04
	while (UART_recieveByte() != PASS_OK) {
    1080:	0e 94 74 14 	call	0x28e8	; 0x28e8 <UART_recieveByte>
    1084:	83 3f       	cpi	r24, 0xF3	; 243
    1086:	91 05       	cpc	r25, r1
    1088:	d9 f7       	brne	.-10     	; 0x1080 <check_pass+0x1e>
	};
	UART_sendLong(pass);
    108a:	89 81       	ldd	r24, Y+1	; 0x01
    108c:	9a 81       	ldd	r25, Y+2	; 0x02
    108e:	ab 81       	ldd	r26, Y+3	; 0x03
    1090:	bc 81       	ldd	r27, Y+4	; 0x04
    1092:	bc 01       	movw	r22, r24
    1094:	cd 01       	movw	r24, r26
    1096:	0e 94 20 15 	call	0x2a40	; 0x2a40 <UART_sendLong>
	if (UART_recieveByte() == RIGHT_PASS) {
    109a:	0e 94 74 14 	call	0x28e8	; 0x28e8 <UART_recieveByte>
    109e:	87 3f       	cpi	r24, 0xF7	; 247
    10a0:	91 05       	cpc	r25, r1
    10a2:	19 f4       	brne	.+6      	; 0x10aa <check_pass+0x48>
		return RIGHT_PASS;
    10a4:	87 ef       	ldi	r24, 0xF7	; 247
    10a6:	8d 83       	std	Y+5, r24	; 0x05
    10a8:	02 c0       	rjmp	.+4      	; 0x10ae <check_pass+0x4c>
	} else
		return WRONG_PASS;
    10aa:	88 ef       	ldi	r24, 0xF8	; 248
    10ac:	8d 83       	std	Y+5, r24	; 0x05
    10ae:	8d 81       	ldd	r24, Y+5	; 0x05
}
    10b0:	0f 90       	pop	r0
    10b2:	0f 90       	pop	r0
    10b4:	0f 90       	pop	r0
    10b6:	0f 90       	pop	r0
    10b8:	0f 90       	pop	r0
    10ba:	cf 91       	pop	r28
    10bc:	df 91       	pop	r29
    10be:	08 95       	ret

000010c0 <open_door>:

void open_door(uint8 *pass_attempts, uint8 *option) {
    10c0:	df 93       	push	r29
    10c2:	cf 93       	push	r28
    10c4:	00 d0       	rcall	.+0      	; 0x10c6 <open_door+0x6>
    10c6:	00 d0       	rcall	.+0      	; 0x10c8 <open_door+0x8>
    10c8:	0f 92       	push	r0
    10ca:	cd b7       	in	r28, 0x3d	; 61
    10cc:	de b7       	in	r29, 0x3e	; 62
    10ce:	9b 83       	std	Y+3, r25	; 0x03
    10d0:	8a 83       	std	Y+2, r24	; 0x02
    10d2:	7d 83       	std	Y+5, r23	; 0x05
    10d4:	6c 83       	std	Y+4, r22	; 0x04
	UART_sendByte(OPEN_DOOR);
    10d6:	84 ef       	ldi	r24, 0xF4	; 244
    10d8:	90 e0       	ldi	r25, 0x00	; 0
    10da:	0e 94 4a 14 	call	0x2894	; 0x2894 <UART_sendByte>
	uint8 pass_state = check_pass();
    10de:	0e 94 31 08 	call	0x1062	; 0x1062 <check_pass>
    10e2:	89 83       	std	Y+1, r24	; 0x01

	if (pass_state == RIGHT_PASS) {
    10e4:	89 81       	ldd	r24, Y+1	; 0x01
    10e6:	87 3f       	cpi	r24, 0xF7	; 247
    10e8:	69 f5       	brne	.+90     	; 0x1144 <open_door+0x84>
		*pass_attempts = 3;
    10ea:	ea 81       	ldd	r30, Y+2	; 0x02
    10ec:	fb 81       	ldd	r31, Y+3	; 0x03
    10ee:	83 e0       	ldi	r24, 0x03	; 3
    10f0:	80 83       	st	Z, r24
		LCD_clearScreen();
    10f2:	0e 94 3e 12 	call	0x247c	; 0x247c <LCD_clearScreen>
		LCD_displayString("Unlocking door");
    10f6:	8c ef       	ldi	r24, 0xFC	; 252
    10f8:	90 e0       	ldi	r25, 0x00	; 0
    10fa:	0e 94 97 11 	call	0x232e	; 0x232e <LCD_displayString>
		delay_millis(15000);
    10fe:	68 e9       	ldi	r22, 0x98	; 152
    1100:	7a e3       	ldi	r23, 0x3A	; 58
    1102:	80 e0       	ldi	r24, 0x00	; 0
    1104:	90 e0       	ldi	r25, 0x00	; 0
    1106:	0e 94 23 13 	call	0x2646	; 0x2646 <delay_millis>
		LCD_clearScreen();
    110a:	0e 94 3e 12 	call	0x247c	; 0x247c <LCD_clearScreen>
		LCD_displayString("Door is opened");
    110e:	8b e0       	ldi	r24, 0x0B	; 11
    1110:	91 e0       	ldi	r25, 0x01	; 1
    1112:	0e 94 97 11 	call	0x232e	; 0x232e <LCD_displayString>
		delay_millis(3000);
    1116:	68 eb       	ldi	r22, 0xB8	; 184
    1118:	7b e0       	ldi	r23, 0x0B	; 11
    111a:	80 e0       	ldi	r24, 0x00	; 0
    111c:	90 e0       	ldi	r25, 0x00	; 0
    111e:	0e 94 23 13 	call	0x2646	; 0x2646 <delay_millis>
		LCD_clearScreen();
    1122:	0e 94 3e 12 	call	0x247c	; 0x247c <LCD_clearScreen>
		LCD_displayString("Locking door");
    1126:	8a e1       	ldi	r24, 0x1A	; 26
    1128:	91 e0       	ldi	r25, 0x01	; 1
    112a:	0e 94 97 11 	call	0x232e	; 0x232e <LCD_displayString>
		delay_millis(15000);
    112e:	68 e9       	ldi	r22, 0x98	; 152
    1130:	7a e3       	ldi	r23, 0x3A	; 58
    1132:	80 e0       	ldi	r24, 0x00	; 0
    1134:	90 e0       	ldi	r25, 0x00	; 0
    1136:	0e 94 23 13 	call	0x2646	; 0x2646 <delay_millis>
		*option = 2;
    113a:	ec 81       	ldd	r30, Y+4	; 0x04
    113c:	fd 81       	ldd	r31, Y+5	; 0x05
    113e:	82 e0       	ldi	r24, 0x02	; 2
    1140:	80 83       	st	Z, r24
    1142:	43 c0       	rjmp	.+134    	; 0x11ca <open_door+0x10a>
	} else {
		*pass_attempts = *pass_attempts - 1;
    1144:	ea 81       	ldd	r30, Y+2	; 0x02
    1146:	fb 81       	ldd	r31, Y+3	; 0x03
    1148:	80 81       	ld	r24, Z
    114a:	81 50       	subi	r24, 0x01	; 1
    114c:	ea 81       	ldd	r30, Y+2	; 0x02
    114e:	fb 81       	ldd	r31, Y+3	; 0x03
    1150:	80 83       	st	Z, r24
		if (*pass_attempts > 0) {
    1152:	ea 81       	ldd	r30, Y+2	; 0x02
    1154:	fb 81       	ldd	r31, Y+3	; 0x03
    1156:	80 81       	ld	r24, Z
    1158:	88 23       	and	r24, r24
    115a:	c1 f0       	breq	.+48     	; 0x118c <open_door+0xcc>
			LCD_clearScreen();
    115c:	0e 94 3e 12 	call	0x247c	; 0x247c <LCD_clearScreen>
			LCD_displayString("Wrong password!");
    1160:	87 e2       	ldi	r24, 0x27	; 39
    1162:	91 e0       	ldi	r25, 0x01	; 1
    1164:	0e 94 97 11 	call	0x232e	; 0x232e <LCD_displayString>
			LCD_displayStringRowColumn(1, 0, "Please try again");
    1168:	21 e8       	ldi	r18, 0x81	; 129
    116a:	30 e0       	ldi	r19, 0x00	; 0
    116c:	81 e0       	ldi	r24, 0x01	; 1
    116e:	60 e0       	ldi	r22, 0x00	; 0
    1170:	a9 01       	movw	r20, r18
    1172:	0e 94 02 12 	call	0x2404	; 0x2404 <LCD_displayStringRowColumn>
			delay_millis(3000);
    1176:	68 eb       	ldi	r22, 0xB8	; 184
    1178:	7b e0       	ldi	r23, 0x0B	; 11
    117a:	80 e0       	ldi	r24, 0x00	; 0
    117c:	90 e0       	ldi	r25, 0x00	; 0
    117e:	0e 94 23 13 	call	0x2646	; 0x2646 <delay_millis>
			*option = 3;
    1182:	ec 81       	ldd	r30, Y+4	; 0x04
    1184:	fd 81       	ldd	r31, Y+5	; 0x05
    1186:	83 e0       	ldi	r24, 0x03	; 3
    1188:	80 83       	st	Z, r24
    118a:	1f c0       	rjmp	.+62     	; 0x11ca <open_door+0x10a>
		} else {
			UART_sendByte(BUZZER_ON);
    118c:	86 ef       	ldi	r24, 0xF6	; 246
    118e:	90 e0       	ldi	r25, 0x00	; 0
    1190:	0e 94 4a 14 	call	0x2894	; 0x2894 <UART_sendByte>
			LCD_clearScreen();
    1194:	0e 94 3e 12 	call	0x247c	; 0x247c <LCD_clearScreen>
			LCD_displayString("There must be ");
    1198:	87 e3       	ldi	r24, 0x37	; 55
    119a:	91 e0       	ldi	r25, 0x01	; 1
    119c:	0e 94 97 11 	call	0x232e	; 0x232e <LCD_displayString>
			LCD_displayStringRowColumn(1, 0, "a threat !");
    11a0:	26 e4       	ldi	r18, 0x46	; 70
    11a2:	31 e0       	ldi	r19, 0x01	; 1
    11a4:	81 e0       	ldi	r24, 0x01	; 1
    11a6:	60 e0       	ldi	r22, 0x00	; 0
    11a8:	a9 01       	movw	r20, r18
    11aa:	0e 94 02 12 	call	0x2404	; 0x2404 <LCD_displayStringRowColumn>
			delay_millis(60000);
    11ae:	60 e6       	ldi	r22, 0x60	; 96
    11b0:	7a ee       	ldi	r23, 0xEA	; 234
    11b2:	80 e0       	ldi	r24, 0x00	; 0
    11b4:	90 e0       	ldi	r25, 0x00	; 0
    11b6:	0e 94 23 13 	call	0x2646	; 0x2646 <delay_millis>
			*pass_attempts = 3;
    11ba:	ea 81       	ldd	r30, Y+2	; 0x02
    11bc:	fb 81       	ldd	r31, Y+3	; 0x03
    11be:	83 e0       	ldi	r24, 0x03	; 3
    11c0:	80 83       	st	Z, r24
			*option = 2;
    11c2:	ec 81       	ldd	r30, Y+4	; 0x04
    11c4:	fd 81       	ldd	r31, Y+5	; 0x05
    11c6:	82 e0       	ldi	r24, 0x02	; 2
    11c8:	80 83       	st	Z, r24
		}
	}

}
    11ca:	0f 90       	pop	r0
    11cc:	0f 90       	pop	r0
    11ce:	0f 90       	pop	r0
    11d0:	0f 90       	pop	r0
    11d2:	0f 90       	pop	r0
    11d4:	cf 91       	pop	r28
    11d6:	df 91       	pop	r29
    11d8:	08 95       	ret

000011da <change_pass>:

void change_pass(uint8 *pass_attempts, uint8 *option) {
    11da:	df 93       	push	r29
    11dc:	cf 93       	push	r28
    11de:	00 d0       	rcall	.+0      	; 0x11e0 <change_pass+0x6>
    11e0:	00 d0       	rcall	.+0      	; 0x11e2 <change_pass+0x8>
    11e2:	0f 92       	push	r0
    11e4:	cd b7       	in	r28, 0x3d	; 61
    11e6:	de b7       	in	r29, 0x3e	; 62
    11e8:	9b 83       	std	Y+3, r25	; 0x03
    11ea:	8a 83       	std	Y+2, r24	; 0x02
    11ec:	7d 83       	std	Y+5, r23	; 0x05
    11ee:	6c 83       	std	Y+4, r22	; 0x04
	UART_sendByte(CHANGE_PASS);
    11f0:	89 ef       	ldi	r24, 0xF9	; 249
    11f2:	90 e0       	ldi	r25, 0x00	; 0
    11f4:	0e 94 4a 14 	call	0x2894	; 0x2894 <UART_sendByte>
	uint8 pass_state = check_pass();
    11f8:	0e 94 31 08 	call	0x1062	; 0x1062 <check_pass>
    11fc:	89 83       	std	Y+1, r24	; 0x01
	if (pass_state == RIGHT_PASS) {
    11fe:	89 81       	ldd	r24, Y+1	; 0x01
    1200:	87 3f       	cpi	r24, 0xF7	; 247
    1202:	49 f4       	brne	.+18     	; 0x1216 <change_pass+0x3c>
		*pass_attempts = 3;
    1204:	ea 81       	ldd	r30, Y+2	; 0x02
    1206:	fb 81       	ldd	r31, Y+3	; 0x03
    1208:	83 e0       	ldi	r24, 0x03	; 3
    120a:	80 83       	st	Z, r24
		*option = 1;
    120c:	ec 81       	ldd	r30, Y+4	; 0x04
    120e:	fd 81       	ldd	r31, Y+5	; 0x05
    1210:	81 e0       	ldi	r24, 0x01	; 1
    1212:	80 83       	st	Z, r24
    1214:	43 c0       	rjmp	.+134    	; 0x129c <change_pass+0xc2>
	} else {
		*pass_attempts -= 1;
    1216:	ea 81       	ldd	r30, Y+2	; 0x02
    1218:	fb 81       	ldd	r31, Y+3	; 0x03
    121a:	80 81       	ld	r24, Z
    121c:	81 50       	subi	r24, 0x01	; 1
    121e:	ea 81       	ldd	r30, Y+2	; 0x02
    1220:	fb 81       	ldd	r31, Y+3	; 0x03
    1222:	80 83       	st	Z, r24
		if (*pass_attempts > 0) {
    1224:	ea 81       	ldd	r30, Y+2	; 0x02
    1226:	fb 81       	ldd	r31, Y+3	; 0x03
    1228:	80 81       	ld	r24, Z
    122a:	88 23       	and	r24, r24
    122c:	c1 f0       	breq	.+48     	; 0x125e <change_pass+0x84>
			LCD_clearScreen();
    122e:	0e 94 3e 12 	call	0x247c	; 0x247c <LCD_clearScreen>
			LCD_displayString("Wrong password!");
    1232:	87 e2       	ldi	r24, 0x27	; 39
    1234:	91 e0       	ldi	r25, 0x01	; 1
    1236:	0e 94 97 11 	call	0x232e	; 0x232e <LCD_displayString>
			LCD_displayStringRowColumn(1, 0, "Please try again");
    123a:	21 e8       	ldi	r18, 0x81	; 129
    123c:	30 e0       	ldi	r19, 0x00	; 0
    123e:	81 e0       	ldi	r24, 0x01	; 1
    1240:	60 e0       	ldi	r22, 0x00	; 0
    1242:	a9 01       	movw	r20, r18
    1244:	0e 94 02 12 	call	0x2404	; 0x2404 <LCD_displayStringRowColumn>
			delay_millis(3000);
    1248:	68 eb       	ldi	r22, 0xB8	; 184
    124a:	7b e0       	ldi	r23, 0x0B	; 11
    124c:	80 e0       	ldi	r24, 0x00	; 0
    124e:	90 e0       	ldi	r25, 0x00	; 0
    1250:	0e 94 23 13 	call	0x2646	; 0x2646 <delay_millis>
			*option = 4;
    1254:	ec 81       	ldd	r30, Y+4	; 0x04
    1256:	fd 81       	ldd	r31, Y+5	; 0x05
    1258:	84 e0       	ldi	r24, 0x04	; 4
    125a:	80 83       	st	Z, r24
    125c:	1f c0       	rjmp	.+62     	; 0x129c <change_pass+0xc2>
		} else {
			UART_sendByte(BUZZER_ON);
    125e:	86 ef       	ldi	r24, 0xF6	; 246
    1260:	90 e0       	ldi	r25, 0x00	; 0
    1262:	0e 94 4a 14 	call	0x2894	; 0x2894 <UART_sendByte>
			LCD_clearScreen();
    1266:	0e 94 3e 12 	call	0x247c	; 0x247c <LCD_clearScreen>
			LCD_displayString("There must be ");
    126a:	87 e3       	ldi	r24, 0x37	; 55
    126c:	91 e0       	ldi	r25, 0x01	; 1
    126e:	0e 94 97 11 	call	0x232e	; 0x232e <LCD_displayString>
			LCD_displayStringRowColumn(1, 0, "a threat !");
    1272:	26 e4       	ldi	r18, 0x46	; 70
    1274:	31 e0       	ldi	r19, 0x01	; 1
    1276:	81 e0       	ldi	r24, 0x01	; 1
    1278:	60 e0       	ldi	r22, 0x00	; 0
    127a:	a9 01       	movw	r20, r18
    127c:	0e 94 02 12 	call	0x2404	; 0x2404 <LCD_displayStringRowColumn>
			delay_millis(60000);
    1280:	60 e6       	ldi	r22, 0x60	; 96
    1282:	7a ee       	ldi	r23, 0xEA	; 234
    1284:	80 e0       	ldi	r24, 0x00	; 0
    1286:	90 e0       	ldi	r25, 0x00	; 0
    1288:	0e 94 23 13 	call	0x2646	; 0x2646 <delay_millis>
			*pass_attempts = 3;
    128c:	ea 81       	ldd	r30, Y+2	; 0x02
    128e:	fb 81       	ldd	r31, Y+3	; 0x03
    1290:	83 e0       	ldi	r24, 0x03	; 3
    1292:	80 83       	st	Z, r24
			*option = 2;
    1294:	ec 81       	ldd	r30, Y+4	; 0x04
    1296:	fd 81       	ldd	r31, Y+5	; 0x05
    1298:	82 e0       	ldi	r24, 0x02	; 2
    129a:	80 83       	st	Z, r24
		}
	}
}
    129c:	0f 90       	pop	r0
    129e:	0f 90       	pop	r0
    12a0:	0f 90       	pop	r0
    12a2:	0f 90       	pop	r0
    12a4:	0f 90       	pop	r0
    12a6:	cf 91       	pop	r28
    12a8:	df 91       	pop	r29
    12aa:	08 95       	ret

000012ac <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    12ac:	df 93       	push	r29
    12ae:	cf 93       	push	r28
    12b0:	00 d0       	rcall	.+0      	; 0x12b2 <GPIO_setupPinDirection+0x6>
    12b2:	00 d0       	rcall	.+0      	; 0x12b4 <GPIO_setupPinDirection+0x8>
    12b4:	0f 92       	push	r0
    12b6:	cd b7       	in	r28, 0x3d	; 61
    12b8:	de b7       	in	r29, 0x3e	; 62
    12ba:	89 83       	std	Y+1, r24	; 0x01
    12bc:	6a 83       	std	Y+2, r22	; 0x02
    12be:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    12c0:	8a 81       	ldd	r24, Y+2	; 0x02
    12c2:	88 30       	cpi	r24, 0x08	; 8
    12c4:	08 f0       	brcs	.+2      	; 0x12c8 <GPIO_setupPinDirection+0x1c>
    12c6:	d5 c0       	rjmp	.+426    	; 0x1472 <GPIO_setupPinDirection+0x1c6>
    12c8:	89 81       	ldd	r24, Y+1	; 0x01
    12ca:	84 30       	cpi	r24, 0x04	; 4
    12cc:	08 f0       	brcs	.+2      	; 0x12d0 <GPIO_setupPinDirection+0x24>
    12ce:	d1 c0       	rjmp	.+418    	; 0x1472 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    12d0:	89 81       	ldd	r24, Y+1	; 0x01
    12d2:	28 2f       	mov	r18, r24
    12d4:	30 e0       	ldi	r19, 0x00	; 0
    12d6:	3d 83       	std	Y+5, r19	; 0x05
    12d8:	2c 83       	std	Y+4, r18	; 0x04
    12da:	8c 81       	ldd	r24, Y+4	; 0x04
    12dc:	9d 81       	ldd	r25, Y+5	; 0x05
    12de:	81 30       	cpi	r24, 0x01	; 1
    12e0:	91 05       	cpc	r25, r1
    12e2:	09 f4       	brne	.+2      	; 0x12e6 <GPIO_setupPinDirection+0x3a>
    12e4:	43 c0       	rjmp	.+134    	; 0x136c <GPIO_setupPinDirection+0xc0>
    12e6:	2c 81       	ldd	r18, Y+4	; 0x04
    12e8:	3d 81       	ldd	r19, Y+5	; 0x05
    12ea:	22 30       	cpi	r18, 0x02	; 2
    12ec:	31 05       	cpc	r19, r1
    12ee:	2c f4       	brge	.+10     	; 0x12fa <GPIO_setupPinDirection+0x4e>
    12f0:	8c 81       	ldd	r24, Y+4	; 0x04
    12f2:	9d 81       	ldd	r25, Y+5	; 0x05
    12f4:	00 97       	sbiw	r24, 0x00	; 0
    12f6:	71 f0       	breq	.+28     	; 0x1314 <GPIO_setupPinDirection+0x68>
    12f8:	bc c0       	rjmp	.+376    	; 0x1472 <GPIO_setupPinDirection+0x1c6>
    12fa:	2c 81       	ldd	r18, Y+4	; 0x04
    12fc:	3d 81       	ldd	r19, Y+5	; 0x05
    12fe:	22 30       	cpi	r18, 0x02	; 2
    1300:	31 05       	cpc	r19, r1
    1302:	09 f4       	brne	.+2      	; 0x1306 <GPIO_setupPinDirection+0x5a>
    1304:	5f c0       	rjmp	.+190    	; 0x13c4 <GPIO_setupPinDirection+0x118>
    1306:	8c 81       	ldd	r24, Y+4	; 0x04
    1308:	9d 81       	ldd	r25, Y+5	; 0x05
    130a:	83 30       	cpi	r24, 0x03	; 3
    130c:	91 05       	cpc	r25, r1
    130e:	09 f4       	brne	.+2      	; 0x1312 <GPIO_setupPinDirection+0x66>
    1310:	85 c0       	rjmp	.+266    	; 0x141c <GPIO_setupPinDirection+0x170>
    1312:	af c0       	rjmp	.+350    	; 0x1472 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    1314:	8b 81       	ldd	r24, Y+3	; 0x03
    1316:	81 30       	cpi	r24, 0x01	; 1
    1318:	a1 f4       	brne	.+40     	; 0x1342 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    131a:	aa e3       	ldi	r26, 0x3A	; 58
    131c:	b0 e0       	ldi	r27, 0x00	; 0
    131e:	ea e3       	ldi	r30, 0x3A	; 58
    1320:	f0 e0       	ldi	r31, 0x00	; 0
    1322:	80 81       	ld	r24, Z
    1324:	48 2f       	mov	r20, r24
    1326:	8a 81       	ldd	r24, Y+2	; 0x02
    1328:	28 2f       	mov	r18, r24
    132a:	30 e0       	ldi	r19, 0x00	; 0
    132c:	81 e0       	ldi	r24, 0x01	; 1
    132e:	90 e0       	ldi	r25, 0x00	; 0
    1330:	02 2e       	mov	r0, r18
    1332:	02 c0       	rjmp	.+4      	; 0x1338 <GPIO_setupPinDirection+0x8c>
    1334:	88 0f       	add	r24, r24
    1336:	99 1f       	adc	r25, r25
    1338:	0a 94       	dec	r0
    133a:	e2 f7       	brpl	.-8      	; 0x1334 <GPIO_setupPinDirection+0x88>
    133c:	84 2b       	or	r24, r20
    133e:	8c 93       	st	X, r24
    1340:	98 c0       	rjmp	.+304    	; 0x1472 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    1342:	aa e3       	ldi	r26, 0x3A	; 58
    1344:	b0 e0       	ldi	r27, 0x00	; 0
    1346:	ea e3       	ldi	r30, 0x3A	; 58
    1348:	f0 e0       	ldi	r31, 0x00	; 0
    134a:	80 81       	ld	r24, Z
    134c:	48 2f       	mov	r20, r24
    134e:	8a 81       	ldd	r24, Y+2	; 0x02
    1350:	28 2f       	mov	r18, r24
    1352:	30 e0       	ldi	r19, 0x00	; 0
    1354:	81 e0       	ldi	r24, 0x01	; 1
    1356:	90 e0       	ldi	r25, 0x00	; 0
    1358:	02 2e       	mov	r0, r18
    135a:	02 c0       	rjmp	.+4      	; 0x1360 <GPIO_setupPinDirection+0xb4>
    135c:	88 0f       	add	r24, r24
    135e:	99 1f       	adc	r25, r25
    1360:	0a 94       	dec	r0
    1362:	e2 f7       	brpl	.-8      	; 0x135c <GPIO_setupPinDirection+0xb0>
    1364:	80 95       	com	r24
    1366:	84 23       	and	r24, r20
    1368:	8c 93       	st	X, r24
    136a:	83 c0       	rjmp	.+262    	; 0x1472 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    136c:	8b 81       	ldd	r24, Y+3	; 0x03
    136e:	81 30       	cpi	r24, 0x01	; 1
    1370:	a1 f4       	brne	.+40     	; 0x139a <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    1372:	a7 e3       	ldi	r26, 0x37	; 55
    1374:	b0 e0       	ldi	r27, 0x00	; 0
    1376:	e7 e3       	ldi	r30, 0x37	; 55
    1378:	f0 e0       	ldi	r31, 0x00	; 0
    137a:	80 81       	ld	r24, Z
    137c:	48 2f       	mov	r20, r24
    137e:	8a 81       	ldd	r24, Y+2	; 0x02
    1380:	28 2f       	mov	r18, r24
    1382:	30 e0       	ldi	r19, 0x00	; 0
    1384:	81 e0       	ldi	r24, 0x01	; 1
    1386:	90 e0       	ldi	r25, 0x00	; 0
    1388:	02 2e       	mov	r0, r18
    138a:	02 c0       	rjmp	.+4      	; 0x1390 <GPIO_setupPinDirection+0xe4>
    138c:	88 0f       	add	r24, r24
    138e:	99 1f       	adc	r25, r25
    1390:	0a 94       	dec	r0
    1392:	e2 f7       	brpl	.-8      	; 0x138c <GPIO_setupPinDirection+0xe0>
    1394:	84 2b       	or	r24, r20
    1396:	8c 93       	st	X, r24
    1398:	6c c0       	rjmp	.+216    	; 0x1472 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    139a:	a7 e3       	ldi	r26, 0x37	; 55
    139c:	b0 e0       	ldi	r27, 0x00	; 0
    139e:	e7 e3       	ldi	r30, 0x37	; 55
    13a0:	f0 e0       	ldi	r31, 0x00	; 0
    13a2:	80 81       	ld	r24, Z
    13a4:	48 2f       	mov	r20, r24
    13a6:	8a 81       	ldd	r24, Y+2	; 0x02
    13a8:	28 2f       	mov	r18, r24
    13aa:	30 e0       	ldi	r19, 0x00	; 0
    13ac:	81 e0       	ldi	r24, 0x01	; 1
    13ae:	90 e0       	ldi	r25, 0x00	; 0
    13b0:	02 2e       	mov	r0, r18
    13b2:	02 c0       	rjmp	.+4      	; 0x13b8 <GPIO_setupPinDirection+0x10c>
    13b4:	88 0f       	add	r24, r24
    13b6:	99 1f       	adc	r25, r25
    13b8:	0a 94       	dec	r0
    13ba:	e2 f7       	brpl	.-8      	; 0x13b4 <GPIO_setupPinDirection+0x108>
    13bc:	80 95       	com	r24
    13be:	84 23       	and	r24, r20
    13c0:	8c 93       	st	X, r24
    13c2:	57 c0       	rjmp	.+174    	; 0x1472 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    13c4:	8b 81       	ldd	r24, Y+3	; 0x03
    13c6:	81 30       	cpi	r24, 0x01	; 1
    13c8:	a1 f4       	brne	.+40     	; 0x13f2 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    13ca:	a4 e3       	ldi	r26, 0x34	; 52
    13cc:	b0 e0       	ldi	r27, 0x00	; 0
    13ce:	e4 e3       	ldi	r30, 0x34	; 52
    13d0:	f0 e0       	ldi	r31, 0x00	; 0
    13d2:	80 81       	ld	r24, Z
    13d4:	48 2f       	mov	r20, r24
    13d6:	8a 81       	ldd	r24, Y+2	; 0x02
    13d8:	28 2f       	mov	r18, r24
    13da:	30 e0       	ldi	r19, 0x00	; 0
    13dc:	81 e0       	ldi	r24, 0x01	; 1
    13de:	90 e0       	ldi	r25, 0x00	; 0
    13e0:	02 2e       	mov	r0, r18
    13e2:	02 c0       	rjmp	.+4      	; 0x13e8 <GPIO_setupPinDirection+0x13c>
    13e4:	88 0f       	add	r24, r24
    13e6:	99 1f       	adc	r25, r25
    13e8:	0a 94       	dec	r0
    13ea:	e2 f7       	brpl	.-8      	; 0x13e4 <GPIO_setupPinDirection+0x138>
    13ec:	84 2b       	or	r24, r20
    13ee:	8c 93       	st	X, r24
    13f0:	40 c0       	rjmp	.+128    	; 0x1472 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    13f2:	a4 e3       	ldi	r26, 0x34	; 52
    13f4:	b0 e0       	ldi	r27, 0x00	; 0
    13f6:	e4 e3       	ldi	r30, 0x34	; 52
    13f8:	f0 e0       	ldi	r31, 0x00	; 0
    13fa:	80 81       	ld	r24, Z
    13fc:	48 2f       	mov	r20, r24
    13fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1400:	28 2f       	mov	r18, r24
    1402:	30 e0       	ldi	r19, 0x00	; 0
    1404:	81 e0       	ldi	r24, 0x01	; 1
    1406:	90 e0       	ldi	r25, 0x00	; 0
    1408:	02 2e       	mov	r0, r18
    140a:	02 c0       	rjmp	.+4      	; 0x1410 <GPIO_setupPinDirection+0x164>
    140c:	88 0f       	add	r24, r24
    140e:	99 1f       	adc	r25, r25
    1410:	0a 94       	dec	r0
    1412:	e2 f7       	brpl	.-8      	; 0x140c <GPIO_setupPinDirection+0x160>
    1414:	80 95       	com	r24
    1416:	84 23       	and	r24, r20
    1418:	8c 93       	st	X, r24
    141a:	2b c0       	rjmp	.+86     	; 0x1472 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    141c:	8b 81       	ldd	r24, Y+3	; 0x03
    141e:	81 30       	cpi	r24, 0x01	; 1
    1420:	a1 f4       	brne	.+40     	; 0x144a <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    1422:	a1 e3       	ldi	r26, 0x31	; 49
    1424:	b0 e0       	ldi	r27, 0x00	; 0
    1426:	e1 e3       	ldi	r30, 0x31	; 49
    1428:	f0 e0       	ldi	r31, 0x00	; 0
    142a:	80 81       	ld	r24, Z
    142c:	48 2f       	mov	r20, r24
    142e:	8a 81       	ldd	r24, Y+2	; 0x02
    1430:	28 2f       	mov	r18, r24
    1432:	30 e0       	ldi	r19, 0x00	; 0
    1434:	81 e0       	ldi	r24, 0x01	; 1
    1436:	90 e0       	ldi	r25, 0x00	; 0
    1438:	02 2e       	mov	r0, r18
    143a:	02 c0       	rjmp	.+4      	; 0x1440 <GPIO_setupPinDirection+0x194>
    143c:	88 0f       	add	r24, r24
    143e:	99 1f       	adc	r25, r25
    1440:	0a 94       	dec	r0
    1442:	e2 f7       	brpl	.-8      	; 0x143c <GPIO_setupPinDirection+0x190>
    1444:	84 2b       	or	r24, r20
    1446:	8c 93       	st	X, r24
    1448:	14 c0       	rjmp	.+40     	; 0x1472 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    144a:	a1 e3       	ldi	r26, 0x31	; 49
    144c:	b0 e0       	ldi	r27, 0x00	; 0
    144e:	e1 e3       	ldi	r30, 0x31	; 49
    1450:	f0 e0       	ldi	r31, 0x00	; 0
    1452:	80 81       	ld	r24, Z
    1454:	48 2f       	mov	r20, r24
    1456:	8a 81       	ldd	r24, Y+2	; 0x02
    1458:	28 2f       	mov	r18, r24
    145a:	30 e0       	ldi	r19, 0x00	; 0
    145c:	81 e0       	ldi	r24, 0x01	; 1
    145e:	90 e0       	ldi	r25, 0x00	; 0
    1460:	02 2e       	mov	r0, r18
    1462:	02 c0       	rjmp	.+4      	; 0x1468 <GPIO_setupPinDirection+0x1bc>
    1464:	88 0f       	add	r24, r24
    1466:	99 1f       	adc	r25, r25
    1468:	0a 94       	dec	r0
    146a:	e2 f7       	brpl	.-8      	; 0x1464 <GPIO_setupPinDirection+0x1b8>
    146c:	80 95       	com	r24
    146e:	84 23       	and	r24, r20
    1470:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1472:	0f 90       	pop	r0
    1474:	0f 90       	pop	r0
    1476:	0f 90       	pop	r0
    1478:	0f 90       	pop	r0
    147a:	0f 90       	pop	r0
    147c:	cf 91       	pop	r28
    147e:	df 91       	pop	r29
    1480:	08 95       	ret

00001482 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    1482:	df 93       	push	r29
    1484:	cf 93       	push	r28
    1486:	00 d0       	rcall	.+0      	; 0x1488 <GPIO_writePin+0x6>
    1488:	00 d0       	rcall	.+0      	; 0x148a <GPIO_writePin+0x8>
    148a:	0f 92       	push	r0
    148c:	cd b7       	in	r28, 0x3d	; 61
    148e:	de b7       	in	r29, 0x3e	; 62
    1490:	89 83       	std	Y+1, r24	; 0x01
    1492:	6a 83       	std	Y+2, r22	; 0x02
    1494:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1496:	8a 81       	ldd	r24, Y+2	; 0x02
    1498:	88 30       	cpi	r24, 0x08	; 8
    149a:	08 f0       	brcs	.+2      	; 0x149e <GPIO_writePin+0x1c>
    149c:	d5 c0       	rjmp	.+426    	; 0x1648 <GPIO_writePin+0x1c6>
    149e:	89 81       	ldd	r24, Y+1	; 0x01
    14a0:	84 30       	cpi	r24, 0x04	; 4
    14a2:	08 f0       	brcs	.+2      	; 0x14a6 <GPIO_writePin+0x24>
    14a4:	d1 c0       	rjmp	.+418    	; 0x1648 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    14a6:	89 81       	ldd	r24, Y+1	; 0x01
    14a8:	28 2f       	mov	r18, r24
    14aa:	30 e0       	ldi	r19, 0x00	; 0
    14ac:	3d 83       	std	Y+5, r19	; 0x05
    14ae:	2c 83       	std	Y+4, r18	; 0x04
    14b0:	8c 81       	ldd	r24, Y+4	; 0x04
    14b2:	9d 81       	ldd	r25, Y+5	; 0x05
    14b4:	81 30       	cpi	r24, 0x01	; 1
    14b6:	91 05       	cpc	r25, r1
    14b8:	09 f4       	brne	.+2      	; 0x14bc <GPIO_writePin+0x3a>
    14ba:	43 c0       	rjmp	.+134    	; 0x1542 <GPIO_writePin+0xc0>
    14bc:	2c 81       	ldd	r18, Y+4	; 0x04
    14be:	3d 81       	ldd	r19, Y+5	; 0x05
    14c0:	22 30       	cpi	r18, 0x02	; 2
    14c2:	31 05       	cpc	r19, r1
    14c4:	2c f4       	brge	.+10     	; 0x14d0 <GPIO_writePin+0x4e>
    14c6:	8c 81       	ldd	r24, Y+4	; 0x04
    14c8:	9d 81       	ldd	r25, Y+5	; 0x05
    14ca:	00 97       	sbiw	r24, 0x00	; 0
    14cc:	71 f0       	breq	.+28     	; 0x14ea <GPIO_writePin+0x68>
    14ce:	bc c0       	rjmp	.+376    	; 0x1648 <GPIO_writePin+0x1c6>
    14d0:	2c 81       	ldd	r18, Y+4	; 0x04
    14d2:	3d 81       	ldd	r19, Y+5	; 0x05
    14d4:	22 30       	cpi	r18, 0x02	; 2
    14d6:	31 05       	cpc	r19, r1
    14d8:	09 f4       	brne	.+2      	; 0x14dc <GPIO_writePin+0x5a>
    14da:	5f c0       	rjmp	.+190    	; 0x159a <GPIO_writePin+0x118>
    14dc:	8c 81       	ldd	r24, Y+4	; 0x04
    14de:	9d 81       	ldd	r25, Y+5	; 0x05
    14e0:	83 30       	cpi	r24, 0x03	; 3
    14e2:	91 05       	cpc	r25, r1
    14e4:	09 f4       	brne	.+2      	; 0x14e8 <GPIO_writePin+0x66>
    14e6:	85 c0       	rjmp	.+266    	; 0x15f2 <GPIO_writePin+0x170>
    14e8:	af c0       	rjmp	.+350    	; 0x1648 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    14ea:	8b 81       	ldd	r24, Y+3	; 0x03
    14ec:	81 30       	cpi	r24, 0x01	; 1
    14ee:	a1 f4       	brne	.+40     	; 0x1518 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    14f0:	ab e3       	ldi	r26, 0x3B	; 59
    14f2:	b0 e0       	ldi	r27, 0x00	; 0
    14f4:	eb e3       	ldi	r30, 0x3B	; 59
    14f6:	f0 e0       	ldi	r31, 0x00	; 0
    14f8:	80 81       	ld	r24, Z
    14fa:	48 2f       	mov	r20, r24
    14fc:	8a 81       	ldd	r24, Y+2	; 0x02
    14fe:	28 2f       	mov	r18, r24
    1500:	30 e0       	ldi	r19, 0x00	; 0
    1502:	81 e0       	ldi	r24, 0x01	; 1
    1504:	90 e0       	ldi	r25, 0x00	; 0
    1506:	02 2e       	mov	r0, r18
    1508:	02 c0       	rjmp	.+4      	; 0x150e <GPIO_writePin+0x8c>
    150a:	88 0f       	add	r24, r24
    150c:	99 1f       	adc	r25, r25
    150e:	0a 94       	dec	r0
    1510:	e2 f7       	brpl	.-8      	; 0x150a <GPIO_writePin+0x88>
    1512:	84 2b       	or	r24, r20
    1514:	8c 93       	st	X, r24
    1516:	98 c0       	rjmp	.+304    	; 0x1648 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    1518:	ab e3       	ldi	r26, 0x3B	; 59
    151a:	b0 e0       	ldi	r27, 0x00	; 0
    151c:	eb e3       	ldi	r30, 0x3B	; 59
    151e:	f0 e0       	ldi	r31, 0x00	; 0
    1520:	80 81       	ld	r24, Z
    1522:	48 2f       	mov	r20, r24
    1524:	8a 81       	ldd	r24, Y+2	; 0x02
    1526:	28 2f       	mov	r18, r24
    1528:	30 e0       	ldi	r19, 0x00	; 0
    152a:	81 e0       	ldi	r24, 0x01	; 1
    152c:	90 e0       	ldi	r25, 0x00	; 0
    152e:	02 2e       	mov	r0, r18
    1530:	02 c0       	rjmp	.+4      	; 0x1536 <GPIO_writePin+0xb4>
    1532:	88 0f       	add	r24, r24
    1534:	99 1f       	adc	r25, r25
    1536:	0a 94       	dec	r0
    1538:	e2 f7       	brpl	.-8      	; 0x1532 <GPIO_writePin+0xb0>
    153a:	80 95       	com	r24
    153c:	84 23       	and	r24, r20
    153e:	8c 93       	st	X, r24
    1540:	83 c0       	rjmp	.+262    	; 0x1648 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    1542:	8b 81       	ldd	r24, Y+3	; 0x03
    1544:	81 30       	cpi	r24, 0x01	; 1
    1546:	a1 f4       	brne	.+40     	; 0x1570 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    1548:	a8 e3       	ldi	r26, 0x38	; 56
    154a:	b0 e0       	ldi	r27, 0x00	; 0
    154c:	e8 e3       	ldi	r30, 0x38	; 56
    154e:	f0 e0       	ldi	r31, 0x00	; 0
    1550:	80 81       	ld	r24, Z
    1552:	48 2f       	mov	r20, r24
    1554:	8a 81       	ldd	r24, Y+2	; 0x02
    1556:	28 2f       	mov	r18, r24
    1558:	30 e0       	ldi	r19, 0x00	; 0
    155a:	81 e0       	ldi	r24, 0x01	; 1
    155c:	90 e0       	ldi	r25, 0x00	; 0
    155e:	02 2e       	mov	r0, r18
    1560:	02 c0       	rjmp	.+4      	; 0x1566 <GPIO_writePin+0xe4>
    1562:	88 0f       	add	r24, r24
    1564:	99 1f       	adc	r25, r25
    1566:	0a 94       	dec	r0
    1568:	e2 f7       	brpl	.-8      	; 0x1562 <GPIO_writePin+0xe0>
    156a:	84 2b       	or	r24, r20
    156c:	8c 93       	st	X, r24
    156e:	6c c0       	rjmp	.+216    	; 0x1648 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    1570:	a8 e3       	ldi	r26, 0x38	; 56
    1572:	b0 e0       	ldi	r27, 0x00	; 0
    1574:	e8 e3       	ldi	r30, 0x38	; 56
    1576:	f0 e0       	ldi	r31, 0x00	; 0
    1578:	80 81       	ld	r24, Z
    157a:	48 2f       	mov	r20, r24
    157c:	8a 81       	ldd	r24, Y+2	; 0x02
    157e:	28 2f       	mov	r18, r24
    1580:	30 e0       	ldi	r19, 0x00	; 0
    1582:	81 e0       	ldi	r24, 0x01	; 1
    1584:	90 e0       	ldi	r25, 0x00	; 0
    1586:	02 2e       	mov	r0, r18
    1588:	02 c0       	rjmp	.+4      	; 0x158e <GPIO_writePin+0x10c>
    158a:	88 0f       	add	r24, r24
    158c:	99 1f       	adc	r25, r25
    158e:	0a 94       	dec	r0
    1590:	e2 f7       	brpl	.-8      	; 0x158a <GPIO_writePin+0x108>
    1592:	80 95       	com	r24
    1594:	84 23       	and	r24, r20
    1596:	8c 93       	st	X, r24
    1598:	57 c0       	rjmp	.+174    	; 0x1648 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    159a:	8b 81       	ldd	r24, Y+3	; 0x03
    159c:	81 30       	cpi	r24, 0x01	; 1
    159e:	a1 f4       	brne	.+40     	; 0x15c8 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    15a0:	a5 e3       	ldi	r26, 0x35	; 53
    15a2:	b0 e0       	ldi	r27, 0x00	; 0
    15a4:	e5 e3       	ldi	r30, 0x35	; 53
    15a6:	f0 e0       	ldi	r31, 0x00	; 0
    15a8:	80 81       	ld	r24, Z
    15aa:	48 2f       	mov	r20, r24
    15ac:	8a 81       	ldd	r24, Y+2	; 0x02
    15ae:	28 2f       	mov	r18, r24
    15b0:	30 e0       	ldi	r19, 0x00	; 0
    15b2:	81 e0       	ldi	r24, 0x01	; 1
    15b4:	90 e0       	ldi	r25, 0x00	; 0
    15b6:	02 2e       	mov	r0, r18
    15b8:	02 c0       	rjmp	.+4      	; 0x15be <GPIO_writePin+0x13c>
    15ba:	88 0f       	add	r24, r24
    15bc:	99 1f       	adc	r25, r25
    15be:	0a 94       	dec	r0
    15c0:	e2 f7       	brpl	.-8      	; 0x15ba <GPIO_writePin+0x138>
    15c2:	84 2b       	or	r24, r20
    15c4:	8c 93       	st	X, r24
    15c6:	40 c0       	rjmp	.+128    	; 0x1648 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    15c8:	a5 e3       	ldi	r26, 0x35	; 53
    15ca:	b0 e0       	ldi	r27, 0x00	; 0
    15cc:	e5 e3       	ldi	r30, 0x35	; 53
    15ce:	f0 e0       	ldi	r31, 0x00	; 0
    15d0:	80 81       	ld	r24, Z
    15d2:	48 2f       	mov	r20, r24
    15d4:	8a 81       	ldd	r24, Y+2	; 0x02
    15d6:	28 2f       	mov	r18, r24
    15d8:	30 e0       	ldi	r19, 0x00	; 0
    15da:	81 e0       	ldi	r24, 0x01	; 1
    15dc:	90 e0       	ldi	r25, 0x00	; 0
    15de:	02 2e       	mov	r0, r18
    15e0:	02 c0       	rjmp	.+4      	; 0x15e6 <GPIO_writePin+0x164>
    15e2:	88 0f       	add	r24, r24
    15e4:	99 1f       	adc	r25, r25
    15e6:	0a 94       	dec	r0
    15e8:	e2 f7       	brpl	.-8      	; 0x15e2 <GPIO_writePin+0x160>
    15ea:	80 95       	com	r24
    15ec:	84 23       	and	r24, r20
    15ee:	8c 93       	st	X, r24
    15f0:	2b c0       	rjmp	.+86     	; 0x1648 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    15f2:	8b 81       	ldd	r24, Y+3	; 0x03
    15f4:	81 30       	cpi	r24, 0x01	; 1
    15f6:	a1 f4       	brne	.+40     	; 0x1620 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    15f8:	a2 e3       	ldi	r26, 0x32	; 50
    15fa:	b0 e0       	ldi	r27, 0x00	; 0
    15fc:	e2 e3       	ldi	r30, 0x32	; 50
    15fe:	f0 e0       	ldi	r31, 0x00	; 0
    1600:	80 81       	ld	r24, Z
    1602:	48 2f       	mov	r20, r24
    1604:	8a 81       	ldd	r24, Y+2	; 0x02
    1606:	28 2f       	mov	r18, r24
    1608:	30 e0       	ldi	r19, 0x00	; 0
    160a:	81 e0       	ldi	r24, 0x01	; 1
    160c:	90 e0       	ldi	r25, 0x00	; 0
    160e:	02 2e       	mov	r0, r18
    1610:	02 c0       	rjmp	.+4      	; 0x1616 <GPIO_writePin+0x194>
    1612:	88 0f       	add	r24, r24
    1614:	99 1f       	adc	r25, r25
    1616:	0a 94       	dec	r0
    1618:	e2 f7       	brpl	.-8      	; 0x1612 <GPIO_writePin+0x190>
    161a:	84 2b       	or	r24, r20
    161c:	8c 93       	st	X, r24
    161e:	14 c0       	rjmp	.+40     	; 0x1648 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    1620:	a2 e3       	ldi	r26, 0x32	; 50
    1622:	b0 e0       	ldi	r27, 0x00	; 0
    1624:	e2 e3       	ldi	r30, 0x32	; 50
    1626:	f0 e0       	ldi	r31, 0x00	; 0
    1628:	80 81       	ld	r24, Z
    162a:	48 2f       	mov	r20, r24
    162c:	8a 81       	ldd	r24, Y+2	; 0x02
    162e:	28 2f       	mov	r18, r24
    1630:	30 e0       	ldi	r19, 0x00	; 0
    1632:	81 e0       	ldi	r24, 0x01	; 1
    1634:	90 e0       	ldi	r25, 0x00	; 0
    1636:	02 2e       	mov	r0, r18
    1638:	02 c0       	rjmp	.+4      	; 0x163e <GPIO_writePin+0x1bc>
    163a:	88 0f       	add	r24, r24
    163c:	99 1f       	adc	r25, r25
    163e:	0a 94       	dec	r0
    1640:	e2 f7       	brpl	.-8      	; 0x163a <GPIO_writePin+0x1b8>
    1642:	80 95       	com	r24
    1644:	84 23       	and	r24, r20
    1646:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1648:	0f 90       	pop	r0
    164a:	0f 90       	pop	r0
    164c:	0f 90       	pop	r0
    164e:	0f 90       	pop	r0
    1650:	0f 90       	pop	r0
    1652:	cf 91       	pop	r28
    1654:	df 91       	pop	r29
    1656:	08 95       	ret

00001658 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    1658:	df 93       	push	r29
    165a:	cf 93       	push	r28
    165c:	00 d0       	rcall	.+0      	; 0x165e <GPIO_readPin+0x6>
    165e:	00 d0       	rcall	.+0      	; 0x1660 <GPIO_readPin+0x8>
    1660:	0f 92       	push	r0
    1662:	cd b7       	in	r28, 0x3d	; 61
    1664:	de b7       	in	r29, 0x3e	; 62
    1666:	8a 83       	std	Y+2, r24	; 0x02
    1668:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    166a:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    166c:	8b 81       	ldd	r24, Y+3	; 0x03
    166e:	88 30       	cpi	r24, 0x08	; 8
    1670:	08 f0       	brcs	.+2      	; 0x1674 <GPIO_readPin+0x1c>
    1672:	84 c0       	rjmp	.+264    	; 0x177c <GPIO_readPin+0x124>
    1674:	8a 81       	ldd	r24, Y+2	; 0x02
    1676:	84 30       	cpi	r24, 0x04	; 4
    1678:	08 f0       	brcs	.+2      	; 0x167c <GPIO_readPin+0x24>
    167a:	80 c0       	rjmp	.+256    	; 0x177c <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    167c:	8a 81       	ldd	r24, Y+2	; 0x02
    167e:	28 2f       	mov	r18, r24
    1680:	30 e0       	ldi	r19, 0x00	; 0
    1682:	3d 83       	std	Y+5, r19	; 0x05
    1684:	2c 83       	std	Y+4, r18	; 0x04
    1686:	4c 81       	ldd	r20, Y+4	; 0x04
    1688:	5d 81       	ldd	r21, Y+5	; 0x05
    168a:	41 30       	cpi	r20, 0x01	; 1
    168c:	51 05       	cpc	r21, r1
    168e:	79 f1       	breq	.+94     	; 0x16ee <GPIO_readPin+0x96>
    1690:	8c 81       	ldd	r24, Y+4	; 0x04
    1692:	9d 81       	ldd	r25, Y+5	; 0x05
    1694:	82 30       	cpi	r24, 0x02	; 2
    1696:	91 05       	cpc	r25, r1
    1698:	34 f4       	brge	.+12     	; 0x16a6 <GPIO_readPin+0x4e>
    169a:	2c 81       	ldd	r18, Y+4	; 0x04
    169c:	3d 81       	ldd	r19, Y+5	; 0x05
    169e:	21 15       	cp	r18, r1
    16a0:	31 05       	cpc	r19, r1
    16a2:	69 f0       	breq	.+26     	; 0x16be <GPIO_readPin+0x66>
    16a4:	6b c0       	rjmp	.+214    	; 0x177c <GPIO_readPin+0x124>
    16a6:	4c 81       	ldd	r20, Y+4	; 0x04
    16a8:	5d 81       	ldd	r21, Y+5	; 0x05
    16aa:	42 30       	cpi	r20, 0x02	; 2
    16ac:	51 05       	cpc	r21, r1
    16ae:	b9 f1       	breq	.+110    	; 0x171e <GPIO_readPin+0xc6>
    16b0:	8c 81       	ldd	r24, Y+4	; 0x04
    16b2:	9d 81       	ldd	r25, Y+5	; 0x05
    16b4:	83 30       	cpi	r24, 0x03	; 3
    16b6:	91 05       	cpc	r25, r1
    16b8:	09 f4       	brne	.+2      	; 0x16bc <GPIO_readPin+0x64>
    16ba:	49 c0       	rjmp	.+146    	; 0x174e <GPIO_readPin+0xf6>
    16bc:	5f c0       	rjmp	.+190    	; 0x177c <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    16be:	e9 e3       	ldi	r30, 0x39	; 57
    16c0:	f0 e0       	ldi	r31, 0x00	; 0
    16c2:	80 81       	ld	r24, Z
    16c4:	28 2f       	mov	r18, r24
    16c6:	30 e0       	ldi	r19, 0x00	; 0
    16c8:	8b 81       	ldd	r24, Y+3	; 0x03
    16ca:	88 2f       	mov	r24, r24
    16cc:	90 e0       	ldi	r25, 0x00	; 0
    16ce:	a9 01       	movw	r20, r18
    16d0:	02 c0       	rjmp	.+4      	; 0x16d6 <GPIO_readPin+0x7e>
    16d2:	55 95       	asr	r21
    16d4:	47 95       	ror	r20
    16d6:	8a 95       	dec	r24
    16d8:	e2 f7       	brpl	.-8      	; 0x16d2 <GPIO_readPin+0x7a>
    16da:	ca 01       	movw	r24, r20
    16dc:	81 70       	andi	r24, 0x01	; 1
    16de:	90 70       	andi	r25, 0x00	; 0
    16e0:	88 23       	and	r24, r24
    16e2:	19 f0       	breq	.+6      	; 0x16ea <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    16e4:	81 e0       	ldi	r24, 0x01	; 1
    16e6:	89 83       	std	Y+1, r24	; 0x01
    16e8:	49 c0       	rjmp	.+146    	; 0x177c <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    16ea:	19 82       	std	Y+1, r1	; 0x01
    16ec:	47 c0       	rjmp	.+142    	; 0x177c <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    16ee:	e6 e3       	ldi	r30, 0x36	; 54
    16f0:	f0 e0       	ldi	r31, 0x00	; 0
    16f2:	80 81       	ld	r24, Z
    16f4:	28 2f       	mov	r18, r24
    16f6:	30 e0       	ldi	r19, 0x00	; 0
    16f8:	8b 81       	ldd	r24, Y+3	; 0x03
    16fa:	88 2f       	mov	r24, r24
    16fc:	90 e0       	ldi	r25, 0x00	; 0
    16fe:	a9 01       	movw	r20, r18
    1700:	02 c0       	rjmp	.+4      	; 0x1706 <GPIO_readPin+0xae>
    1702:	55 95       	asr	r21
    1704:	47 95       	ror	r20
    1706:	8a 95       	dec	r24
    1708:	e2 f7       	brpl	.-8      	; 0x1702 <GPIO_readPin+0xaa>
    170a:	ca 01       	movw	r24, r20
    170c:	81 70       	andi	r24, 0x01	; 1
    170e:	90 70       	andi	r25, 0x00	; 0
    1710:	88 23       	and	r24, r24
    1712:	19 f0       	breq	.+6      	; 0x171a <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    1714:	81 e0       	ldi	r24, 0x01	; 1
    1716:	89 83       	std	Y+1, r24	; 0x01
    1718:	31 c0       	rjmp	.+98     	; 0x177c <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    171a:	19 82       	std	Y+1, r1	; 0x01
    171c:	2f c0       	rjmp	.+94     	; 0x177c <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    171e:	e3 e3       	ldi	r30, 0x33	; 51
    1720:	f0 e0       	ldi	r31, 0x00	; 0
    1722:	80 81       	ld	r24, Z
    1724:	28 2f       	mov	r18, r24
    1726:	30 e0       	ldi	r19, 0x00	; 0
    1728:	8b 81       	ldd	r24, Y+3	; 0x03
    172a:	88 2f       	mov	r24, r24
    172c:	90 e0       	ldi	r25, 0x00	; 0
    172e:	a9 01       	movw	r20, r18
    1730:	02 c0       	rjmp	.+4      	; 0x1736 <GPIO_readPin+0xde>
    1732:	55 95       	asr	r21
    1734:	47 95       	ror	r20
    1736:	8a 95       	dec	r24
    1738:	e2 f7       	brpl	.-8      	; 0x1732 <GPIO_readPin+0xda>
    173a:	ca 01       	movw	r24, r20
    173c:	81 70       	andi	r24, 0x01	; 1
    173e:	90 70       	andi	r25, 0x00	; 0
    1740:	88 23       	and	r24, r24
    1742:	19 f0       	breq	.+6      	; 0x174a <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    1744:	81 e0       	ldi	r24, 0x01	; 1
    1746:	89 83       	std	Y+1, r24	; 0x01
    1748:	19 c0       	rjmp	.+50     	; 0x177c <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    174a:	19 82       	std	Y+1, r1	; 0x01
    174c:	17 c0       	rjmp	.+46     	; 0x177c <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    174e:	e0 e3       	ldi	r30, 0x30	; 48
    1750:	f0 e0       	ldi	r31, 0x00	; 0
    1752:	80 81       	ld	r24, Z
    1754:	28 2f       	mov	r18, r24
    1756:	30 e0       	ldi	r19, 0x00	; 0
    1758:	8b 81       	ldd	r24, Y+3	; 0x03
    175a:	88 2f       	mov	r24, r24
    175c:	90 e0       	ldi	r25, 0x00	; 0
    175e:	a9 01       	movw	r20, r18
    1760:	02 c0       	rjmp	.+4      	; 0x1766 <GPIO_readPin+0x10e>
    1762:	55 95       	asr	r21
    1764:	47 95       	ror	r20
    1766:	8a 95       	dec	r24
    1768:	e2 f7       	brpl	.-8      	; 0x1762 <GPIO_readPin+0x10a>
    176a:	ca 01       	movw	r24, r20
    176c:	81 70       	andi	r24, 0x01	; 1
    176e:	90 70       	andi	r25, 0x00	; 0
    1770:	88 23       	and	r24, r24
    1772:	19 f0       	breq	.+6      	; 0x177a <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    1774:	81 e0       	ldi	r24, 0x01	; 1
    1776:	89 83       	std	Y+1, r24	; 0x01
    1778:	01 c0       	rjmp	.+2      	; 0x177c <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    177a:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    177c:	89 81       	ldd	r24, Y+1	; 0x01
}
    177e:	0f 90       	pop	r0
    1780:	0f 90       	pop	r0
    1782:	0f 90       	pop	r0
    1784:	0f 90       	pop	r0
    1786:	0f 90       	pop	r0
    1788:	cf 91       	pop	r28
    178a:	df 91       	pop	r29
    178c:	08 95       	ret

0000178e <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    178e:	df 93       	push	r29
    1790:	cf 93       	push	r28
    1792:	00 d0       	rcall	.+0      	; 0x1794 <GPIO_setupPortDirection+0x6>
    1794:	00 d0       	rcall	.+0      	; 0x1796 <GPIO_setupPortDirection+0x8>
    1796:	cd b7       	in	r28, 0x3d	; 61
    1798:	de b7       	in	r29, 0x3e	; 62
    179a:	89 83       	std	Y+1, r24	; 0x01
    179c:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    179e:	89 81       	ldd	r24, Y+1	; 0x01
    17a0:	84 30       	cpi	r24, 0x04	; 4
    17a2:	90 f5       	brcc	.+100    	; 0x1808 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    17a4:	89 81       	ldd	r24, Y+1	; 0x01
    17a6:	28 2f       	mov	r18, r24
    17a8:	30 e0       	ldi	r19, 0x00	; 0
    17aa:	3c 83       	std	Y+4, r19	; 0x04
    17ac:	2b 83       	std	Y+3, r18	; 0x03
    17ae:	8b 81       	ldd	r24, Y+3	; 0x03
    17b0:	9c 81       	ldd	r25, Y+4	; 0x04
    17b2:	81 30       	cpi	r24, 0x01	; 1
    17b4:	91 05       	cpc	r25, r1
    17b6:	d1 f0       	breq	.+52     	; 0x17ec <GPIO_setupPortDirection+0x5e>
    17b8:	2b 81       	ldd	r18, Y+3	; 0x03
    17ba:	3c 81       	ldd	r19, Y+4	; 0x04
    17bc:	22 30       	cpi	r18, 0x02	; 2
    17be:	31 05       	cpc	r19, r1
    17c0:	2c f4       	brge	.+10     	; 0x17cc <GPIO_setupPortDirection+0x3e>
    17c2:	8b 81       	ldd	r24, Y+3	; 0x03
    17c4:	9c 81       	ldd	r25, Y+4	; 0x04
    17c6:	00 97       	sbiw	r24, 0x00	; 0
    17c8:	61 f0       	breq	.+24     	; 0x17e2 <GPIO_setupPortDirection+0x54>
    17ca:	1e c0       	rjmp	.+60     	; 0x1808 <GPIO_setupPortDirection+0x7a>
    17cc:	2b 81       	ldd	r18, Y+3	; 0x03
    17ce:	3c 81       	ldd	r19, Y+4	; 0x04
    17d0:	22 30       	cpi	r18, 0x02	; 2
    17d2:	31 05       	cpc	r19, r1
    17d4:	81 f0       	breq	.+32     	; 0x17f6 <GPIO_setupPortDirection+0x68>
    17d6:	8b 81       	ldd	r24, Y+3	; 0x03
    17d8:	9c 81       	ldd	r25, Y+4	; 0x04
    17da:	83 30       	cpi	r24, 0x03	; 3
    17dc:	91 05       	cpc	r25, r1
    17de:	81 f0       	breq	.+32     	; 0x1800 <GPIO_setupPortDirection+0x72>
    17e0:	13 c0       	rjmp	.+38     	; 0x1808 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    17e2:	ea e3       	ldi	r30, 0x3A	; 58
    17e4:	f0 e0       	ldi	r31, 0x00	; 0
    17e6:	8a 81       	ldd	r24, Y+2	; 0x02
    17e8:	80 83       	st	Z, r24
    17ea:	0e c0       	rjmp	.+28     	; 0x1808 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    17ec:	e7 e3       	ldi	r30, 0x37	; 55
    17ee:	f0 e0       	ldi	r31, 0x00	; 0
    17f0:	8a 81       	ldd	r24, Y+2	; 0x02
    17f2:	80 83       	st	Z, r24
    17f4:	09 c0       	rjmp	.+18     	; 0x1808 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    17f6:	e4 e3       	ldi	r30, 0x34	; 52
    17f8:	f0 e0       	ldi	r31, 0x00	; 0
    17fa:	8a 81       	ldd	r24, Y+2	; 0x02
    17fc:	80 83       	st	Z, r24
    17fe:	04 c0       	rjmp	.+8      	; 0x1808 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    1800:	e1 e3       	ldi	r30, 0x31	; 49
    1802:	f0 e0       	ldi	r31, 0x00	; 0
    1804:	8a 81       	ldd	r24, Y+2	; 0x02
    1806:	80 83       	st	Z, r24
			break;
		}
	}
}
    1808:	0f 90       	pop	r0
    180a:	0f 90       	pop	r0
    180c:	0f 90       	pop	r0
    180e:	0f 90       	pop	r0
    1810:	cf 91       	pop	r28
    1812:	df 91       	pop	r29
    1814:	08 95       	ret

00001816 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    1816:	df 93       	push	r29
    1818:	cf 93       	push	r28
    181a:	00 d0       	rcall	.+0      	; 0x181c <GPIO_writePort+0x6>
    181c:	00 d0       	rcall	.+0      	; 0x181e <GPIO_writePort+0x8>
    181e:	cd b7       	in	r28, 0x3d	; 61
    1820:	de b7       	in	r29, 0x3e	; 62
    1822:	89 83       	std	Y+1, r24	; 0x01
    1824:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1826:	89 81       	ldd	r24, Y+1	; 0x01
    1828:	84 30       	cpi	r24, 0x04	; 4
    182a:	90 f5       	brcc	.+100    	; 0x1890 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    182c:	89 81       	ldd	r24, Y+1	; 0x01
    182e:	28 2f       	mov	r18, r24
    1830:	30 e0       	ldi	r19, 0x00	; 0
    1832:	3c 83       	std	Y+4, r19	; 0x04
    1834:	2b 83       	std	Y+3, r18	; 0x03
    1836:	8b 81       	ldd	r24, Y+3	; 0x03
    1838:	9c 81       	ldd	r25, Y+4	; 0x04
    183a:	81 30       	cpi	r24, 0x01	; 1
    183c:	91 05       	cpc	r25, r1
    183e:	d1 f0       	breq	.+52     	; 0x1874 <GPIO_writePort+0x5e>
    1840:	2b 81       	ldd	r18, Y+3	; 0x03
    1842:	3c 81       	ldd	r19, Y+4	; 0x04
    1844:	22 30       	cpi	r18, 0x02	; 2
    1846:	31 05       	cpc	r19, r1
    1848:	2c f4       	brge	.+10     	; 0x1854 <GPIO_writePort+0x3e>
    184a:	8b 81       	ldd	r24, Y+3	; 0x03
    184c:	9c 81       	ldd	r25, Y+4	; 0x04
    184e:	00 97       	sbiw	r24, 0x00	; 0
    1850:	61 f0       	breq	.+24     	; 0x186a <GPIO_writePort+0x54>
    1852:	1e c0       	rjmp	.+60     	; 0x1890 <GPIO_writePort+0x7a>
    1854:	2b 81       	ldd	r18, Y+3	; 0x03
    1856:	3c 81       	ldd	r19, Y+4	; 0x04
    1858:	22 30       	cpi	r18, 0x02	; 2
    185a:	31 05       	cpc	r19, r1
    185c:	81 f0       	breq	.+32     	; 0x187e <GPIO_writePort+0x68>
    185e:	8b 81       	ldd	r24, Y+3	; 0x03
    1860:	9c 81       	ldd	r25, Y+4	; 0x04
    1862:	83 30       	cpi	r24, 0x03	; 3
    1864:	91 05       	cpc	r25, r1
    1866:	81 f0       	breq	.+32     	; 0x1888 <GPIO_writePort+0x72>
    1868:	13 c0       	rjmp	.+38     	; 0x1890 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    186a:	eb e3       	ldi	r30, 0x3B	; 59
    186c:	f0 e0       	ldi	r31, 0x00	; 0
    186e:	8a 81       	ldd	r24, Y+2	; 0x02
    1870:	80 83       	st	Z, r24
    1872:	0e c0       	rjmp	.+28     	; 0x1890 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    1874:	e8 e3       	ldi	r30, 0x38	; 56
    1876:	f0 e0       	ldi	r31, 0x00	; 0
    1878:	8a 81       	ldd	r24, Y+2	; 0x02
    187a:	80 83       	st	Z, r24
    187c:	09 c0       	rjmp	.+18     	; 0x1890 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    187e:	e5 e3       	ldi	r30, 0x35	; 53
    1880:	f0 e0       	ldi	r31, 0x00	; 0
    1882:	8a 81       	ldd	r24, Y+2	; 0x02
    1884:	80 83       	st	Z, r24
    1886:	04 c0       	rjmp	.+8      	; 0x1890 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    1888:	e2 e3       	ldi	r30, 0x32	; 50
    188a:	f0 e0       	ldi	r31, 0x00	; 0
    188c:	8a 81       	ldd	r24, Y+2	; 0x02
    188e:	80 83       	st	Z, r24
			break;
		}
	}
}
    1890:	0f 90       	pop	r0
    1892:	0f 90       	pop	r0
    1894:	0f 90       	pop	r0
    1896:	0f 90       	pop	r0
    1898:	cf 91       	pop	r28
    189a:	df 91       	pop	r29
    189c:	08 95       	ret

0000189e <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    189e:	df 93       	push	r29
    18a0:	cf 93       	push	r28
    18a2:	00 d0       	rcall	.+0      	; 0x18a4 <GPIO_readPort+0x6>
    18a4:	00 d0       	rcall	.+0      	; 0x18a6 <GPIO_readPort+0x8>
    18a6:	cd b7       	in	r28, 0x3d	; 61
    18a8:	de b7       	in	r29, 0x3e	; 62
    18aa:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    18ac:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    18ae:	8a 81       	ldd	r24, Y+2	; 0x02
    18b0:	84 30       	cpi	r24, 0x04	; 4
    18b2:	90 f5       	brcc	.+100    	; 0x1918 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    18b4:	8a 81       	ldd	r24, Y+2	; 0x02
    18b6:	28 2f       	mov	r18, r24
    18b8:	30 e0       	ldi	r19, 0x00	; 0
    18ba:	3c 83       	std	Y+4, r19	; 0x04
    18bc:	2b 83       	std	Y+3, r18	; 0x03
    18be:	8b 81       	ldd	r24, Y+3	; 0x03
    18c0:	9c 81       	ldd	r25, Y+4	; 0x04
    18c2:	81 30       	cpi	r24, 0x01	; 1
    18c4:	91 05       	cpc	r25, r1
    18c6:	d1 f0       	breq	.+52     	; 0x18fc <GPIO_readPort+0x5e>
    18c8:	2b 81       	ldd	r18, Y+3	; 0x03
    18ca:	3c 81       	ldd	r19, Y+4	; 0x04
    18cc:	22 30       	cpi	r18, 0x02	; 2
    18ce:	31 05       	cpc	r19, r1
    18d0:	2c f4       	brge	.+10     	; 0x18dc <GPIO_readPort+0x3e>
    18d2:	8b 81       	ldd	r24, Y+3	; 0x03
    18d4:	9c 81       	ldd	r25, Y+4	; 0x04
    18d6:	00 97       	sbiw	r24, 0x00	; 0
    18d8:	61 f0       	breq	.+24     	; 0x18f2 <GPIO_readPort+0x54>
    18da:	1e c0       	rjmp	.+60     	; 0x1918 <GPIO_readPort+0x7a>
    18dc:	2b 81       	ldd	r18, Y+3	; 0x03
    18de:	3c 81       	ldd	r19, Y+4	; 0x04
    18e0:	22 30       	cpi	r18, 0x02	; 2
    18e2:	31 05       	cpc	r19, r1
    18e4:	81 f0       	breq	.+32     	; 0x1906 <GPIO_readPort+0x68>
    18e6:	8b 81       	ldd	r24, Y+3	; 0x03
    18e8:	9c 81       	ldd	r25, Y+4	; 0x04
    18ea:	83 30       	cpi	r24, 0x03	; 3
    18ec:	91 05       	cpc	r25, r1
    18ee:	81 f0       	breq	.+32     	; 0x1910 <GPIO_readPort+0x72>
    18f0:	13 c0       	rjmp	.+38     	; 0x1918 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    18f2:	e9 e3       	ldi	r30, 0x39	; 57
    18f4:	f0 e0       	ldi	r31, 0x00	; 0
    18f6:	80 81       	ld	r24, Z
    18f8:	89 83       	std	Y+1, r24	; 0x01
    18fa:	0e c0       	rjmp	.+28     	; 0x1918 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    18fc:	e6 e3       	ldi	r30, 0x36	; 54
    18fe:	f0 e0       	ldi	r31, 0x00	; 0
    1900:	80 81       	ld	r24, Z
    1902:	89 83       	std	Y+1, r24	; 0x01
    1904:	09 c0       	rjmp	.+18     	; 0x1918 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    1906:	e3 e3       	ldi	r30, 0x33	; 51
    1908:	f0 e0       	ldi	r31, 0x00	; 0
    190a:	80 81       	ld	r24, Z
    190c:	89 83       	std	Y+1, r24	; 0x01
    190e:	04 c0       	rjmp	.+8      	; 0x1918 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    1910:	e0 e3       	ldi	r30, 0x30	; 48
    1912:	f0 e0       	ldi	r31, 0x00	; 0
    1914:	80 81       	ld	r24, Z
    1916:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    1918:	89 81       	ldd	r24, Y+1	; 0x01
}
    191a:	0f 90       	pop	r0
    191c:	0f 90       	pop	r0
    191e:	0f 90       	pop	r0
    1920:	0f 90       	pop	r0
    1922:	cf 91       	pop	r28
    1924:	df 91       	pop	r29
    1926:	08 95       	ret

00001928 <KEYPAD_getPressedKey>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
uint8 KEYPAD_getPressedKey(void)
{
    1928:	df 93       	push	r29
    192a:	cf 93       	push	r28
    192c:	00 d0       	rcall	.+0      	; 0x192e <KEYPAD_getPressedKey+0x6>
    192e:	0f 92       	push	r0
    1930:	cd b7       	in	r28, 0x3d	; 61
    1932:	de b7       	in	r29, 0x3e	; 62
	uint8 col,row;
	uint8 keypad_port_value = 0;
    1934:	19 82       	std	Y+1, r1	; 0x01
	while(1)
	{
		for(col=0;col<KEYPAD_NUM_COLS;col++) /* loop for columns */
    1936:	1b 82       	std	Y+3, r1	; 0x03
    1938:	43 c0       	rjmp	.+134    	; 0x19c0 <KEYPAD_getPressedKey+0x98>
		{
			/* 
			 * Each time setup the direction for all keypad port as input pins,
			 * except this column will be output pin
			 */
			GPIO_setupPortDirection(KEYPAD_PORT_ID,PORT_INPUT);
    193a:	80 e0       	ldi	r24, 0x00	; 0
    193c:	60 e0       	ldi	r22, 0x00	; 0
    193e:	0e 94 c7 0b 	call	0x178e	; 0x178e <GPIO_setupPortDirection>
			GPIO_setupPinDirection(KEYPAD_PORT_ID,KEYPAD_FIRST_COLUMN_PIN_ID+col,PIN_OUTPUT);
    1942:	8b 81       	ldd	r24, Y+3	; 0x03
    1944:	98 2f       	mov	r25, r24
    1946:	9c 5f       	subi	r25, 0xFC	; 252
    1948:	80 e0       	ldi	r24, 0x00	; 0
    194a:	69 2f       	mov	r22, r25
    194c:	41 e0       	ldi	r20, 0x01	; 1
    194e:	0e 94 56 09 	call	0x12ac	; 0x12ac <GPIO_setupPinDirection>
			
#if(KEYPAD_BUTTON_PRESSED == LOGIC_LOW)
			/* Clear the column output pin and set the rest pins value */
			keypad_port_value = ~(1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
    1952:	8b 81       	ldd	r24, Y+3	; 0x03
    1954:	88 2f       	mov	r24, r24
    1956:	90 e0       	ldi	r25, 0x00	; 0
    1958:	9c 01       	movw	r18, r24
    195a:	2c 5f       	subi	r18, 0xFC	; 252
    195c:	3f 4f       	sbci	r19, 0xFF	; 255
    195e:	81 e0       	ldi	r24, 0x01	; 1
    1960:	90 e0       	ldi	r25, 0x00	; 0
    1962:	02 c0       	rjmp	.+4      	; 0x1968 <KEYPAD_getPressedKey+0x40>
    1964:	88 0f       	add	r24, r24
    1966:	99 1f       	adc	r25, r25
    1968:	2a 95       	dec	r18
    196a:	e2 f7       	brpl	.-8      	; 0x1964 <KEYPAD_getPressedKey+0x3c>
    196c:	80 95       	com	r24
    196e:	89 83       	std	Y+1, r24	; 0x01
#else
			/* Set the column output pin and clear the rest pins value */
			keypad_port_value = (1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
#endif
			GPIO_writePort(KEYPAD_PORT_ID,keypad_port_value);
    1970:	80 e0       	ldi	r24, 0x00	; 0
    1972:	69 81       	ldd	r22, Y+1	; 0x01
    1974:	0e 94 0b 0c 	call	0x1816	; 0x1816 <GPIO_writePort>

			for(row=0;row<KEYPAD_NUM_ROWS;row++) /* loop for rows */
    1978:	1a 82       	std	Y+2, r1	; 0x02
    197a:	1c c0       	rjmp	.+56     	; 0x19b4 <KEYPAD_getPressedKey+0x8c>
			{
				/* Check if the switch is pressed in this row */
				if(GPIO_readPin(KEYPAD_PORT_ID,row+KEYPAD_FIRST_ROW_PIN_ID) == KEYPAD_BUTTON_PRESSED)
    197c:	80 e0       	ldi	r24, 0x00	; 0
    197e:	6a 81       	ldd	r22, Y+2	; 0x02
    1980:	0e 94 2c 0b 	call	0x1658	; 0x1658 <GPIO_readPin>
    1984:	88 23       	and	r24, r24
    1986:	99 f4       	brne	.+38     	; 0x19ae <KEYPAD_getPressedKey+0x86>
				{
					#if (KEYPAD_NUM_COLS == 3)
						return KEYPAD_4x3_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
					#elif (KEYPAD_NUM_COLS == 4)
						return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
    1988:	8a 81       	ldd	r24, Y+2	; 0x02
    198a:	88 2f       	mov	r24, r24
    198c:	90 e0       	ldi	r25, 0x00	; 0
    198e:	88 0f       	add	r24, r24
    1990:	99 1f       	adc	r25, r25
    1992:	88 0f       	add	r24, r24
    1994:	99 1f       	adc	r25, r25
    1996:	98 2f       	mov	r25, r24
    1998:	8b 81       	ldd	r24, Y+3	; 0x03
    199a:	89 0f       	add	r24, r25
    199c:	8f 5f       	subi	r24, 0xFF	; 255
    199e:	0e 94 e5 0c 	call	0x19ca	; 0x19ca <KEYPAD_4x4_adjustKeyNumber>
					#endif
				}
			}
		}
	}	
}
    19a2:	0f 90       	pop	r0
    19a4:	0f 90       	pop	r0
    19a6:	0f 90       	pop	r0
    19a8:	cf 91       	pop	r28
    19aa:	df 91       	pop	r29
    19ac:	08 95       	ret
			/* Set the column output pin and clear the rest pins value */
			keypad_port_value = (1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
#endif
			GPIO_writePort(KEYPAD_PORT_ID,keypad_port_value);

			for(row=0;row<KEYPAD_NUM_ROWS;row++) /* loop for rows */
    19ae:	8a 81       	ldd	r24, Y+2	; 0x02
    19b0:	8f 5f       	subi	r24, 0xFF	; 255
    19b2:	8a 83       	std	Y+2, r24	; 0x02
    19b4:	8a 81       	ldd	r24, Y+2	; 0x02
    19b6:	84 30       	cpi	r24, 0x04	; 4
    19b8:	08 f3       	brcs	.-62     	; 0x197c <KEYPAD_getPressedKey+0x54>
{
	uint8 col,row;
	uint8 keypad_port_value = 0;
	while(1)
	{
		for(col=0;col<KEYPAD_NUM_COLS;col++) /* loop for columns */
    19ba:	8b 81       	ldd	r24, Y+3	; 0x03
    19bc:	8f 5f       	subi	r24, 0xFF	; 255
    19be:	8b 83       	std	Y+3, r24	; 0x03
    19c0:	8b 81       	ldd	r24, Y+3	; 0x03
    19c2:	84 30       	cpi	r24, 0x04	; 4
    19c4:	08 f4       	brcc	.+2      	; 0x19c8 <KEYPAD_getPressedKey+0xa0>
    19c6:	b9 cf       	rjmp	.-142    	; 0x193a <KEYPAD_getPressedKey+0x12>
    19c8:	b6 cf       	rjmp	.-148    	; 0x1936 <KEYPAD_getPressedKey+0xe>

000019ca <KEYPAD_4x4_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    19ca:	df 93       	push	r29
    19cc:	cf 93       	push	r28
    19ce:	00 d0       	rcall	.+0      	; 0x19d0 <KEYPAD_4x4_adjustKeyNumber+0x6>
    19d0:	00 d0       	rcall	.+0      	; 0x19d2 <KEYPAD_4x4_adjustKeyNumber+0x8>
    19d2:	cd b7       	in	r28, 0x3d	; 61
    19d4:	de b7       	in	r29, 0x3e	; 62
    19d6:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    19d8:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    19da:	8a 81       	ldd	r24, Y+2	; 0x02
    19dc:	28 2f       	mov	r18, r24
    19de:	30 e0       	ldi	r19, 0x00	; 0
    19e0:	3c 83       	std	Y+4, r19	; 0x04
    19e2:	2b 83       	std	Y+3, r18	; 0x03
    19e4:	8b 81       	ldd	r24, Y+3	; 0x03
    19e6:	9c 81       	ldd	r25, Y+4	; 0x04
    19e8:	88 30       	cpi	r24, 0x08	; 8
    19ea:	91 05       	cpc	r25, r1
    19ec:	09 f4       	brne	.+2      	; 0x19f0 <KEYPAD_4x4_adjustKeyNumber+0x26>
    19ee:	70 c0       	rjmp	.+224    	; 0x1ad0 <KEYPAD_4x4_adjustKeyNumber+0x106>
    19f0:	2b 81       	ldd	r18, Y+3	; 0x03
    19f2:	3c 81       	ldd	r19, Y+4	; 0x04
    19f4:	29 30       	cpi	r18, 0x09	; 9
    19f6:	31 05       	cpc	r19, r1
    19f8:	5c f5       	brge	.+86     	; 0x1a50 <KEYPAD_4x4_adjustKeyNumber+0x86>
    19fa:	8b 81       	ldd	r24, Y+3	; 0x03
    19fc:	9c 81       	ldd	r25, Y+4	; 0x04
    19fe:	84 30       	cpi	r24, 0x04	; 4
    1a00:	91 05       	cpc	r25, r1
    1a02:	09 f4       	brne	.+2      	; 0x1a06 <KEYPAD_4x4_adjustKeyNumber+0x3c>
    1a04:	59 c0       	rjmp	.+178    	; 0x1ab8 <KEYPAD_4x4_adjustKeyNumber+0xee>
    1a06:	2b 81       	ldd	r18, Y+3	; 0x03
    1a08:	3c 81       	ldd	r19, Y+4	; 0x04
    1a0a:	25 30       	cpi	r18, 0x05	; 5
    1a0c:	31 05       	cpc	r19, r1
    1a0e:	9c f4       	brge	.+38     	; 0x1a36 <KEYPAD_4x4_adjustKeyNumber+0x6c>
    1a10:	8b 81       	ldd	r24, Y+3	; 0x03
    1a12:	9c 81       	ldd	r25, Y+4	; 0x04
    1a14:	82 30       	cpi	r24, 0x02	; 2
    1a16:	91 05       	cpc	r25, r1
    1a18:	09 f4       	brne	.+2      	; 0x1a1c <KEYPAD_4x4_adjustKeyNumber+0x52>
    1a1a:	48 c0       	rjmp	.+144    	; 0x1aac <KEYPAD_4x4_adjustKeyNumber+0xe2>
    1a1c:	2b 81       	ldd	r18, Y+3	; 0x03
    1a1e:	3c 81       	ldd	r19, Y+4	; 0x04
    1a20:	23 30       	cpi	r18, 0x03	; 3
    1a22:	31 05       	cpc	r19, r1
    1a24:	0c f0       	brlt	.+2      	; 0x1a28 <KEYPAD_4x4_adjustKeyNumber+0x5e>
    1a26:	45 c0       	rjmp	.+138    	; 0x1ab2 <KEYPAD_4x4_adjustKeyNumber+0xe8>
    1a28:	8b 81       	ldd	r24, Y+3	; 0x03
    1a2a:	9c 81       	ldd	r25, Y+4	; 0x04
    1a2c:	81 30       	cpi	r24, 0x01	; 1
    1a2e:	91 05       	cpc	r25, r1
    1a30:	09 f4       	brne	.+2      	; 0x1a34 <KEYPAD_4x4_adjustKeyNumber+0x6a>
    1a32:	39 c0       	rjmp	.+114    	; 0x1aa6 <KEYPAD_4x4_adjustKeyNumber+0xdc>
    1a34:	67 c0       	rjmp	.+206    	; 0x1b04 <KEYPAD_4x4_adjustKeyNumber+0x13a>
    1a36:	2b 81       	ldd	r18, Y+3	; 0x03
    1a38:	3c 81       	ldd	r19, Y+4	; 0x04
    1a3a:	26 30       	cpi	r18, 0x06	; 6
    1a3c:	31 05       	cpc	r19, r1
    1a3e:	09 f4       	brne	.+2      	; 0x1a42 <KEYPAD_4x4_adjustKeyNumber+0x78>
    1a40:	41 c0       	rjmp	.+130    	; 0x1ac4 <KEYPAD_4x4_adjustKeyNumber+0xfa>
    1a42:	8b 81       	ldd	r24, Y+3	; 0x03
    1a44:	9c 81       	ldd	r25, Y+4	; 0x04
    1a46:	87 30       	cpi	r24, 0x07	; 7
    1a48:	91 05       	cpc	r25, r1
    1a4a:	0c f0       	brlt	.+2      	; 0x1a4e <KEYPAD_4x4_adjustKeyNumber+0x84>
    1a4c:	3e c0       	rjmp	.+124    	; 0x1aca <KEYPAD_4x4_adjustKeyNumber+0x100>
    1a4e:	37 c0       	rjmp	.+110    	; 0x1abe <KEYPAD_4x4_adjustKeyNumber+0xf4>
    1a50:	2b 81       	ldd	r18, Y+3	; 0x03
    1a52:	3c 81       	ldd	r19, Y+4	; 0x04
    1a54:	2c 30       	cpi	r18, 0x0C	; 12
    1a56:	31 05       	cpc	r19, r1
    1a58:	09 f4       	brne	.+2      	; 0x1a5c <KEYPAD_4x4_adjustKeyNumber+0x92>
    1a5a:	46 c0       	rjmp	.+140    	; 0x1ae8 <KEYPAD_4x4_adjustKeyNumber+0x11e>
    1a5c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a5e:	9c 81       	ldd	r25, Y+4	; 0x04
    1a60:	8d 30       	cpi	r24, 0x0D	; 13
    1a62:	91 05       	cpc	r25, r1
    1a64:	5c f4       	brge	.+22     	; 0x1a7c <KEYPAD_4x4_adjustKeyNumber+0xb2>
    1a66:	2b 81       	ldd	r18, Y+3	; 0x03
    1a68:	3c 81       	ldd	r19, Y+4	; 0x04
    1a6a:	2a 30       	cpi	r18, 0x0A	; 10
    1a6c:	31 05       	cpc	r19, r1
    1a6e:	b1 f1       	breq	.+108    	; 0x1adc <KEYPAD_4x4_adjustKeyNumber+0x112>
    1a70:	8b 81       	ldd	r24, Y+3	; 0x03
    1a72:	9c 81       	ldd	r25, Y+4	; 0x04
    1a74:	8b 30       	cpi	r24, 0x0B	; 11
    1a76:	91 05       	cpc	r25, r1
    1a78:	a4 f5       	brge	.+104    	; 0x1ae2 <KEYPAD_4x4_adjustKeyNumber+0x118>
    1a7a:	2d c0       	rjmp	.+90     	; 0x1ad6 <KEYPAD_4x4_adjustKeyNumber+0x10c>
    1a7c:	2b 81       	ldd	r18, Y+3	; 0x03
    1a7e:	3c 81       	ldd	r19, Y+4	; 0x04
    1a80:	2e 30       	cpi	r18, 0x0E	; 14
    1a82:	31 05       	cpc	r19, r1
    1a84:	b9 f1       	breq	.+110    	; 0x1af4 <KEYPAD_4x4_adjustKeyNumber+0x12a>
    1a86:	8b 81       	ldd	r24, Y+3	; 0x03
    1a88:	9c 81       	ldd	r25, Y+4	; 0x04
    1a8a:	8e 30       	cpi	r24, 0x0E	; 14
    1a8c:	91 05       	cpc	r25, r1
    1a8e:	7c f1       	brlt	.+94     	; 0x1aee <KEYPAD_4x4_adjustKeyNumber+0x124>
    1a90:	2b 81       	ldd	r18, Y+3	; 0x03
    1a92:	3c 81       	ldd	r19, Y+4	; 0x04
    1a94:	2f 30       	cpi	r18, 0x0F	; 15
    1a96:	31 05       	cpc	r19, r1
    1a98:	79 f1       	breq	.+94     	; 0x1af8 <KEYPAD_4x4_adjustKeyNumber+0x12e>
    1a9a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a9c:	9c 81       	ldd	r25, Y+4	; 0x04
    1a9e:	80 31       	cpi	r24, 0x10	; 16
    1aa0:	91 05       	cpc	r25, r1
    1aa2:	69 f1       	breq	.+90     	; 0x1afe <KEYPAD_4x4_adjustKeyNumber+0x134>
    1aa4:	2f c0       	rjmp	.+94     	; 0x1b04 <KEYPAD_4x4_adjustKeyNumber+0x13a>
	{
		case 1: keypad_button = 7;
    1aa6:	87 e0       	ldi	r24, 0x07	; 7
    1aa8:	89 83       	std	Y+1, r24	; 0x01
    1aaa:	2e c0       	rjmp	.+92     	; 0x1b08 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 2: keypad_button = 8;
    1aac:	88 e0       	ldi	r24, 0x08	; 8
    1aae:	89 83       	std	Y+1, r24	; 0x01
    1ab0:	2b c0       	rjmp	.+86     	; 0x1b08 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 3: keypad_button = 9;
    1ab2:	89 e0       	ldi	r24, 0x09	; 9
    1ab4:	89 83       	std	Y+1, r24	; 0x01
    1ab6:	28 c0       	rjmp	.+80     	; 0x1b08 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 4: keypad_button = '%'; // ASCII Code of %
    1ab8:	85 e2       	ldi	r24, 0x25	; 37
    1aba:	89 83       	std	Y+1, r24	; 0x01
    1abc:	25 c0       	rjmp	.+74     	; 0x1b08 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 5: keypad_button = 4;
    1abe:	84 e0       	ldi	r24, 0x04	; 4
    1ac0:	89 83       	std	Y+1, r24	; 0x01
    1ac2:	22 c0       	rjmp	.+68     	; 0x1b08 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 6: keypad_button = 5;
    1ac4:	85 e0       	ldi	r24, 0x05	; 5
    1ac6:	89 83       	std	Y+1, r24	; 0x01
    1ac8:	1f c0       	rjmp	.+62     	; 0x1b08 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 7: keypad_button = 6;
    1aca:	86 e0       	ldi	r24, 0x06	; 6
    1acc:	89 83       	std	Y+1, r24	; 0x01
    1ace:	1c c0       	rjmp	.+56     	; 0x1b08 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 8: keypad_button = '*'; /* ASCII Code of '*' */
    1ad0:	8a e2       	ldi	r24, 0x2A	; 42
    1ad2:	89 83       	std	Y+1, r24	; 0x01
    1ad4:	19 c0       	rjmp	.+50     	; 0x1b08 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;		
		case 9: keypad_button = 1;
    1ad6:	81 e0       	ldi	r24, 0x01	; 1
    1ad8:	89 83       	std	Y+1, r24	; 0x01
    1ada:	16 c0       	rjmp	.+44     	; 0x1b08 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 10: keypad_button = 2;
    1adc:	82 e0       	ldi	r24, 0x02	; 2
    1ade:	89 83       	std	Y+1, r24	; 0x01
    1ae0:	13 c0       	rjmp	.+38     	; 0x1b08 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 11: keypad_button = 3;
    1ae2:	83 e0       	ldi	r24, 0x03	; 3
    1ae4:	89 83       	std	Y+1, r24	; 0x01
    1ae6:	10 c0       	rjmp	.+32     	; 0x1b08 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 12: keypad_button = '-'; /* ASCII Code of '-' */
    1ae8:	8d e2       	ldi	r24, 0x2D	; 45
    1aea:	89 83       	std	Y+1, r24	; 0x01
    1aec:	0d c0       	rjmp	.+26     	; 0x1b08 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 13: keypad_button = 13;  /* ASCII of Enter */
    1aee:	8d e0       	ldi	r24, 0x0D	; 13
    1af0:	89 83       	std	Y+1, r24	; 0x01
    1af2:	0a c0       	rjmp	.+20     	; 0x1b08 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;			
		case 14: keypad_button = 0;
    1af4:	19 82       	std	Y+1, r1	; 0x01
    1af6:	08 c0       	rjmp	.+16     	; 0x1b08 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 15: keypad_button = '='; /* ASCII Code of '=' */
    1af8:	8d e3       	ldi	r24, 0x3D	; 61
    1afa:	89 83       	std	Y+1, r24	; 0x01
    1afc:	05 c0       	rjmp	.+10     	; 0x1b08 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 16: keypad_button = '+'; /* ASCII Code of '+' */
    1afe:	8b e2       	ldi	r24, 0x2B	; 43
    1b00:	89 83       	std	Y+1, r24	; 0x01
    1b02:	02 c0       	rjmp	.+4      	; 0x1b08 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		default: keypad_button = button_number;
    1b04:	8a 81       	ldd	r24, Y+2	; 0x02
    1b06:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	return keypad_button;
    1b08:	89 81       	ldd	r24, Y+1	; 0x01
} 
    1b0a:	0f 90       	pop	r0
    1b0c:	0f 90       	pop	r0
    1b0e:	0f 90       	pop	r0
    1b10:	0f 90       	pop	r0
    1b12:	cf 91       	pop	r28
    1b14:	df 91       	pop	r29
    1b16:	08 95       	ret

00001b18 <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    1b18:	df 93       	push	r29
    1b1a:	cf 93       	push	r28
    1b1c:	cd b7       	in	r28, 0x3d	; 61
    1b1e:	de b7       	in	r29, 0x3e	; 62
	/* Configure the direction for RS, RW and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    1b20:	83 e0       	ldi	r24, 0x03	; 3
    1b22:	62 e0       	ldi	r22, 0x02	; 2
    1b24:	41 e0       	ldi	r20, 0x01	; 1
    1b26:	0e 94 56 09 	call	0x12ac	; 0x12ac <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_RW_PORT_ID,LCD_RW_PIN_ID,PIN_OUTPUT);
    1b2a:	83 e0       	ldi	r24, 0x03	; 3
    1b2c:	63 e0       	ldi	r22, 0x03	; 3
    1b2e:	41 e0       	ldi	r20, 0x01	; 1
    1b30:	0e 94 56 09 	call	0x12ac	; 0x12ac <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    1b34:	83 e0       	ldi	r24, 0x03	; 3
    1b36:	64 e0       	ldi	r22, 0x04	; 4
    1b38:	41 e0       	ldi	r20, 0x01	; 1
    1b3a:	0e 94 56 09 	call	0x12ac	; 0x12ac <GPIO_setupPinDirection>

	/* Configure the data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
    1b3e:	82 e0       	ldi	r24, 0x02	; 2
    1b40:	6f ef       	ldi	r22, 0xFF	; 255
    1b42:	0e 94 c7 0b 	call	0x178e	; 0x178e <GPIO_setupPortDirection>

	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE); /* use 2-line lcd + 8-bit Data Mode + 5*7 dot display Mode */
    1b46:	88 e3       	ldi	r24, 0x38	; 56
    1b48:	0e 94 af 0d 	call	0x1b5e	; 0x1b5e <LCD_sendCommand>
	
	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    1b4c:	8c e0       	ldi	r24, 0x0C	; 12
    1b4e:	0e 94 af 0d 	call	0x1b5e	; 0x1b5e <LCD_sendCommand>
	
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    1b52:	81 e0       	ldi	r24, 0x01	; 1
    1b54:	0e 94 af 0d 	call	0x1b5e	; 0x1b5e <LCD_sendCommand>
}
    1b58:	cf 91       	pop	r28
    1b5a:	df 91       	pop	r29
    1b5c:	08 95       	ret

00001b5e <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    1b5e:	df 93       	push	r29
    1b60:	cf 93       	push	r28
    1b62:	cd b7       	in	r28, 0x3d	; 61
    1b64:	de b7       	in	r29, 0x3e	; 62
    1b66:	e9 97       	sbiw	r28, 0x39	; 57
    1b68:	0f b6       	in	r0, 0x3f	; 63
    1b6a:	f8 94       	cli
    1b6c:	de bf       	out	0x3e, r29	; 62
    1b6e:	0f be       	out	0x3f, r0	; 63
    1b70:	cd bf       	out	0x3d, r28	; 61
    1b72:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    1b74:	83 e0       	ldi	r24, 0x03	; 3
    1b76:	62 e0       	ldi	r22, 0x02	; 2
    1b78:	40 e0       	ldi	r20, 0x00	; 0
    1b7a:	0e 94 41 0a 	call	0x1482	; 0x1482 <GPIO_writePin>
	GPIO_writePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,LOGIC_LOW); /* write data to LCD so RW=0 */
    1b7e:	83 e0       	ldi	r24, 0x03	; 3
    1b80:	63 e0       	ldi	r22, 0x03	; 3
    1b82:	40 e0       	ldi	r20, 0x00	; 0
    1b84:	0e 94 41 0a 	call	0x1482	; 0x1482 <GPIO_writePin>
    1b88:	80 e0       	ldi	r24, 0x00	; 0
    1b8a:	90 e0       	ldi	r25, 0x00	; 0
    1b8c:	a0 e8       	ldi	r26, 0x80	; 128
    1b8e:	bf e3       	ldi	r27, 0x3F	; 63
    1b90:	8d ab       	std	Y+53, r24	; 0x35
    1b92:	9e ab       	std	Y+54, r25	; 0x36
    1b94:	af ab       	std	Y+55, r26	; 0x37
    1b96:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b98:	6d a9       	ldd	r22, Y+53	; 0x35
    1b9a:	7e a9       	ldd	r23, Y+54	; 0x36
    1b9c:	8f a9       	ldd	r24, Y+55	; 0x37
    1b9e:	98 ad       	ldd	r25, Y+56	; 0x38
    1ba0:	20 e0       	ldi	r18, 0x00	; 0
    1ba2:	30 e0       	ldi	r19, 0x00	; 0
    1ba4:	4a ef       	ldi	r20, 0xFA	; 250
    1ba6:	54 e4       	ldi	r21, 0x44	; 68
    1ba8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bac:	dc 01       	movw	r26, r24
    1bae:	cb 01       	movw	r24, r22
    1bb0:	89 ab       	std	Y+49, r24	; 0x31
    1bb2:	9a ab       	std	Y+50, r25	; 0x32
    1bb4:	ab ab       	std	Y+51, r26	; 0x33
    1bb6:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1bb8:	69 a9       	ldd	r22, Y+49	; 0x31
    1bba:	7a a9       	ldd	r23, Y+50	; 0x32
    1bbc:	8b a9       	ldd	r24, Y+51	; 0x33
    1bbe:	9c a9       	ldd	r25, Y+52	; 0x34
    1bc0:	20 e0       	ldi	r18, 0x00	; 0
    1bc2:	30 e0       	ldi	r19, 0x00	; 0
    1bc4:	40 e8       	ldi	r20, 0x80	; 128
    1bc6:	5f e3       	ldi	r21, 0x3F	; 63
    1bc8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1bcc:	88 23       	and	r24, r24
    1bce:	2c f4       	brge	.+10     	; 0x1bda <LCD_sendCommand+0x7c>
		__ticks = 1;
    1bd0:	81 e0       	ldi	r24, 0x01	; 1
    1bd2:	90 e0       	ldi	r25, 0x00	; 0
    1bd4:	98 ab       	std	Y+48, r25	; 0x30
    1bd6:	8f a7       	std	Y+47, r24	; 0x2f
    1bd8:	3f c0       	rjmp	.+126    	; 0x1c58 <LCD_sendCommand+0xfa>
	else if (__tmp > 65535)
    1bda:	69 a9       	ldd	r22, Y+49	; 0x31
    1bdc:	7a a9       	ldd	r23, Y+50	; 0x32
    1bde:	8b a9       	ldd	r24, Y+51	; 0x33
    1be0:	9c a9       	ldd	r25, Y+52	; 0x34
    1be2:	20 e0       	ldi	r18, 0x00	; 0
    1be4:	3f ef       	ldi	r19, 0xFF	; 255
    1be6:	4f e7       	ldi	r20, 0x7F	; 127
    1be8:	57 e4       	ldi	r21, 0x47	; 71
    1bea:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1bee:	18 16       	cp	r1, r24
    1bf0:	4c f5       	brge	.+82     	; 0x1c44 <LCD_sendCommand+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bf2:	6d a9       	ldd	r22, Y+53	; 0x35
    1bf4:	7e a9       	ldd	r23, Y+54	; 0x36
    1bf6:	8f a9       	ldd	r24, Y+55	; 0x37
    1bf8:	98 ad       	ldd	r25, Y+56	; 0x38
    1bfa:	20 e0       	ldi	r18, 0x00	; 0
    1bfc:	30 e0       	ldi	r19, 0x00	; 0
    1bfe:	40 e2       	ldi	r20, 0x20	; 32
    1c00:	51 e4       	ldi	r21, 0x41	; 65
    1c02:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c06:	dc 01       	movw	r26, r24
    1c08:	cb 01       	movw	r24, r22
    1c0a:	bc 01       	movw	r22, r24
    1c0c:	cd 01       	movw	r24, r26
    1c0e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c12:	dc 01       	movw	r26, r24
    1c14:	cb 01       	movw	r24, r22
    1c16:	98 ab       	std	Y+48, r25	; 0x30
    1c18:	8f a7       	std	Y+47, r24	; 0x2f
    1c1a:	0f c0       	rjmp	.+30     	; 0x1c3a <LCD_sendCommand+0xdc>
    1c1c:	88 ec       	ldi	r24, 0xC8	; 200
    1c1e:	90 e0       	ldi	r25, 0x00	; 0
    1c20:	9e a7       	std	Y+46, r25	; 0x2e
    1c22:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1c24:	8d a5       	ldd	r24, Y+45	; 0x2d
    1c26:	9e a5       	ldd	r25, Y+46	; 0x2e
    1c28:	01 97       	sbiw	r24, 0x01	; 1
    1c2a:	f1 f7       	brne	.-4      	; 0x1c28 <LCD_sendCommand+0xca>
    1c2c:	9e a7       	std	Y+46, r25	; 0x2e
    1c2e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c30:	8f a5       	ldd	r24, Y+47	; 0x2f
    1c32:	98 a9       	ldd	r25, Y+48	; 0x30
    1c34:	01 97       	sbiw	r24, 0x01	; 1
    1c36:	98 ab       	std	Y+48, r25	; 0x30
    1c38:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c3a:	8f a5       	ldd	r24, Y+47	; 0x2f
    1c3c:	98 a9       	ldd	r25, Y+48	; 0x30
    1c3e:	00 97       	sbiw	r24, 0x00	; 0
    1c40:	69 f7       	brne	.-38     	; 0x1c1c <LCD_sendCommand+0xbe>
    1c42:	14 c0       	rjmp	.+40     	; 0x1c6c <LCD_sendCommand+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c44:	69 a9       	ldd	r22, Y+49	; 0x31
    1c46:	7a a9       	ldd	r23, Y+50	; 0x32
    1c48:	8b a9       	ldd	r24, Y+51	; 0x33
    1c4a:	9c a9       	ldd	r25, Y+52	; 0x34
    1c4c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c50:	dc 01       	movw	r26, r24
    1c52:	cb 01       	movw	r24, r22
    1c54:	98 ab       	std	Y+48, r25	; 0x30
    1c56:	8f a7       	std	Y+47, r24	; 0x2f
    1c58:	8f a5       	ldd	r24, Y+47	; 0x2f
    1c5a:	98 a9       	ldd	r25, Y+48	; 0x30
    1c5c:	9c a7       	std	Y+44, r25	; 0x2c
    1c5e:	8b a7       	std	Y+43, r24	; 0x2b
    1c60:	8b a5       	ldd	r24, Y+43	; 0x2b
    1c62:	9c a5       	ldd	r25, Y+44	; 0x2c
    1c64:	01 97       	sbiw	r24, 0x01	; 1
    1c66:	f1 f7       	brne	.-4      	; 0x1c64 <LCD_sendCommand+0x106>
    1c68:	9c a7       	std	Y+44, r25	; 0x2c
    1c6a:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    1c6c:	83 e0       	ldi	r24, 0x03	; 3
    1c6e:	64 e0       	ldi	r22, 0x04	; 4
    1c70:	41 e0       	ldi	r20, 0x01	; 1
    1c72:	0e 94 41 0a 	call	0x1482	; 0x1482 <GPIO_writePin>
    1c76:	80 e0       	ldi	r24, 0x00	; 0
    1c78:	90 e0       	ldi	r25, 0x00	; 0
    1c7a:	a0 e8       	ldi	r26, 0x80	; 128
    1c7c:	bf e3       	ldi	r27, 0x3F	; 63
    1c7e:	8f a3       	std	Y+39, r24	; 0x27
    1c80:	98 a7       	std	Y+40, r25	; 0x28
    1c82:	a9 a7       	std	Y+41, r26	; 0x29
    1c84:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c86:	6f a1       	ldd	r22, Y+39	; 0x27
    1c88:	78 a5       	ldd	r23, Y+40	; 0x28
    1c8a:	89 a5       	ldd	r24, Y+41	; 0x29
    1c8c:	9a a5       	ldd	r25, Y+42	; 0x2a
    1c8e:	20 e0       	ldi	r18, 0x00	; 0
    1c90:	30 e0       	ldi	r19, 0x00	; 0
    1c92:	4a ef       	ldi	r20, 0xFA	; 250
    1c94:	54 e4       	ldi	r21, 0x44	; 68
    1c96:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c9a:	dc 01       	movw	r26, r24
    1c9c:	cb 01       	movw	r24, r22
    1c9e:	8b a3       	std	Y+35, r24	; 0x23
    1ca0:	9c a3       	std	Y+36, r25	; 0x24
    1ca2:	ad a3       	std	Y+37, r26	; 0x25
    1ca4:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1ca6:	6b a1       	ldd	r22, Y+35	; 0x23
    1ca8:	7c a1       	ldd	r23, Y+36	; 0x24
    1caa:	8d a1       	ldd	r24, Y+37	; 0x25
    1cac:	9e a1       	ldd	r25, Y+38	; 0x26
    1cae:	20 e0       	ldi	r18, 0x00	; 0
    1cb0:	30 e0       	ldi	r19, 0x00	; 0
    1cb2:	40 e8       	ldi	r20, 0x80	; 128
    1cb4:	5f e3       	ldi	r21, 0x3F	; 63
    1cb6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1cba:	88 23       	and	r24, r24
    1cbc:	2c f4       	brge	.+10     	; 0x1cc8 <LCD_sendCommand+0x16a>
		__ticks = 1;
    1cbe:	81 e0       	ldi	r24, 0x01	; 1
    1cc0:	90 e0       	ldi	r25, 0x00	; 0
    1cc2:	9a a3       	std	Y+34, r25	; 0x22
    1cc4:	89 a3       	std	Y+33, r24	; 0x21
    1cc6:	3f c0       	rjmp	.+126    	; 0x1d46 <LCD_sendCommand+0x1e8>
	else if (__tmp > 65535)
    1cc8:	6b a1       	ldd	r22, Y+35	; 0x23
    1cca:	7c a1       	ldd	r23, Y+36	; 0x24
    1ccc:	8d a1       	ldd	r24, Y+37	; 0x25
    1cce:	9e a1       	ldd	r25, Y+38	; 0x26
    1cd0:	20 e0       	ldi	r18, 0x00	; 0
    1cd2:	3f ef       	ldi	r19, 0xFF	; 255
    1cd4:	4f e7       	ldi	r20, 0x7F	; 127
    1cd6:	57 e4       	ldi	r21, 0x47	; 71
    1cd8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1cdc:	18 16       	cp	r1, r24
    1cde:	4c f5       	brge	.+82     	; 0x1d32 <LCD_sendCommand+0x1d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ce0:	6f a1       	ldd	r22, Y+39	; 0x27
    1ce2:	78 a5       	ldd	r23, Y+40	; 0x28
    1ce4:	89 a5       	ldd	r24, Y+41	; 0x29
    1ce6:	9a a5       	ldd	r25, Y+42	; 0x2a
    1ce8:	20 e0       	ldi	r18, 0x00	; 0
    1cea:	30 e0       	ldi	r19, 0x00	; 0
    1cec:	40 e2       	ldi	r20, 0x20	; 32
    1cee:	51 e4       	ldi	r21, 0x41	; 65
    1cf0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cf4:	dc 01       	movw	r26, r24
    1cf6:	cb 01       	movw	r24, r22
    1cf8:	bc 01       	movw	r22, r24
    1cfa:	cd 01       	movw	r24, r26
    1cfc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d00:	dc 01       	movw	r26, r24
    1d02:	cb 01       	movw	r24, r22
    1d04:	9a a3       	std	Y+34, r25	; 0x22
    1d06:	89 a3       	std	Y+33, r24	; 0x21
    1d08:	0f c0       	rjmp	.+30     	; 0x1d28 <LCD_sendCommand+0x1ca>
    1d0a:	88 ec       	ldi	r24, 0xC8	; 200
    1d0c:	90 e0       	ldi	r25, 0x00	; 0
    1d0e:	98 a3       	std	Y+32, r25	; 0x20
    1d10:	8f 8f       	std	Y+31, r24	; 0x1f
    1d12:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1d14:	98 a1       	ldd	r25, Y+32	; 0x20
    1d16:	01 97       	sbiw	r24, 0x01	; 1
    1d18:	f1 f7       	brne	.-4      	; 0x1d16 <LCD_sendCommand+0x1b8>
    1d1a:	98 a3       	std	Y+32, r25	; 0x20
    1d1c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d1e:	89 a1       	ldd	r24, Y+33	; 0x21
    1d20:	9a a1       	ldd	r25, Y+34	; 0x22
    1d22:	01 97       	sbiw	r24, 0x01	; 1
    1d24:	9a a3       	std	Y+34, r25	; 0x22
    1d26:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d28:	89 a1       	ldd	r24, Y+33	; 0x21
    1d2a:	9a a1       	ldd	r25, Y+34	; 0x22
    1d2c:	00 97       	sbiw	r24, 0x00	; 0
    1d2e:	69 f7       	brne	.-38     	; 0x1d0a <LCD_sendCommand+0x1ac>
    1d30:	14 c0       	rjmp	.+40     	; 0x1d5a <LCD_sendCommand+0x1fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d32:	6b a1       	ldd	r22, Y+35	; 0x23
    1d34:	7c a1       	ldd	r23, Y+36	; 0x24
    1d36:	8d a1       	ldd	r24, Y+37	; 0x25
    1d38:	9e a1       	ldd	r25, Y+38	; 0x26
    1d3a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d3e:	dc 01       	movw	r26, r24
    1d40:	cb 01       	movw	r24, r22
    1d42:	9a a3       	std	Y+34, r25	; 0x22
    1d44:	89 a3       	std	Y+33, r24	; 0x21
    1d46:	89 a1       	ldd	r24, Y+33	; 0x21
    1d48:	9a a1       	ldd	r25, Y+34	; 0x22
    1d4a:	9e 8f       	std	Y+30, r25	; 0x1e
    1d4c:	8d 8f       	std	Y+29, r24	; 0x1d
    1d4e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1d50:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1d52:	01 97       	sbiw	r24, 0x01	; 1
    1d54:	f1 f7       	brne	.-4      	; 0x1d52 <LCD_sendCommand+0x1f4>
    1d56:	9e 8f       	std	Y+30, r25	; 0x1e
    1d58:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
    1d5a:	82 e0       	ldi	r24, 0x02	; 2
    1d5c:	69 ad       	ldd	r22, Y+57	; 0x39
    1d5e:	0e 94 0b 0c 	call	0x1816	; 0x1816 <GPIO_writePort>
    1d62:	80 e0       	ldi	r24, 0x00	; 0
    1d64:	90 e0       	ldi	r25, 0x00	; 0
    1d66:	a0 e8       	ldi	r26, 0x80	; 128
    1d68:	bf e3       	ldi	r27, 0x3F	; 63
    1d6a:	89 8f       	std	Y+25, r24	; 0x19
    1d6c:	9a 8f       	std	Y+26, r25	; 0x1a
    1d6e:	ab 8f       	std	Y+27, r26	; 0x1b
    1d70:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d72:	69 8d       	ldd	r22, Y+25	; 0x19
    1d74:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1d76:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1d78:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1d7a:	20 e0       	ldi	r18, 0x00	; 0
    1d7c:	30 e0       	ldi	r19, 0x00	; 0
    1d7e:	4a ef       	ldi	r20, 0xFA	; 250
    1d80:	54 e4       	ldi	r21, 0x44	; 68
    1d82:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d86:	dc 01       	movw	r26, r24
    1d88:	cb 01       	movw	r24, r22
    1d8a:	8d 8b       	std	Y+21, r24	; 0x15
    1d8c:	9e 8b       	std	Y+22, r25	; 0x16
    1d8e:	af 8b       	std	Y+23, r26	; 0x17
    1d90:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1d92:	6d 89       	ldd	r22, Y+21	; 0x15
    1d94:	7e 89       	ldd	r23, Y+22	; 0x16
    1d96:	8f 89       	ldd	r24, Y+23	; 0x17
    1d98:	98 8d       	ldd	r25, Y+24	; 0x18
    1d9a:	20 e0       	ldi	r18, 0x00	; 0
    1d9c:	30 e0       	ldi	r19, 0x00	; 0
    1d9e:	40 e8       	ldi	r20, 0x80	; 128
    1da0:	5f e3       	ldi	r21, 0x3F	; 63
    1da2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1da6:	88 23       	and	r24, r24
    1da8:	2c f4       	brge	.+10     	; 0x1db4 <LCD_sendCommand+0x256>
		__ticks = 1;
    1daa:	81 e0       	ldi	r24, 0x01	; 1
    1dac:	90 e0       	ldi	r25, 0x00	; 0
    1dae:	9c 8b       	std	Y+20, r25	; 0x14
    1db0:	8b 8b       	std	Y+19, r24	; 0x13
    1db2:	3f c0       	rjmp	.+126    	; 0x1e32 <LCD_sendCommand+0x2d4>
	else if (__tmp > 65535)
    1db4:	6d 89       	ldd	r22, Y+21	; 0x15
    1db6:	7e 89       	ldd	r23, Y+22	; 0x16
    1db8:	8f 89       	ldd	r24, Y+23	; 0x17
    1dba:	98 8d       	ldd	r25, Y+24	; 0x18
    1dbc:	20 e0       	ldi	r18, 0x00	; 0
    1dbe:	3f ef       	ldi	r19, 0xFF	; 255
    1dc0:	4f e7       	ldi	r20, 0x7F	; 127
    1dc2:	57 e4       	ldi	r21, 0x47	; 71
    1dc4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1dc8:	18 16       	cp	r1, r24
    1dca:	4c f5       	brge	.+82     	; 0x1e1e <LCD_sendCommand+0x2c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1dcc:	69 8d       	ldd	r22, Y+25	; 0x19
    1dce:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1dd0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1dd2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1dd4:	20 e0       	ldi	r18, 0x00	; 0
    1dd6:	30 e0       	ldi	r19, 0x00	; 0
    1dd8:	40 e2       	ldi	r20, 0x20	; 32
    1dda:	51 e4       	ldi	r21, 0x41	; 65
    1ddc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1de0:	dc 01       	movw	r26, r24
    1de2:	cb 01       	movw	r24, r22
    1de4:	bc 01       	movw	r22, r24
    1de6:	cd 01       	movw	r24, r26
    1de8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dec:	dc 01       	movw	r26, r24
    1dee:	cb 01       	movw	r24, r22
    1df0:	9c 8b       	std	Y+20, r25	; 0x14
    1df2:	8b 8b       	std	Y+19, r24	; 0x13
    1df4:	0f c0       	rjmp	.+30     	; 0x1e14 <LCD_sendCommand+0x2b6>
    1df6:	88 ec       	ldi	r24, 0xC8	; 200
    1df8:	90 e0       	ldi	r25, 0x00	; 0
    1dfa:	9a 8b       	std	Y+18, r25	; 0x12
    1dfc:	89 8b       	std	Y+17, r24	; 0x11
    1dfe:	89 89       	ldd	r24, Y+17	; 0x11
    1e00:	9a 89       	ldd	r25, Y+18	; 0x12
    1e02:	01 97       	sbiw	r24, 0x01	; 1
    1e04:	f1 f7       	brne	.-4      	; 0x1e02 <LCD_sendCommand+0x2a4>
    1e06:	9a 8b       	std	Y+18, r25	; 0x12
    1e08:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e0a:	8b 89       	ldd	r24, Y+19	; 0x13
    1e0c:	9c 89       	ldd	r25, Y+20	; 0x14
    1e0e:	01 97       	sbiw	r24, 0x01	; 1
    1e10:	9c 8b       	std	Y+20, r25	; 0x14
    1e12:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e14:	8b 89       	ldd	r24, Y+19	; 0x13
    1e16:	9c 89       	ldd	r25, Y+20	; 0x14
    1e18:	00 97       	sbiw	r24, 0x00	; 0
    1e1a:	69 f7       	brne	.-38     	; 0x1df6 <LCD_sendCommand+0x298>
    1e1c:	14 c0       	rjmp	.+40     	; 0x1e46 <LCD_sendCommand+0x2e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e1e:	6d 89       	ldd	r22, Y+21	; 0x15
    1e20:	7e 89       	ldd	r23, Y+22	; 0x16
    1e22:	8f 89       	ldd	r24, Y+23	; 0x17
    1e24:	98 8d       	ldd	r25, Y+24	; 0x18
    1e26:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e2a:	dc 01       	movw	r26, r24
    1e2c:	cb 01       	movw	r24, r22
    1e2e:	9c 8b       	std	Y+20, r25	; 0x14
    1e30:	8b 8b       	std	Y+19, r24	; 0x13
    1e32:	8b 89       	ldd	r24, Y+19	; 0x13
    1e34:	9c 89       	ldd	r25, Y+20	; 0x14
    1e36:	98 8b       	std	Y+16, r25	; 0x10
    1e38:	8f 87       	std	Y+15, r24	; 0x0f
    1e3a:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e3c:	98 89       	ldd	r25, Y+16	; 0x10
    1e3e:	01 97       	sbiw	r24, 0x01	; 1
    1e40:	f1 f7       	brne	.-4      	; 0x1e3e <LCD_sendCommand+0x2e0>
    1e42:	98 8b       	std	Y+16, r25	; 0x10
    1e44:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    1e46:	83 e0       	ldi	r24, 0x03	; 3
    1e48:	64 e0       	ldi	r22, 0x04	; 4
    1e4a:	40 e0       	ldi	r20, 0x00	; 0
    1e4c:	0e 94 41 0a 	call	0x1482	; 0x1482 <GPIO_writePin>
    1e50:	80 e0       	ldi	r24, 0x00	; 0
    1e52:	90 e0       	ldi	r25, 0x00	; 0
    1e54:	a0 e8       	ldi	r26, 0x80	; 128
    1e56:	bf e3       	ldi	r27, 0x3F	; 63
    1e58:	8b 87       	std	Y+11, r24	; 0x0b
    1e5a:	9c 87       	std	Y+12, r25	; 0x0c
    1e5c:	ad 87       	std	Y+13, r26	; 0x0d
    1e5e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e60:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e62:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e64:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e66:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e68:	20 e0       	ldi	r18, 0x00	; 0
    1e6a:	30 e0       	ldi	r19, 0x00	; 0
    1e6c:	4a ef       	ldi	r20, 0xFA	; 250
    1e6e:	54 e4       	ldi	r21, 0x44	; 68
    1e70:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e74:	dc 01       	movw	r26, r24
    1e76:	cb 01       	movw	r24, r22
    1e78:	8f 83       	std	Y+7, r24	; 0x07
    1e7a:	98 87       	std	Y+8, r25	; 0x08
    1e7c:	a9 87       	std	Y+9, r26	; 0x09
    1e7e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1e80:	6f 81       	ldd	r22, Y+7	; 0x07
    1e82:	78 85       	ldd	r23, Y+8	; 0x08
    1e84:	89 85       	ldd	r24, Y+9	; 0x09
    1e86:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e88:	20 e0       	ldi	r18, 0x00	; 0
    1e8a:	30 e0       	ldi	r19, 0x00	; 0
    1e8c:	40 e8       	ldi	r20, 0x80	; 128
    1e8e:	5f e3       	ldi	r21, 0x3F	; 63
    1e90:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e94:	88 23       	and	r24, r24
    1e96:	2c f4       	brge	.+10     	; 0x1ea2 <LCD_sendCommand+0x344>
		__ticks = 1;
    1e98:	81 e0       	ldi	r24, 0x01	; 1
    1e9a:	90 e0       	ldi	r25, 0x00	; 0
    1e9c:	9e 83       	std	Y+6, r25	; 0x06
    1e9e:	8d 83       	std	Y+5, r24	; 0x05
    1ea0:	3f c0       	rjmp	.+126    	; 0x1f20 <LCD_sendCommand+0x3c2>
	else if (__tmp > 65535)
    1ea2:	6f 81       	ldd	r22, Y+7	; 0x07
    1ea4:	78 85       	ldd	r23, Y+8	; 0x08
    1ea6:	89 85       	ldd	r24, Y+9	; 0x09
    1ea8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1eaa:	20 e0       	ldi	r18, 0x00	; 0
    1eac:	3f ef       	ldi	r19, 0xFF	; 255
    1eae:	4f e7       	ldi	r20, 0x7F	; 127
    1eb0:	57 e4       	ldi	r21, 0x47	; 71
    1eb2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1eb6:	18 16       	cp	r1, r24
    1eb8:	4c f5       	brge	.+82     	; 0x1f0c <LCD_sendCommand+0x3ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1eba:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ebc:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ebe:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ec0:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ec2:	20 e0       	ldi	r18, 0x00	; 0
    1ec4:	30 e0       	ldi	r19, 0x00	; 0
    1ec6:	40 e2       	ldi	r20, 0x20	; 32
    1ec8:	51 e4       	ldi	r21, 0x41	; 65
    1eca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ece:	dc 01       	movw	r26, r24
    1ed0:	cb 01       	movw	r24, r22
    1ed2:	bc 01       	movw	r22, r24
    1ed4:	cd 01       	movw	r24, r26
    1ed6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1eda:	dc 01       	movw	r26, r24
    1edc:	cb 01       	movw	r24, r22
    1ede:	9e 83       	std	Y+6, r25	; 0x06
    1ee0:	8d 83       	std	Y+5, r24	; 0x05
    1ee2:	0f c0       	rjmp	.+30     	; 0x1f02 <LCD_sendCommand+0x3a4>
    1ee4:	88 ec       	ldi	r24, 0xC8	; 200
    1ee6:	90 e0       	ldi	r25, 0x00	; 0
    1ee8:	9c 83       	std	Y+4, r25	; 0x04
    1eea:	8b 83       	std	Y+3, r24	; 0x03
    1eec:	8b 81       	ldd	r24, Y+3	; 0x03
    1eee:	9c 81       	ldd	r25, Y+4	; 0x04
    1ef0:	01 97       	sbiw	r24, 0x01	; 1
    1ef2:	f1 f7       	brne	.-4      	; 0x1ef0 <LCD_sendCommand+0x392>
    1ef4:	9c 83       	std	Y+4, r25	; 0x04
    1ef6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ef8:	8d 81       	ldd	r24, Y+5	; 0x05
    1efa:	9e 81       	ldd	r25, Y+6	; 0x06
    1efc:	01 97       	sbiw	r24, 0x01	; 1
    1efe:	9e 83       	std	Y+6, r25	; 0x06
    1f00:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f02:	8d 81       	ldd	r24, Y+5	; 0x05
    1f04:	9e 81       	ldd	r25, Y+6	; 0x06
    1f06:	00 97       	sbiw	r24, 0x00	; 0
    1f08:	69 f7       	brne	.-38     	; 0x1ee4 <LCD_sendCommand+0x386>
    1f0a:	14 c0       	rjmp	.+40     	; 0x1f34 <LCD_sendCommand+0x3d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f0c:	6f 81       	ldd	r22, Y+7	; 0x07
    1f0e:	78 85       	ldd	r23, Y+8	; 0x08
    1f10:	89 85       	ldd	r24, Y+9	; 0x09
    1f12:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f14:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f18:	dc 01       	movw	r26, r24
    1f1a:	cb 01       	movw	r24, r22
    1f1c:	9e 83       	std	Y+6, r25	; 0x06
    1f1e:	8d 83       	std	Y+5, r24	; 0x05
    1f20:	8d 81       	ldd	r24, Y+5	; 0x05
    1f22:	9e 81       	ldd	r25, Y+6	; 0x06
    1f24:	9a 83       	std	Y+2, r25	; 0x02
    1f26:	89 83       	std	Y+1, r24	; 0x01
    1f28:	89 81       	ldd	r24, Y+1	; 0x01
    1f2a:	9a 81       	ldd	r25, Y+2	; 0x02
    1f2c:	01 97       	sbiw	r24, 0x01	; 1
    1f2e:	f1 f7       	brne	.-4      	; 0x1f2c <LCD_sendCommand+0x3ce>
    1f30:	9a 83       	std	Y+2, r25	; 0x02
    1f32:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
}
    1f34:	e9 96       	adiw	r28, 0x39	; 57
    1f36:	0f b6       	in	r0, 0x3f	; 63
    1f38:	f8 94       	cli
    1f3a:	de bf       	out	0x3e, r29	; 62
    1f3c:	0f be       	out	0x3f, r0	; 63
    1f3e:	cd bf       	out	0x3d, r28	; 61
    1f40:	cf 91       	pop	r28
    1f42:	df 91       	pop	r29
    1f44:	08 95       	ret

00001f46 <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    1f46:	df 93       	push	r29
    1f48:	cf 93       	push	r28
    1f4a:	cd b7       	in	r28, 0x3d	; 61
    1f4c:	de b7       	in	r29, 0x3e	; 62
    1f4e:	e9 97       	sbiw	r28, 0x39	; 57
    1f50:	0f b6       	in	r0, 0x3f	; 63
    1f52:	f8 94       	cli
    1f54:	de bf       	out	0x3e, r29	; 62
    1f56:	0f be       	out	0x3f, r0	; 63
    1f58:	cd bf       	out	0x3d, r28	; 61
    1f5a:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    1f5c:	83 e0       	ldi	r24, 0x03	; 3
    1f5e:	62 e0       	ldi	r22, 0x02	; 2
    1f60:	41 e0       	ldi	r20, 0x01	; 1
    1f62:	0e 94 41 0a 	call	0x1482	; 0x1482 <GPIO_writePin>
	GPIO_writePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,LOGIC_LOW); /* write data to LCD so RW=0 */
    1f66:	83 e0       	ldi	r24, 0x03	; 3
    1f68:	63 e0       	ldi	r22, 0x03	; 3
    1f6a:	40 e0       	ldi	r20, 0x00	; 0
    1f6c:	0e 94 41 0a 	call	0x1482	; 0x1482 <GPIO_writePin>
    1f70:	80 e0       	ldi	r24, 0x00	; 0
    1f72:	90 e0       	ldi	r25, 0x00	; 0
    1f74:	a0 e8       	ldi	r26, 0x80	; 128
    1f76:	bf e3       	ldi	r27, 0x3F	; 63
    1f78:	8d ab       	std	Y+53, r24	; 0x35
    1f7a:	9e ab       	std	Y+54, r25	; 0x36
    1f7c:	af ab       	std	Y+55, r26	; 0x37
    1f7e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f80:	6d a9       	ldd	r22, Y+53	; 0x35
    1f82:	7e a9       	ldd	r23, Y+54	; 0x36
    1f84:	8f a9       	ldd	r24, Y+55	; 0x37
    1f86:	98 ad       	ldd	r25, Y+56	; 0x38
    1f88:	20 e0       	ldi	r18, 0x00	; 0
    1f8a:	30 e0       	ldi	r19, 0x00	; 0
    1f8c:	4a ef       	ldi	r20, 0xFA	; 250
    1f8e:	54 e4       	ldi	r21, 0x44	; 68
    1f90:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f94:	dc 01       	movw	r26, r24
    1f96:	cb 01       	movw	r24, r22
    1f98:	89 ab       	std	Y+49, r24	; 0x31
    1f9a:	9a ab       	std	Y+50, r25	; 0x32
    1f9c:	ab ab       	std	Y+51, r26	; 0x33
    1f9e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1fa0:	69 a9       	ldd	r22, Y+49	; 0x31
    1fa2:	7a a9       	ldd	r23, Y+50	; 0x32
    1fa4:	8b a9       	ldd	r24, Y+51	; 0x33
    1fa6:	9c a9       	ldd	r25, Y+52	; 0x34
    1fa8:	20 e0       	ldi	r18, 0x00	; 0
    1faa:	30 e0       	ldi	r19, 0x00	; 0
    1fac:	40 e8       	ldi	r20, 0x80	; 128
    1fae:	5f e3       	ldi	r21, 0x3F	; 63
    1fb0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1fb4:	88 23       	and	r24, r24
    1fb6:	2c f4       	brge	.+10     	; 0x1fc2 <LCD_displayCharacter+0x7c>
		__ticks = 1;
    1fb8:	81 e0       	ldi	r24, 0x01	; 1
    1fba:	90 e0       	ldi	r25, 0x00	; 0
    1fbc:	98 ab       	std	Y+48, r25	; 0x30
    1fbe:	8f a7       	std	Y+47, r24	; 0x2f
    1fc0:	3f c0       	rjmp	.+126    	; 0x2040 <LCD_displayCharacter+0xfa>
	else if (__tmp > 65535)
    1fc2:	69 a9       	ldd	r22, Y+49	; 0x31
    1fc4:	7a a9       	ldd	r23, Y+50	; 0x32
    1fc6:	8b a9       	ldd	r24, Y+51	; 0x33
    1fc8:	9c a9       	ldd	r25, Y+52	; 0x34
    1fca:	20 e0       	ldi	r18, 0x00	; 0
    1fcc:	3f ef       	ldi	r19, 0xFF	; 255
    1fce:	4f e7       	ldi	r20, 0x7F	; 127
    1fd0:	57 e4       	ldi	r21, 0x47	; 71
    1fd2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1fd6:	18 16       	cp	r1, r24
    1fd8:	4c f5       	brge	.+82     	; 0x202c <LCD_displayCharacter+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fda:	6d a9       	ldd	r22, Y+53	; 0x35
    1fdc:	7e a9       	ldd	r23, Y+54	; 0x36
    1fde:	8f a9       	ldd	r24, Y+55	; 0x37
    1fe0:	98 ad       	ldd	r25, Y+56	; 0x38
    1fe2:	20 e0       	ldi	r18, 0x00	; 0
    1fe4:	30 e0       	ldi	r19, 0x00	; 0
    1fe6:	40 e2       	ldi	r20, 0x20	; 32
    1fe8:	51 e4       	ldi	r21, 0x41	; 65
    1fea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fee:	dc 01       	movw	r26, r24
    1ff0:	cb 01       	movw	r24, r22
    1ff2:	bc 01       	movw	r22, r24
    1ff4:	cd 01       	movw	r24, r26
    1ff6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ffa:	dc 01       	movw	r26, r24
    1ffc:	cb 01       	movw	r24, r22
    1ffe:	98 ab       	std	Y+48, r25	; 0x30
    2000:	8f a7       	std	Y+47, r24	; 0x2f
    2002:	0f c0       	rjmp	.+30     	; 0x2022 <LCD_displayCharacter+0xdc>
    2004:	88 ec       	ldi	r24, 0xC8	; 200
    2006:	90 e0       	ldi	r25, 0x00	; 0
    2008:	9e a7       	std	Y+46, r25	; 0x2e
    200a:	8d a7       	std	Y+45, r24	; 0x2d
    200c:	8d a5       	ldd	r24, Y+45	; 0x2d
    200e:	9e a5       	ldd	r25, Y+46	; 0x2e
    2010:	01 97       	sbiw	r24, 0x01	; 1
    2012:	f1 f7       	brne	.-4      	; 0x2010 <LCD_displayCharacter+0xca>
    2014:	9e a7       	std	Y+46, r25	; 0x2e
    2016:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2018:	8f a5       	ldd	r24, Y+47	; 0x2f
    201a:	98 a9       	ldd	r25, Y+48	; 0x30
    201c:	01 97       	sbiw	r24, 0x01	; 1
    201e:	98 ab       	std	Y+48, r25	; 0x30
    2020:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2022:	8f a5       	ldd	r24, Y+47	; 0x2f
    2024:	98 a9       	ldd	r25, Y+48	; 0x30
    2026:	00 97       	sbiw	r24, 0x00	; 0
    2028:	69 f7       	brne	.-38     	; 0x2004 <LCD_displayCharacter+0xbe>
    202a:	14 c0       	rjmp	.+40     	; 0x2054 <LCD_displayCharacter+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    202c:	69 a9       	ldd	r22, Y+49	; 0x31
    202e:	7a a9       	ldd	r23, Y+50	; 0x32
    2030:	8b a9       	ldd	r24, Y+51	; 0x33
    2032:	9c a9       	ldd	r25, Y+52	; 0x34
    2034:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2038:	dc 01       	movw	r26, r24
    203a:	cb 01       	movw	r24, r22
    203c:	98 ab       	std	Y+48, r25	; 0x30
    203e:	8f a7       	std	Y+47, r24	; 0x2f
    2040:	8f a5       	ldd	r24, Y+47	; 0x2f
    2042:	98 a9       	ldd	r25, Y+48	; 0x30
    2044:	9c a7       	std	Y+44, r25	; 0x2c
    2046:	8b a7       	std	Y+43, r24	; 0x2b
    2048:	8b a5       	ldd	r24, Y+43	; 0x2b
    204a:	9c a5       	ldd	r25, Y+44	; 0x2c
    204c:	01 97       	sbiw	r24, 0x01	; 1
    204e:	f1 f7       	brne	.-4      	; 0x204c <LCD_displayCharacter+0x106>
    2050:	9c a7       	std	Y+44, r25	; 0x2c
    2052:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    2054:	83 e0       	ldi	r24, 0x03	; 3
    2056:	64 e0       	ldi	r22, 0x04	; 4
    2058:	41 e0       	ldi	r20, 0x01	; 1
    205a:	0e 94 41 0a 	call	0x1482	; 0x1482 <GPIO_writePin>
    205e:	80 e0       	ldi	r24, 0x00	; 0
    2060:	90 e0       	ldi	r25, 0x00	; 0
    2062:	a0 e8       	ldi	r26, 0x80	; 128
    2064:	bf e3       	ldi	r27, 0x3F	; 63
    2066:	8f a3       	std	Y+39, r24	; 0x27
    2068:	98 a7       	std	Y+40, r25	; 0x28
    206a:	a9 a7       	std	Y+41, r26	; 0x29
    206c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    206e:	6f a1       	ldd	r22, Y+39	; 0x27
    2070:	78 a5       	ldd	r23, Y+40	; 0x28
    2072:	89 a5       	ldd	r24, Y+41	; 0x29
    2074:	9a a5       	ldd	r25, Y+42	; 0x2a
    2076:	20 e0       	ldi	r18, 0x00	; 0
    2078:	30 e0       	ldi	r19, 0x00	; 0
    207a:	4a ef       	ldi	r20, 0xFA	; 250
    207c:	54 e4       	ldi	r21, 0x44	; 68
    207e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2082:	dc 01       	movw	r26, r24
    2084:	cb 01       	movw	r24, r22
    2086:	8b a3       	std	Y+35, r24	; 0x23
    2088:	9c a3       	std	Y+36, r25	; 0x24
    208a:	ad a3       	std	Y+37, r26	; 0x25
    208c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    208e:	6b a1       	ldd	r22, Y+35	; 0x23
    2090:	7c a1       	ldd	r23, Y+36	; 0x24
    2092:	8d a1       	ldd	r24, Y+37	; 0x25
    2094:	9e a1       	ldd	r25, Y+38	; 0x26
    2096:	20 e0       	ldi	r18, 0x00	; 0
    2098:	30 e0       	ldi	r19, 0x00	; 0
    209a:	40 e8       	ldi	r20, 0x80	; 128
    209c:	5f e3       	ldi	r21, 0x3F	; 63
    209e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    20a2:	88 23       	and	r24, r24
    20a4:	2c f4       	brge	.+10     	; 0x20b0 <LCD_displayCharacter+0x16a>
		__ticks = 1;
    20a6:	81 e0       	ldi	r24, 0x01	; 1
    20a8:	90 e0       	ldi	r25, 0x00	; 0
    20aa:	9a a3       	std	Y+34, r25	; 0x22
    20ac:	89 a3       	std	Y+33, r24	; 0x21
    20ae:	3f c0       	rjmp	.+126    	; 0x212e <LCD_displayCharacter+0x1e8>
	else if (__tmp > 65535)
    20b0:	6b a1       	ldd	r22, Y+35	; 0x23
    20b2:	7c a1       	ldd	r23, Y+36	; 0x24
    20b4:	8d a1       	ldd	r24, Y+37	; 0x25
    20b6:	9e a1       	ldd	r25, Y+38	; 0x26
    20b8:	20 e0       	ldi	r18, 0x00	; 0
    20ba:	3f ef       	ldi	r19, 0xFF	; 255
    20bc:	4f e7       	ldi	r20, 0x7F	; 127
    20be:	57 e4       	ldi	r21, 0x47	; 71
    20c0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    20c4:	18 16       	cp	r1, r24
    20c6:	4c f5       	brge	.+82     	; 0x211a <LCD_displayCharacter+0x1d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20c8:	6f a1       	ldd	r22, Y+39	; 0x27
    20ca:	78 a5       	ldd	r23, Y+40	; 0x28
    20cc:	89 a5       	ldd	r24, Y+41	; 0x29
    20ce:	9a a5       	ldd	r25, Y+42	; 0x2a
    20d0:	20 e0       	ldi	r18, 0x00	; 0
    20d2:	30 e0       	ldi	r19, 0x00	; 0
    20d4:	40 e2       	ldi	r20, 0x20	; 32
    20d6:	51 e4       	ldi	r21, 0x41	; 65
    20d8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20dc:	dc 01       	movw	r26, r24
    20de:	cb 01       	movw	r24, r22
    20e0:	bc 01       	movw	r22, r24
    20e2:	cd 01       	movw	r24, r26
    20e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20e8:	dc 01       	movw	r26, r24
    20ea:	cb 01       	movw	r24, r22
    20ec:	9a a3       	std	Y+34, r25	; 0x22
    20ee:	89 a3       	std	Y+33, r24	; 0x21
    20f0:	0f c0       	rjmp	.+30     	; 0x2110 <LCD_displayCharacter+0x1ca>
    20f2:	88 ec       	ldi	r24, 0xC8	; 200
    20f4:	90 e0       	ldi	r25, 0x00	; 0
    20f6:	98 a3       	std	Y+32, r25	; 0x20
    20f8:	8f 8f       	std	Y+31, r24	; 0x1f
    20fa:	8f 8d       	ldd	r24, Y+31	; 0x1f
    20fc:	98 a1       	ldd	r25, Y+32	; 0x20
    20fe:	01 97       	sbiw	r24, 0x01	; 1
    2100:	f1 f7       	brne	.-4      	; 0x20fe <LCD_displayCharacter+0x1b8>
    2102:	98 a3       	std	Y+32, r25	; 0x20
    2104:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2106:	89 a1       	ldd	r24, Y+33	; 0x21
    2108:	9a a1       	ldd	r25, Y+34	; 0x22
    210a:	01 97       	sbiw	r24, 0x01	; 1
    210c:	9a a3       	std	Y+34, r25	; 0x22
    210e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2110:	89 a1       	ldd	r24, Y+33	; 0x21
    2112:	9a a1       	ldd	r25, Y+34	; 0x22
    2114:	00 97       	sbiw	r24, 0x00	; 0
    2116:	69 f7       	brne	.-38     	; 0x20f2 <LCD_displayCharacter+0x1ac>
    2118:	14 c0       	rjmp	.+40     	; 0x2142 <LCD_displayCharacter+0x1fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    211a:	6b a1       	ldd	r22, Y+35	; 0x23
    211c:	7c a1       	ldd	r23, Y+36	; 0x24
    211e:	8d a1       	ldd	r24, Y+37	; 0x25
    2120:	9e a1       	ldd	r25, Y+38	; 0x26
    2122:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2126:	dc 01       	movw	r26, r24
    2128:	cb 01       	movw	r24, r22
    212a:	9a a3       	std	Y+34, r25	; 0x22
    212c:	89 a3       	std	Y+33, r24	; 0x21
    212e:	89 a1       	ldd	r24, Y+33	; 0x21
    2130:	9a a1       	ldd	r25, Y+34	; 0x22
    2132:	9e 8f       	std	Y+30, r25	; 0x1e
    2134:	8d 8f       	std	Y+29, r24	; 0x1d
    2136:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2138:	9e 8d       	ldd	r25, Y+30	; 0x1e
    213a:	01 97       	sbiw	r24, 0x01	; 1
    213c:	f1 f7       	brne	.-4      	; 0x213a <LCD_displayCharacter+0x1f4>
    213e:	9e 8f       	std	Y+30, r25	; 0x1e
    2140:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
    2142:	82 e0       	ldi	r24, 0x02	; 2
    2144:	69 ad       	ldd	r22, Y+57	; 0x39
    2146:	0e 94 0b 0c 	call	0x1816	; 0x1816 <GPIO_writePort>
    214a:	80 e0       	ldi	r24, 0x00	; 0
    214c:	90 e0       	ldi	r25, 0x00	; 0
    214e:	a0 e8       	ldi	r26, 0x80	; 128
    2150:	bf e3       	ldi	r27, 0x3F	; 63
    2152:	89 8f       	std	Y+25, r24	; 0x19
    2154:	9a 8f       	std	Y+26, r25	; 0x1a
    2156:	ab 8f       	std	Y+27, r26	; 0x1b
    2158:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    215a:	69 8d       	ldd	r22, Y+25	; 0x19
    215c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    215e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2160:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2162:	20 e0       	ldi	r18, 0x00	; 0
    2164:	30 e0       	ldi	r19, 0x00	; 0
    2166:	4a ef       	ldi	r20, 0xFA	; 250
    2168:	54 e4       	ldi	r21, 0x44	; 68
    216a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    216e:	dc 01       	movw	r26, r24
    2170:	cb 01       	movw	r24, r22
    2172:	8d 8b       	std	Y+21, r24	; 0x15
    2174:	9e 8b       	std	Y+22, r25	; 0x16
    2176:	af 8b       	std	Y+23, r26	; 0x17
    2178:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    217a:	6d 89       	ldd	r22, Y+21	; 0x15
    217c:	7e 89       	ldd	r23, Y+22	; 0x16
    217e:	8f 89       	ldd	r24, Y+23	; 0x17
    2180:	98 8d       	ldd	r25, Y+24	; 0x18
    2182:	20 e0       	ldi	r18, 0x00	; 0
    2184:	30 e0       	ldi	r19, 0x00	; 0
    2186:	40 e8       	ldi	r20, 0x80	; 128
    2188:	5f e3       	ldi	r21, 0x3F	; 63
    218a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    218e:	88 23       	and	r24, r24
    2190:	2c f4       	brge	.+10     	; 0x219c <LCD_displayCharacter+0x256>
		__ticks = 1;
    2192:	81 e0       	ldi	r24, 0x01	; 1
    2194:	90 e0       	ldi	r25, 0x00	; 0
    2196:	9c 8b       	std	Y+20, r25	; 0x14
    2198:	8b 8b       	std	Y+19, r24	; 0x13
    219a:	3f c0       	rjmp	.+126    	; 0x221a <LCD_displayCharacter+0x2d4>
	else if (__tmp > 65535)
    219c:	6d 89       	ldd	r22, Y+21	; 0x15
    219e:	7e 89       	ldd	r23, Y+22	; 0x16
    21a0:	8f 89       	ldd	r24, Y+23	; 0x17
    21a2:	98 8d       	ldd	r25, Y+24	; 0x18
    21a4:	20 e0       	ldi	r18, 0x00	; 0
    21a6:	3f ef       	ldi	r19, 0xFF	; 255
    21a8:	4f e7       	ldi	r20, 0x7F	; 127
    21aa:	57 e4       	ldi	r21, 0x47	; 71
    21ac:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    21b0:	18 16       	cp	r1, r24
    21b2:	4c f5       	brge	.+82     	; 0x2206 <LCD_displayCharacter+0x2c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21b4:	69 8d       	ldd	r22, Y+25	; 0x19
    21b6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    21b8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    21ba:	9c 8d       	ldd	r25, Y+28	; 0x1c
    21bc:	20 e0       	ldi	r18, 0x00	; 0
    21be:	30 e0       	ldi	r19, 0x00	; 0
    21c0:	40 e2       	ldi	r20, 0x20	; 32
    21c2:	51 e4       	ldi	r21, 0x41	; 65
    21c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21c8:	dc 01       	movw	r26, r24
    21ca:	cb 01       	movw	r24, r22
    21cc:	bc 01       	movw	r22, r24
    21ce:	cd 01       	movw	r24, r26
    21d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21d4:	dc 01       	movw	r26, r24
    21d6:	cb 01       	movw	r24, r22
    21d8:	9c 8b       	std	Y+20, r25	; 0x14
    21da:	8b 8b       	std	Y+19, r24	; 0x13
    21dc:	0f c0       	rjmp	.+30     	; 0x21fc <LCD_displayCharacter+0x2b6>
    21de:	88 ec       	ldi	r24, 0xC8	; 200
    21e0:	90 e0       	ldi	r25, 0x00	; 0
    21e2:	9a 8b       	std	Y+18, r25	; 0x12
    21e4:	89 8b       	std	Y+17, r24	; 0x11
    21e6:	89 89       	ldd	r24, Y+17	; 0x11
    21e8:	9a 89       	ldd	r25, Y+18	; 0x12
    21ea:	01 97       	sbiw	r24, 0x01	; 1
    21ec:	f1 f7       	brne	.-4      	; 0x21ea <LCD_displayCharacter+0x2a4>
    21ee:	9a 8b       	std	Y+18, r25	; 0x12
    21f0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21f2:	8b 89       	ldd	r24, Y+19	; 0x13
    21f4:	9c 89       	ldd	r25, Y+20	; 0x14
    21f6:	01 97       	sbiw	r24, 0x01	; 1
    21f8:	9c 8b       	std	Y+20, r25	; 0x14
    21fa:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21fc:	8b 89       	ldd	r24, Y+19	; 0x13
    21fe:	9c 89       	ldd	r25, Y+20	; 0x14
    2200:	00 97       	sbiw	r24, 0x00	; 0
    2202:	69 f7       	brne	.-38     	; 0x21de <LCD_displayCharacter+0x298>
    2204:	14 c0       	rjmp	.+40     	; 0x222e <LCD_displayCharacter+0x2e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2206:	6d 89       	ldd	r22, Y+21	; 0x15
    2208:	7e 89       	ldd	r23, Y+22	; 0x16
    220a:	8f 89       	ldd	r24, Y+23	; 0x17
    220c:	98 8d       	ldd	r25, Y+24	; 0x18
    220e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2212:	dc 01       	movw	r26, r24
    2214:	cb 01       	movw	r24, r22
    2216:	9c 8b       	std	Y+20, r25	; 0x14
    2218:	8b 8b       	std	Y+19, r24	; 0x13
    221a:	8b 89       	ldd	r24, Y+19	; 0x13
    221c:	9c 89       	ldd	r25, Y+20	; 0x14
    221e:	98 8b       	std	Y+16, r25	; 0x10
    2220:	8f 87       	std	Y+15, r24	; 0x0f
    2222:	8f 85       	ldd	r24, Y+15	; 0x0f
    2224:	98 89       	ldd	r25, Y+16	; 0x10
    2226:	01 97       	sbiw	r24, 0x01	; 1
    2228:	f1 f7       	brne	.-4      	; 0x2226 <LCD_displayCharacter+0x2e0>
    222a:	98 8b       	std	Y+16, r25	; 0x10
    222c:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    222e:	83 e0       	ldi	r24, 0x03	; 3
    2230:	64 e0       	ldi	r22, 0x04	; 4
    2232:	40 e0       	ldi	r20, 0x00	; 0
    2234:	0e 94 41 0a 	call	0x1482	; 0x1482 <GPIO_writePin>
    2238:	80 e0       	ldi	r24, 0x00	; 0
    223a:	90 e0       	ldi	r25, 0x00	; 0
    223c:	a0 e8       	ldi	r26, 0x80	; 128
    223e:	bf e3       	ldi	r27, 0x3F	; 63
    2240:	8b 87       	std	Y+11, r24	; 0x0b
    2242:	9c 87       	std	Y+12, r25	; 0x0c
    2244:	ad 87       	std	Y+13, r26	; 0x0d
    2246:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2248:	6b 85       	ldd	r22, Y+11	; 0x0b
    224a:	7c 85       	ldd	r23, Y+12	; 0x0c
    224c:	8d 85       	ldd	r24, Y+13	; 0x0d
    224e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2250:	20 e0       	ldi	r18, 0x00	; 0
    2252:	30 e0       	ldi	r19, 0x00	; 0
    2254:	4a ef       	ldi	r20, 0xFA	; 250
    2256:	54 e4       	ldi	r21, 0x44	; 68
    2258:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    225c:	dc 01       	movw	r26, r24
    225e:	cb 01       	movw	r24, r22
    2260:	8f 83       	std	Y+7, r24	; 0x07
    2262:	98 87       	std	Y+8, r25	; 0x08
    2264:	a9 87       	std	Y+9, r26	; 0x09
    2266:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2268:	6f 81       	ldd	r22, Y+7	; 0x07
    226a:	78 85       	ldd	r23, Y+8	; 0x08
    226c:	89 85       	ldd	r24, Y+9	; 0x09
    226e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2270:	20 e0       	ldi	r18, 0x00	; 0
    2272:	30 e0       	ldi	r19, 0x00	; 0
    2274:	40 e8       	ldi	r20, 0x80	; 128
    2276:	5f e3       	ldi	r21, 0x3F	; 63
    2278:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    227c:	88 23       	and	r24, r24
    227e:	2c f4       	brge	.+10     	; 0x228a <LCD_displayCharacter+0x344>
		__ticks = 1;
    2280:	81 e0       	ldi	r24, 0x01	; 1
    2282:	90 e0       	ldi	r25, 0x00	; 0
    2284:	9e 83       	std	Y+6, r25	; 0x06
    2286:	8d 83       	std	Y+5, r24	; 0x05
    2288:	3f c0       	rjmp	.+126    	; 0x2308 <LCD_displayCharacter+0x3c2>
	else if (__tmp > 65535)
    228a:	6f 81       	ldd	r22, Y+7	; 0x07
    228c:	78 85       	ldd	r23, Y+8	; 0x08
    228e:	89 85       	ldd	r24, Y+9	; 0x09
    2290:	9a 85       	ldd	r25, Y+10	; 0x0a
    2292:	20 e0       	ldi	r18, 0x00	; 0
    2294:	3f ef       	ldi	r19, 0xFF	; 255
    2296:	4f e7       	ldi	r20, 0x7F	; 127
    2298:	57 e4       	ldi	r21, 0x47	; 71
    229a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    229e:	18 16       	cp	r1, r24
    22a0:	4c f5       	brge	.+82     	; 0x22f4 <LCD_displayCharacter+0x3ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22a2:	6b 85       	ldd	r22, Y+11	; 0x0b
    22a4:	7c 85       	ldd	r23, Y+12	; 0x0c
    22a6:	8d 85       	ldd	r24, Y+13	; 0x0d
    22a8:	9e 85       	ldd	r25, Y+14	; 0x0e
    22aa:	20 e0       	ldi	r18, 0x00	; 0
    22ac:	30 e0       	ldi	r19, 0x00	; 0
    22ae:	40 e2       	ldi	r20, 0x20	; 32
    22b0:	51 e4       	ldi	r21, 0x41	; 65
    22b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22b6:	dc 01       	movw	r26, r24
    22b8:	cb 01       	movw	r24, r22
    22ba:	bc 01       	movw	r22, r24
    22bc:	cd 01       	movw	r24, r26
    22be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22c2:	dc 01       	movw	r26, r24
    22c4:	cb 01       	movw	r24, r22
    22c6:	9e 83       	std	Y+6, r25	; 0x06
    22c8:	8d 83       	std	Y+5, r24	; 0x05
    22ca:	0f c0       	rjmp	.+30     	; 0x22ea <LCD_displayCharacter+0x3a4>
    22cc:	88 ec       	ldi	r24, 0xC8	; 200
    22ce:	90 e0       	ldi	r25, 0x00	; 0
    22d0:	9c 83       	std	Y+4, r25	; 0x04
    22d2:	8b 83       	std	Y+3, r24	; 0x03
    22d4:	8b 81       	ldd	r24, Y+3	; 0x03
    22d6:	9c 81       	ldd	r25, Y+4	; 0x04
    22d8:	01 97       	sbiw	r24, 0x01	; 1
    22da:	f1 f7       	brne	.-4      	; 0x22d8 <LCD_displayCharacter+0x392>
    22dc:	9c 83       	std	Y+4, r25	; 0x04
    22de:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22e0:	8d 81       	ldd	r24, Y+5	; 0x05
    22e2:	9e 81       	ldd	r25, Y+6	; 0x06
    22e4:	01 97       	sbiw	r24, 0x01	; 1
    22e6:	9e 83       	std	Y+6, r25	; 0x06
    22e8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22ea:	8d 81       	ldd	r24, Y+5	; 0x05
    22ec:	9e 81       	ldd	r25, Y+6	; 0x06
    22ee:	00 97       	sbiw	r24, 0x00	; 0
    22f0:	69 f7       	brne	.-38     	; 0x22cc <LCD_displayCharacter+0x386>
    22f2:	14 c0       	rjmp	.+40     	; 0x231c <LCD_displayCharacter+0x3d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22f4:	6f 81       	ldd	r22, Y+7	; 0x07
    22f6:	78 85       	ldd	r23, Y+8	; 0x08
    22f8:	89 85       	ldd	r24, Y+9	; 0x09
    22fa:	9a 85       	ldd	r25, Y+10	; 0x0a
    22fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2300:	dc 01       	movw	r26, r24
    2302:	cb 01       	movw	r24, r22
    2304:	9e 83       	std	Y+6, r25	; 0x06
    2306:	8d 83       	std	Y+5, r24	; 0x05
    2308:	8d 81       	ldd	r24, Y+5	; 0x05
    230a:	9e 81       	ldd	r25, Y+6	; 0x06
    230c:	9a 83       	std	Y+2, r25	; 0x02
    230e:	89 83       	std	Y+1, r24	; 0x01
    2310:	89 81       	ldd	r24, Y+1	; 0x01
    2312:	9a 81       	ldd	r25, Y+2	; 0x02
    2314:	01 97       	sbiw	r24, 0x01	; 1
    2316:	f1 f7       	brne	.-4      	; 0x2314 <LCD_displayCharacter+0x3ce>
    2318:	9a 83       	std	Y+2, r25	; 0x02
    231a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
}
    231c:	e9 96       	adiw	r28, 0x39	; 57
    231e:	0f b6       	in	r0, 0x3f	; 63
    2320:	f8 94       	cli
    2322:	de bf       	out	0x3e, r29	; 62
    2324:	0f be       	out	0x3f, r0	; 63
    2326:	cd bf       	out	0x3d, r28	; 61
    2328:	cf 91       	pop	r28
    232a:	df 91       	pop	r29
    232c:	08 95       	ret

0000232e <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    232e:	df 93       	push	r29
    2330:	cf 93       	push	r28
    2332:	00 d0       	rcall	.+0      	; 0x2334 <LCD_displayString+0x6>
    2334:	0f 92       	push	r0
    2336:	cd b7       	in	r28, 0x3d	; 61
    2338:	de b7       	in	r29, 0x3e	; 62
    233a:	9b 83       	std	Y+3, r25	; 0x03
    233c:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    233e:	19 82       	std	Y+1, r1	; 0x01
    2340:	0e c0       	rjmp	.+28     	; 0x235e <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    2342:	89 81       	ldd	r24, Y+1	; 0x01
    2344:	28 2f       	mov	r18, r24
    2346:	30 e0       	ldi	r19, 0x00	; 0
    2348:	8a 81       	ldd	r24, Y+2	; 0x02
    234a:	9b 81       	ldd	r25, Y+3	; 0x03
    234c:	fc 01       	movw	r30, r24
    234e:	e2 0f       	add	r30, r18
    2350:	f3 1f       	adc	r31, r19
    2352:	80 81       	ld	r24, Z
    2354:	0e 94 a3 0f 	call	0x1f46	; 0x1f46 <LCD_displayCharacter>
		i++;
    2358:	89 81       	ldd	r24, Y+1	; 0x01
    235a:	8f 5f       	subi	r24, 0xFF	; 255
    235c:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    235e:	89 81       	ldd	r24, Y+1	; 0x01
    2360:	28 2f       	mov	r18, r24
    2362:	30 e0       	ldi	r19, 0x00	; 0
    2364:	8a 81       	ldd	r24, Y+2	; 0x02
    2366:	9b 81       	ldd	r25, Y+3	; 0x03
    2368:	fc 01       	movw	r30, r24
    236a:	e2 0f       	add	r30, r18
    236c:	f3 1f       	adc	r31, r19
    236e:	80 81       	ld	r24, Z
    2370:	88 23       	and	r24, r24
    2372:	39 f7       	brne	.-50     	; 0x2342 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    2374:	0f 90       	pop	r0
    2376:	0f 90       	pop	r0
    2378:	0f 90       	pop	r0
    237a:	cf 91       	pop	r28
    237c:	df 91       	pop	r29
    237e:	08 95       	ret

00002380 <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    2380:	df 93       	push	r29
    2382:	cf 93       	push	r28
    2384:	00 d0       	rcall	.+0      	; 0x2386 <LCD_moveCursor+0x6>
    2386:	00 d0       	rcall	.+0      	; 0x2388 <LCD_moveCursor+0x8>
    2388:	0f 92       	push	r0
    238a:	cd b7       	in	r28, 0x3d	; 61
    238c:	de b7       	in	r29, 0x3e	; 62
    238e:	8a 83       	std	Y+2, r24	; 0x02
    2390:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    2392:	8a 81       	ldd	r24, Y+2	; 0x02
    2394:	28 2f       	mov	r18, r24
    2396:	30 e0       	ldi	r19, 0x00	; 0
    2398:	3d 83       	std	Y+5, r19	; 0x05
    239a:	2c 83       	std	Y+4, r18	; 0x04
    239c:	8c 81       	ldd	r24, Y+4	; 0x04
    239e:	9d 81       	ldd	r25, Y+5	; 0x05
    23a0:	81 30       	cpi	r24, 0x01	; 1
    23a2:	91 05       	cpc	r25, r1
    23a4:	c1 f0       	breq	.+48     	; 0x23d6 <LCD_moveCursor+0x56>
    23a6:	2c 81       	ldd	r18, Y+4	; 0x04
    23a8:	3d 81       	ldd	r19, Y+5	; 0x05
    23aa:	22 30       	cpi	r18, 0x02	; 2
    23ac:	31 05       	cpc	r19, r1
    23ae:	2c f4       	brge	.+10     	; 0x23ba <LCD_moveCursor+0x3a>
    23b0:	8c 81       	ldd	r24, Y+4	; 0x04
    23b2:	9d 81       	ldd	r25, Y+5	; 0x05
    23b4:	00 97       	sbiw	r24, 0x00	; 0
    23b6:	61 f0       	breq	.+24     	; 0x23d0 <LCD_moveCursor+0x50>
    23b8:	19 c0       	rjmp	.+50     	; 0x23ec <LCD_moveCursor+0x6c>
    23ba:	2c 81       	ldd	r18, Y+4	; 0x04
    23bc:	3d 81       	ldd	r19, Y+5	; 0x05
    23be:	22 30       	cpi	r18, 0x02	; 2
    23c0:	31 05       	cpc	r19, r1
    23c2:	69 f0       	breq	.+26     	; 0x23de <LCD_moveCursor+0x5e>
    23c4:	8c 81       	ldd	r24, Y+4	; 0x04
    23c6:	9d 81       	ldd	r25, Y+5	; 0x05
    23c8:	83 30       	cpi	r24, 0x03	; 3
    23ca:	91 05       	cpc	r25, r1
    23cc:	61 f0       	breq	.+24     	; 0x23e6 <LCD_moveCursor+0x66>
    23ce:	0e c0       	rjmp	.+28     	; 0x23ec <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    23d0:	8b 81       	ldd	r24, Y+3	; 0x03
    23d2:	89 83       	std	Y+1, r24	; 0x01
    23d4:	0b c0       	rjmp	.+22     	; 0x23ec <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    23d6:	8b 81       	ldd	r24, Y+3	; 0x03
    23d8:	80 5c       	subi	r24, 0xC0	; 192
    23da:	89 83       	std	Y+1, r24	; 0x01
    23dc:	07 c0       	rjmp	.+14     	; 0x23ec <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    23de:	8b 81       	ldd	r24, Y+3	; 0x03
    23e0:	80 5f       	subi	r24, 0xF0	; 240
    23e2:	89 83       	std	Y+1, r24	; 0x01
    23e4:	03 c0       	rjmp	.+6      	; 0x23ec <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    23e6:	8b 81       	ldd	r24, Y+3	; 0x03
    23e8:	80 5b       	subi	r24, 0xB0	; 176
    23ea:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    23ec:	89 81       	ldd	r24, Y+1	; 0x01
    23ee:	80 68       	ori	r24, 0x80	; 128
    23f0:	0e 94 af 0d 	call	0x1b5e	; 0x1b5e <LCD_sendCommand>
}
    23f4:	0f 90       	pop	r0
    23f6:	0f 90       	pop	r0
    23f8:	0f 90       	pop	r0
    23fa:	0f 90       	pop	r0
    23fc:	0f 90       	pop	r0
    23fe:	cf 91       	pop	r28
    2400:	df 91       	pop	r29
    2402:	08 95       	ret

00002404 <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    2404:	df 93       	push	r29
    2406:	cf 93       	push	r28
    2408:	00 d0       	rcall	.+0      	; 0x240a <LCD_displayStringRowColumn+0x6>
    240a:	00 d0       	rcall	.+0      	; 0x240c <LCD_displayStringRowColumn+0x8>
    240c:	cd b7       	in	r28, 0x3d	; 61
    240e:	de b7       	in	r29, 0x3e	; 62
    2410:	89 83       	std	Y+1, r24	; 0x01
    2412:	6a 83       	std	Y+2, r22	; 0x02
    2414:	5c 83       	std	Y+4, r21	; 0x04
    2416:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    2418:	89 81       	ldd	r24, Y+1	; 0x01
    241a:	6a 81       	ldd	r22, Y+2	; 0x02
    241c:	0e 94 c0 11 	call	0x2380	; 0x2380 <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    2420:	8b 81       	ldd	r24, Y+3	; 0x03
    2422:	9c 81       	ldd	r25, Y+4	; 0x04
    2424:	0e 94 97 11 	call	0x232e	; 0x232e <LCD_displayString>
}
    2428:	0f 90       	pop	r0
    242a:	0f 90       	pop	r0
    242c:	0f 90       	pop	r0
    242e:	0f 90       	pop	r0
    2430:	cf 91       	pop	r28
    2432:	df 91       	pop	r29
    2434:	08 95       	ret

00002436 <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    2436:	df 93       	push	r29
    2438:	cf 93       	push	r28
    243a:	cd b7       	in	r28, 0x3d	; 61
    243c:	de b7       	in	r29, 0x3e	; 62
    243e:	62 97       	sbiw	r28, 0x12	; 18
    2440:	0f b6       	in	r0, 0x3f	; 63
    2442:	f8 94       	cli
    2444:	de bf       	out	0x3e, r29	; 62
    2446:	0f be       	out	0x3f, r0	; 63
    2448:	cd bf       	out	0x3d, r28	; 61
    244a:	9a 8b       	std	Y+18, r25	; 0x12
    244c:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    244e:	89 89       	ldd	r24, Y+17	; 0x11
    2450:	9a 89       	ldd	r25, Y+18	; 0x12
    2452:	9e 01       	movw	r18, r28
    2454:	2f 5f       	subi	r18, 0xFF	; 255
    2456:	3f 4f       	sbci	r19, 0xFF	; 255
    2458:	b9 01       	movw	r22, r18
    245a:	4a e0       	ldi	r20, 0x0A	; 10
    245c:	50 e0       	ldi	r21, 0x00	; 0
    245e:	0e 94 ee 15 	call	0x2bdc	; 0x2bdc <itoa>
   LCD_displayString(buff); /* Display the string */
    2462:	ce 01       	movw	r24, r28
    2464:	01 96       	adiw	r24, 0x01	; 1
    2466:	0e 94 97 11 	call	0x232e	; 0x232e <LCD_displayString>
}
    246a:	62 96       	adiw	r28, 0x12	; 18
    246c:	0f b6       	in	r0, 0x3f	; 63
    246e:	f8 94       	cli
    2470:	de bf       	out	0x3e, r29	; 62
    2472:	0f be       	out	0x3f, r0	; 63
    2474:	cd bf       	out	0x3d, r28	; 61
    2476:	cf 91       	pop	r28
    2478:	df 91       	pop	r29
    247a:	08 95       	ret

0000247c <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    247c:	df 93       	push	r29
    247e:	cf 93       	push	r28
    2480:	cd b7       	in	r28, 0x3d	; 61
    2482:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    2484:	81 e0       	ldi	r24, 0x01	; 1
    2486:	0e 94 af 0d 	call	0x1b5e	; 0x1b5e <LCD_sendCommand>
}
    248a:	cf 91       	pop	r28
    248c:	df 91       	pop	r29
    248e:	08 95       	ret

00002490 <__vector_9>:
/*******************************************************************************
 *                       Interrupt Service Routines                            *
 *******************************************************************************/

/*Timer0 overflow mode ISR*/
ISR (TIMER0_OVF_vect) {
    2490:	1f 92       	push	r1
    2492:	0f 92       	push	r0
    2494:	0f b6       	in	r0, 0x3f	; 63
    2496:	0f 92       	push	r0
    2498:	11 24       	eor	r1, r1
    249a:	2f 93       	push	r18
    249c:	3f 93       	push	r19
    249e:	4f 93       	push	r20
    24a0:	5f 93       	push	r21
    24a2:	6f 93       	push	r22
    24a4:	7f 93       	push	r23
    24a6:	8f 93       	push	r24
    24a8:	9f 93       	push	r25
    24aa:	af 93       	push	r26
    24ac:	bf 93       	push	r27
    24ae:	ef 93       	push	r30
    24b0:	ff 93       	push	r31
    24b2:	df 93       	push	r29
    24b4:	cf 93       	push	r28
    24b6:	cd b7       	in	r28, 0x3d	; 61
    24b8:	de b7       	in	r29, 0x3e	; 62
	/* Call the Call Back function in the application after the overflow */
	if (timer_callBackPtr != NULL_PTR) {
    24ba:	80 91 66 01 	lds	r24, 0x0166
    24be:	90 91 67 01 	lds	r25, 0x0167
    24c2:	00 97       	sbiw	r24, 0x00	; 0
    24c4:	29 f0       	breq	.+10     	; 0x24d0 <__vector_9+0x40>
		timer_callBackPtr();
    24c6:	e0 91 66 01 	lds	r30, 0x0166
    24ca:	f0 91 67 01 	lds	r31, 0x0167
    24ce:	09 95       	icall
	}
}
    24d0:	cf 91       	pop	r28
    24d2:	df 91       	pop	r29
    24d4:	ff 91       	pop	r31
    24d6:	ef 91       	pop	r30
    24d8:	bf 91       	pop	r27
    24da:	af 91       	pop	r26
    24dc:	9f 91       	pop	r25
    24de:	8f 91       	pop	r24
    24e0:	7f 91       	pop	r23
    24e2:	6f 91       	pop	r22
    24e4:	5f 91       	pop	r21
    24e6:	4f 91       	pop	r20
    24e8:	3f 91       	pop	r19
    24ea:	2f 91       	pop	r18
    24ec:	0f 90       	pop	r0
    24ee:	0f be       	out	0x3f, r0	; 63
    24f0:	0f 90       	pop	r0
    24f2:	1f 90       	pop	r1
    24f4:	18 95       	reti

000024f6 <__vector_19>:

/*Timer0 compare match mode ISR*/
ISR (TIMER0_COMP_vect)
{
    24f6:	1f 92       	push	r1
    24f8:	0f 92       	push	r0
    24fa:	0f b6       	in	r0, 0x3f	; 63
    24fc:	0f 92       	push	r0
    24fe:	11 24       	eor	r1, r1
    2500:	2f 93       	push	r18
    2502:	3f 93       	push	r19
    2504:	4f 93       	push	r20
    2506:	5f 93       	push	r21
    2508:	6f 93       	push	r22
    250a:	7f 93       	push	r23
    250c:	8f 93       	push	r24
    250e:	9f 93       	push	r25
    2510:	af 93       	push	r26
    2512:	bf 93       	push	r27
    2514:	ef 93       	push	r30
    2516:	ff 93       	push	r31
    2518:	df 93       	push	r29
    251a:	cf 93       	push	r28
    251c:	cd b7       	in	r28, 0x3d	; 61
    251e:	de b7       	in	r29, 0x3e	; 62
	/* Call the Call Back function in the application after the compare match */

	if (timer_callBackPtr != NULL_PTR) {
    2520:	80 91 66 01 	lds	r24, 0x0166
    2524:	90 91 67 01 	lds	r25, 0x0167
    2528:	00 97       	sbiw	r24, 0x00	; 0
    252a:	29 f0       	breq	.+10     	; 0x2536 <__vector_19+0x40>
		timer_callBackPtr();
    252c:	e0 91 66 01 	lds	r30, 0x0166
    2530:	f0 91 67 01 	lds	r31, 0x0167
    2534:	09 95       	icall
	}
}
    2536:	cf 91       	pop	r28
    2538:	df 91       	pop	r29
    253a:	ff 91       	pop	r31
    253c:	ef 91       	pop	r30
    253e:	bf 91       	pop	r27
    2540:	af 91       	pop	r26
    2542:	9f 91       	pop	r25
    2544:	8f 91       	pop	r24
    2546:	7f 91       	pop	r23
    2548:	6f 91       	pop	r22
    254a:	5f 91       	pop	r21
    254c:	4f 91       	pop	r20
    254e:	3f 91       	pop	r19
    2550:	2f 91       	pop	r18
    2552:	0f 90       	pop	r0
    2554:	0f be       	out	0x3f, r0	; 63
    2556:	0f 90       	pop	r0
    2558:	1f 90       	pop	r1
    255a:	18 95       	reti

0000255c <TIMER_init>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

 /*Configure timer parameters and start it */
void TIMER_init(TIMER_configType *timer_config) {
    255c:	df 93       	push	r29
    255e:	cf 93       	push	r28
    2560:	00 d0       	rcall	.+0      	; 0x2562 <TIMER_init+0x6>
    2562:	cd b7       	in	r28, 0x3d	; 61
    2564:	de b7       	in	r29, 0x3e	; 62
    2566:	9a 83       	std	Y+2, r25	; 0x02
    2568:	89 83       	std	Y+1, r24	; 0x01
	TCNT0 = timer_config->initial_value; /* Set Timer initial value */
    256a:	a2 e5       	ldi	r26, 0x52	; 82
    256c:	b0 e0       	ldi	r27, 0x00	; 0
    256e:	e9 81       	ldd	r30, Y+1	; 0x01
    2570:	fa 81       	ldd	r31, Y+2	; 0x02
    2572:	82 81       	ldd	r24, Z+2	; 0x02
    2574:	8c 93       	st	X, r24
	OCR0 = timer_config->compare_value; /* Set Timer compare value  */
    2576:	ac e5       	ldi	r26, 0x5C	; 92
    2578:	b0 e0       	ldi	r27, 0x00	; 0
    257a:	e9 81       	ldd	r30, Y+1	; 0x01
    257c:	fa 81       	ldd	r31, Y+2	; 0x02
    257e:	83 81       	ldd	r24, Z+3	; 0x03
    2580:	8c 93       	st	X, r24
	TIMSK = (TIMSK & 0xFC) | timer_config->mode; /* Enabling interrupts */
    2582:	a9 e5       	ldi	r26, 0x59	; 89
    2584:	b0 e0       	ldi	r27, 0x00	; 0
    2586:	e9 e5       	ldi	r30, 0x59	; 89
    2588:	f0 e0       	ldi	r31, 0x00	; 0
    258a:	80 81       	ld	r24, Z
    258c:	98 2f       	mov	r25, r24
    258e:	9c 7f       	andi	r25, 0xFC	; 252
    2590:	e9 81       	ldd	r30, Y+1	; 0x01
    2592:	fa 81       	ldd	r31, Y+2	; 0x02
    2594:	80 81       	ld	r24, Z
    2596:	89 2b       	or	r24, r25
    2598:	8c 93       	st	X, r24
	TCCR0 = (1 << FOC0);  /* Non PWM mode FOC0=1 */
    259a:	e3 e5       	ldi	r30, 0x53	; 83
    259c:	f0 e0       	ldi	r31, 0x00	; 0
    259e:	80 e8       	ldi	r24, 0x80	; 128
    25a0:	80 83       	st	Z, r24
	if (timer_config->mode == CTC_MODE) /* Set Timer mode (overflow or ctc)*/
    25a2:	e9 81       	ldd	r30, Y+1	; 0x01
    25a4:	fa 81       	ldd	r31, Y+2	; 0x02
    25a6:	80 81       	ld	r24, Z
    25a8:	82 30       	cpi	r24, 0x02	; 2
    25aa:	39 f4       	brne	.+14     	; 0x25ba <TIMER_init+0x5e>
		SET_BIT(TCCR0, WGM01);
    25ac:	a3 e5       	ldi	r26, 0x53	; 83
    25ae:	b0 e0       	ldi	r27, 0x00	; 0
    25b0:	e3 e5       	ldi	r30, 0x53	; 83
    25b2:	f0 e0       	ldi	r31, 0x00	; 0
    25b4:	80 81       	ld	r24, Z
    25b6:	88 60       	ori	r24, 0x08	; 8
    25b8:	8c 93       	st	X, r24
	TCCR0 |= timer_config->clock | (timer_config->oc_pin << 4); /*Configuring prescaler and oc0 pin */
    25ba:	a3 e5       	ldi	r26, 0x53	; 83
    25bc:	b0 e0       	ldi	r27, 0x00	; 0
    25be:	e3 e5       	ldi	r30, 0x53	; 83
    25c0:	f0 e0       	ldi	r31, 0x00	; 0
    25c2:	80 81       	ld	r24, Z
    25c4:	28 2f       	mov	r18, r24
    25c6:	e9 81       	ldd	r30, Y+1	; 0x01
    25c8:	fa 81       	ldd	r31, Y+2	; 0x02
    25ca:	81 81       	ldd	r24, Z+1	; 0x01
    25cc:	38 2f       	mov	r19, r24
    25ce:	e9 81       	ldd	r30, Y+1	; 0x01
    25d0:	fa 81       	ldd	r31, Y+2	; 0x02
    25d2:	84 81       	ldd	r24, Z+4	; 0x04
    25d4:	88 2f       	mov	r24, r24
    25d6:	90 e0       	ldi	r25, 0x00	; 0
    25d8:	82 95       	swap	r24
    25da:	92 95       	swap	r25
    25dc:	90 7f       	andi	r25, 0xF0	; 240
    25de:	98 27       	eor	r25, r24
    25e0:	80 7f       	andi	r24, 0xF0	; 240
    25e2:	98 27       	eor	r25, r24
    25e4:	83 2b       	or	r24, r19
    25e6:	82 2b       	or	r24, r18
    25e8:	8c 93       	st	X, r24
}
    25ea:	0f 90       	pop	r0
    25ec:	0f 90       	pop	r0
    25ee:	cf 91       	pop	r28
    25f0:	df 91       	pop	r29
    25f2:	08 95       	ret

000025f4 <TIMER_setCallBack>:

/*Setting timer callback function*/
void TIMER_setCallBack(void (*a_ptr)(void)) {
    25f4:	df 93       	push	r29
    25f6:	cf 93       	push	r28
    25f8:	00 d0       	rcall	.+0      	; 0x25fa <TIMER_setCallBack+0x6>
    25fa:	cd b7       	in	r28, 0x3d	; 61
    25fc:	de b7       	in	r29, 0x3e	; 62
    25fe:	9a 83       	std	Y+2, r25	; 0x02
    2600:	89 83       	std	Y+1, r24	; 0x01
	timer_callBackPtr = a_ptr;
    2602:	89 81       	ldd	r24, Y+1	; 0x01
    2604:	9a 81       	ldd	r25, Y+2	; 0x02
    2606:	90 93 67 01 	sts	0x0167, r25
    260a:	80 93 66 01 	sts	0x0166, r24
}
    260e:	0f 90       	pop	r0
    2610:	0f 90       	pop	r0
    2612:	cf 91       	pop	r28
    2614:	df 91       	pop	r29
    2616:	08 95       	ret

00002618 <TIMER_DeInit>:

/*Stopping timer and clearing timer registers*/
void TIMER_DeInit(void) {
    2618:	df 93       	push	r29
    261a:	cf 93       	push	r28
    261c:	cd b7       	in	r28, 0x3d	; 61
    261e:	de b7       	in	r29, 0x3e	; 62
	TCCR0 = 0;
    2620:	e3 e5       	ldi	r30, 0x53	; 83
    2622:	f0 e0       	ldi	r31, 0x00	; 0
    2624:	10 82       	st	Z, r1
	TCNT0 = 0;
    2626:	e2 e5       	ldi	r30, 0x52	; 82
    2628:	f0 e0       	ldi	r31, 0x00	; 0
    262a:	10 82       	st	Z, r1
	OCR0 = 0;
    262c:	ec e5       	ldi	r30, 0x5C	; 92
    262e:	f0 e0       	ldi	r31, 0x00	; 0
    2630:	10 82       	st	Z, r1
	TIMSK = (TIMSK & 0xFC);
    2632:	a9 e5       	ldi	r26, 0x59	; 89
    2634:	b0 e0       	ldi	r27, 0x00	; 0
    2636:	e9 e5       	ldi	r30, 0x59	; 89
    2638:	f0 e0       	ldi	r31, 0x00	; 0
    263a:	80 81       	ld	r24, Z
    263c:	8c 7f       	andi	r24, 0xFC	; 252
    263e:	8c 93       	st	X, r24
}
    2640:	cf 91       	pop	r28
    2642:	df 91       	pop	r29
    2644:	08 95       	ret

00002646 <delay_millis>:

/*function that process the time after each interrupt*/

static void time_processing(void);

void delay_millis(uint32 time) {
    2646:	df 93       	push	r29
    2648:	cf 93       	push	r28
    264a:	cd b7       	in	r28, 0x3d	; 61
    264c:	de b7       	in	r29, 0x3e	; 62
    264e:	66 97       	sbiw	r28, 0x16	; 22
    2650:	0f b6       	in	r0, 0x3f	; 63
    2652:	f8 94       	cli
    2654:	de bf       	out	0x3e, r29	; 62
    2656:	0f be       	out	0x3f, r0	; 63
    2658:	cd bf       	out	0x3d, r28	; 61
    265a:	6e 87       	std	Y+14, r22	; 0x0e
    265c:	7f 87       	std	Y+15, r23	; 0x0f
    265e:	88 8b       	std	Y+16, r24	; 0x10
    2660:	99 8b       	std	Y+17, r25	; 0x11
	/* Configuring timer to work in the normal mode with 1024 prescaler starting from 0 */
	TIMER_configType TIMER_config = { NORMAL_MODE, F_CPU_1024, 0, 0,
			NORMAL_OC_PIN };
    2662:	ce 01       	movw	r24, r28
    2664:	09 96       	adiw	r24, 0x09	; 9
    2666:	9b 8b       	std	Y+19, r25	; 0x13
    2668:	8a 8b       	std	Y+18, r24	; 0x12
    266a:	e1 e6       	ldi	r30, 0x61	; 97
    266c:	f1 e0       	ldi	r31, 0x01	; 1
    266e:	fd 8b       	std	Y+21, r31	; 0x15
    2670:	ec 8b       	std	Y+20, r30	; 0x14
    2672:	f5 e0       	ldi	r31, 0x05	; 5
    2674:	fe 8b       	std	Y+22, r31	; 0x16
    2676:	ec 89       	ldd	r30, Y+20	; 0x14
    2678:	fd 89       	ldd	r31, Y+21	; 0x15
    267a:	00 80       	ld	r0, Z
    267c:	8c 89       	ldd	r24, Y+20	; 0x14
    267e:	9d 89       	ldd	r25, Y+21	; 0x15
    2680:	01 96       	adiw	r24, 0x01	; 1
    2682:	9d 8b       	std	Y+21, r25	; 0x15
    2684:	8c 8b       	std	Y+20, r24	; 0x14
    2686:	ea 89       	ldd	r30, Y+18	; 0x12
    2688:	fb 89       	ldd	r31, Y+19	; 0x13
    268a:	00 82       	st	Z, r0
    268c:	8a 89       	ldd	r24, Y+18	; 0x12
    268e:	9b 89       	ldd	r25, Y+19	; 0x13
    2690:	01 96       	adiw	r24, 0x01	; 1
    2692:	9b 8b       	std	Y+19, r25	; 0x13
    2694:	8a 8b       	std	Y+18, r24	; 0x12
    2696:	9e 89       	ldd	r25, Y+22	; 0x16
    2698:	91 50       	subi	r25, 0x01	; 1
    269a:	9e 8b       	std	Y+22, r25	; 0x16
    269c:	ee 89       	ldd	r30, Y+22	; 0x16
    269e:	ee 23       	and	r30, r30
    26a0:	51 f7       	brne	.-44     	; 0x2676 <delay_millis+0x30>
	uint32 tik_time,max_tiks;
	/* Calculating the time of one overflow */
	tik_time = ((float)1024 / F_CPU) * 256 * 1000;
    26a2:	80 e2       	ldi	r24, 0x20	; 32
    26a4:	90 e0       	ldi	r25, 0x00	; 0
    26a6:	a0 e0       	ldi	r26, 0x00	; 0
    26a8:	b0 e0       	ldi	r27, 0x00	; 0
    26aa:	8d 83       	std	Y+5, r24	; 0x05
    26ac:	9e 83       	std	Y+6, r25	; 0x06
    26ae:	af 83       	std	Y+7, r26	; 0x07
    26b0:	b8 87       	std	Y+8, r27	; 0x08
	/* Resetting the number of overflows */
	tik = 0;
    26b2:	10 92 68 01 	sts	0x0168, r1
    26b6:	10 92 69 01 	sts	0x0169, r1
    26ba:	10 92 6a 01 	sts	0x016A, r1
    26be:	10 92 6b 01 	sts	0x016B, r1
	/*Calculating needed number of overflows to achieve given polling time*/
	max_tiks=time/tik_time;
    26c2:	8e 85       	ldd	r24, Y+14	; 0x0e
    26c4:	9f 85       	ldd	r25, Y+15	; 0x0f
    26c6:	a8 89       	ldd	r26, Y+16	; 0x10
    26c8:	b9 89       	ldd	r27, Y+17	; 0x11
    26ca:	2d 81       	ldd	r18, Y+5	; 0x05
    26cc:	3e 81       	ldd	r19, Y+6	; 0x06
    26ce:	4f 81       	ldd	r20, Y+7	; 0x07
    26d0:	58 85       	ldd	r21, Y+8	; 0x08
    26d2:	bc 01       	movw	r22, r24
    26d4:	cd 01       	movw	r24, r26
    26d6:	0e 94 95 15 	call	0x2b2a	; 0x2b2a <__udivmodsi4>
    26da:	da 01       	movw	r26, r20
    26dc:	c9 01       	movw	r24, r18
    26de:	89 83       	std	Y+1, r24	; 0x01
    26e0:	9a 83       	std	Y+2, r25	; 0x02
    26e2:	ab 83       	std	Y+3, r26	; 0x03
    26e4:	bc 83       	std	Y+4, r27	; 0x04
	/*Setting timer callback function*/
	TIMER_setCallBack(&time_processing);
    26e6:	87 e9       	ldi	r24, 0x97	; 151
    26e8:	93 e1       	ldi	r25, 0x13	; 19
    26ea:	0e 94 fa 12 	call	0x25f4	; 0x25f4 <TIMER_setCallBack>
	/*Initiating timer to begin counting*/
	TIMER_init(&TIMER_config);
    26ee:	ce 01       	movw	r24, r28
    26f0:	09 96       	adiw	r24, 0x09	; 9
    26f2:	0e 94 ae 12 	call	0x255c	; 0x255c <TIMER_init>
	while (tik < max_tiks) {
    26f6:	20 91 68 01 	lds	r18, 0x0168
    26fa:	30 91 69 01 	lds	r19, 0x0169
    26fe:	40 91 6a 01 	lds	r20, 0x016A
    2702:	50 91 6b 01 	lds	r21, 0x016B
    2706:	89 81       	ldd	r24, Y+1	; 0x01
    2708:	9a 81       	ldd	r25, Y+2	; 0x02
    270a:	ab 81       	ldd	r26, Y+3	; 0x03
    270c:	bc 81       	ldd	r27, Y+4	; 0x04
    270e:	28 17       	cp	r18, r24
    2710:	39 07       	cpc	r19, r25
    2712:	4a 07       	cpc	r20, r26
    2714:	5b 07       	cpc	r21, r27
    2716:	78 f3       	brcs	.-34     	; 0x26f6 <delay_millis+0xb0>


	}

	/*Stopping timer and clearing timer registers*/
	TIMER_DeInit();
    2718:	0e 94 0c 13 	call	0x2618	; 0x2618 <TIMER_DeInit>
}
    271c:	66 96       	adiw	r28, 0x16	; 22
    271e:	0f b6       	in	r0, 0x3f	; 63
    2720:	f8 94       	cli
    2722:	de bf       	out	0x3e, r29	; 62
    2724:	0f be       	out	0x3f, r0	; 63
    2726:	cd bf       	out	0x3d, r28	; 61
    2728:	cf 91       	pop	r28
    272a:	df 91       	pop	r29
    272c:	08 95       	ret

0000272e <time_processing>:

static void time_processing(void) {
    272e:	df 93       	push	r29
    2730:	cf 93       	push	r28
    2732:	cd b7       	in	r28, 0x3d	; 61
    2734:	de b7       	in	r29, 0x3e	; 62
	tik++;
    2736:	80 91 68 01 	lds	r24, 0x0168
    273a:	90 91 69 01 	lds	r25, 0x0169
    273e:	a0 91 6a 01 	lds	r26, 0x016A
    2742:	b0 91 6b 01 	lds	r27, 0x016B
    2746:	01 96       	adiw	r24, 0x01	; 1
    2748:	a1 1d       	adc	r26, r1
    274a:	b1 1d       	adc	r27, r1
    274c:	80 93 68 01 	sts	0x0168, r24
    2750:	90 93 69 01 	sts	0x0169, r25
    2754:	a0 93 6a 01 	sts	0x016A, r26
    2758:	b0 93 6b 01 	sts	0x016B, r27
}
    275c:	cf 91       	pop	r28
    275e:	df 91       	pop	r29
    2760:	08 95       	ret

00002762 <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */

void UART_init(UART_configType *UART_config) {
    2762:	df 93       	push	r29
    2764:	cf 93       	push	r28
    2766:	00 d0       	rcall	.+0      	; 0x2768 <UART_init+0x6>
    2768:	00 d0       	rcall	.+0      	; 0x276a <UART_init+0x8>
    276a:	cd b7       	in	r28, 0x3d	; 61
    276c:	de b7       	in	r29, 0x3e	; 62
    276e:	9c 83       	std	Y+4, r25	; 0x04
    2770:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    2772:	1a 82       	std	Y+2, r1	; 0x02
    2774:	19 82       	std	Y+1, r1	; 0x01
	char_size = UART_config->char_size;
    2776:	eb 81       	ldd	r30, Y+3	; 0x03
    2778:	fc 81       	ldd	r31, Y+4	; 0x04
    277a:	81 81       	ldd	r24, Z+1	; 0x01
    277c:	80 93 6c 01 	sts	0x016C, r24
	/* U2X = 1 for double transmission speed */
	UCSRA = (1 << U2X);
    2780:	eb e2       	ldi	r30, 0x2B	; 43
    2782:	f0 e0       	ldi	r31, 0x00	; 0
    2784:	82 e0       	ldi	r24, 0x02	; 2
    2786:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 1 For 9-bit data mode only
	 * RXB8 & TXB8 used for 9-bit data mode only
	 ***********************************************************************/
	UCSRB = (1 << RXEN) | (1 << TXEN);
    2788:	ea e2       	ldi	r30, 0x2A	; 42
    278a:	f0 e0       	ldi	r31, 0x00	; 0
    278c:	88 e1       	ldi	r24, 0x18	; 24
    278e:	80 83       	st	Z, r24
	UCSRB |= (UART_config->interrupt_mode << 5);
    2790:	aa e2       	ldi	r26, 0x2A	; 42
    2792:	b0 e0       	ldi	r27, 0x00	; 0
    2794:	ea e2       	ldi	r30, 0x2A	; 42
    2796:	f0 e0       	ldi	r31, 0x00	; 0
    2798:	80 81       	ld	r24, Z
    279a:	28 2f       	mov	r18, r24
    279c:	eb 81       	ldd	r30, Y+3	; 0x03
    279e:	fc 81       	ldd	r31, Y+4	; 0x04
    27a0:	83 81       	ldd	r24, Z+3	; 0x03
    27a2:	88 2f       	mov	r24, r24
    27a4:	90 e0       	ldi	r25, 0x00	; 0
    27a6:	88 0f       	add	r24, r24
    27a8:	99 1f       	adc	r25, r25
    27aa:	82 95       	swap	r24
    27ac:	92 95       	swap	r25
    27ae:	90 7f       	andi	r25, 0xF0	; 240
    27b0:	98 27       	eor	r25, r24
    27b2:	80 7f       	andi	r24, 0xF0	; 240
    27b4:	98 27       	eor	r25, r24
    27b6:	82 2b       	or	r24, r18
    27b8:	8c 93       	st	X, r24

	/* Configuring UCSZ2 bit */
	UCSRB |= (UART_config->char_size & 0b100);
    27ba:	aa e2       	ldi	r26, 0x2A	; 42
    27bc:	b0 e0       	ldi	r27, 0x00	; 0
    27be:	ea e2       	ldi	r30, 0x2A	; 42
    27c0:	f0 e0       	ldi	r31, 0x00	; 0
    27c2:	80 81       	ld	r24, Z
    27c4:	98 2f       	mov	r25, r24
    27c6:	eb 81       	ldd	r30, Y+3	; 0x03
    27c8:	fc 81       	ldd	r31, Y+4	; 0x04
    27ca:	81 81       	ldd	r24, Z+1	; 0x01
    27cc:	84 70       	andi	r24, 0x04	; 4
    27ce:	89 2b       	or	r24, r25
    27d0:	8c 93       	st	X, r24
	 * UPM1:0  used to specify parity mode
	 * USBS    used to specify one or 2 stop bits
	 * UCSZ1:0 used to specify character size along with UCSZ2 bit in UCSRA register
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/
	UCSRC = (1 << URSEL);
    27d2:	e0 e4       	ldi	r30, 0x40	; 64
    27d4:	f0 e0       	ldi	r31, 0x00	; 0
    27d6:	80 e8       	ldi	r24, 0x80	; 128
    27d8:	80 83       	st	Z, r24
	UCSRC |= (UART_config->parity_mode << 4) | (UART_config->stop_bit << 3)
    27da:	a0 e4       	ldi	r26, 0x40	; 64
    27dc:	b0 e0       	ldi	r27, 0x00	; 0
    27de:	e0 e4       	ldi	r30, 0x40	; 64
    27e0:	f0 e0       	ldi	r31, 0x00	; 0
    27e2:	80 81       	ld	r24, Z
    27e4:	38 2f       	mov	r19, r24
    27e6:	eb 81       	ldd	r30, Y+3	; 0x03
    27e8:	fc 81       	ldd	r31, Y+4	; 0x04
    27ea:	82 81       	ldd	r24, Z+2	; 0x02
    27ec:	88 2f       	mov	r24, r24
    27ee:	90 e0       	ldi	r25, 0x00	; 0
    27f0:	82 95       	swap	r24
    27f2:	92 95       	swap	r25
    27f4:	90 7f       	andi	r25, 0xF0	; 240
    27f6:	98 27       	eor	r25, r24
    27f8:	80 7f       	andi	r24, 0xF0	; 240
    27fa:	98 27       	eor	r25, r24
    27fc:	28 2f       	mov	r18, r24
    27fe:	eb 81       	ldd	r30, Y+3	; 0x03
    2800:	fc 81       	ldd	r31, Y+4	; 0x04
    2802:	80 81       	ld	r24, Z
    2804:	88 2f       	mov	r24, r24
    2806:	90 e0       	ldi	r25, 0x00	; 0
    2808:	88 0f       	add	r24, r24
    280a:	99 1f       	adc	r25, r25
    280c:	88 0f       	add	r24, r24
    280e:	99 1f       	adc	r25, r25
    2810:	88 0f       	add	r24, r24
    2812:	99 1f       	adc	r25, r25
    2814:	28 2b       	or	r18, r24
    2816:	eb 81       	ldd	r30, Y+3	; 0x03
    2818:	fc 81       	ldd	r31, Y+4	; 0x04
    281a:	81 81       	ldd	r24, Z+1	; 0x01
    281c:	88 2f       	mov	r24, r24
    281e:	90 e0       	ldi	r25, 0x00	; 0
    2820:	83 70       	andi	r24, 0x03	; 3
    2822:	90 70       	andi	r25, 0x00	; 0
    2824:	88 0f       	add	r24, r24
    2826:	99 1f       	adc	r25, r25
    2828:	82 2b       	or	r24, r18
    282a:	83 2b       	or	r24, r19
    282c:	8c 93       	st	X, r24
			| ((UART_config->char_size & 0b011) << 1);

	/* Calculate the UBRR register value */
	ubrr_value = (uint16) (((F_CPU / (UART_config->baud_rate * 8UL))) - 1);
    282e:	eb 81       	ldd	r30, Y+3	; 0x03
    2830:	fc 81       	ldd	r31, Y+4	; 0x04
    2832:	84 81       	ldd	r24, Z+4	; 0x04
    2834:	95 81       	ldd	r25, Z+5	; 0x05
    2836:	a6 81       	ldd	r26, Z+6	; 0x06
    2838:	b7 81       	ldd	r27, Z+7	; 0x07
    283a:	88 0f       	add	r24, r24
    283c:	99 1f       	adc	r25, r25
    283e:	aa 1f       	adc	r26, r26
    2840:	bb 1f       	adc	r27, r27
    2842:	88 0f       	add	r24, r24
    2844:	99 1f       	adc	r25, r25
    2846:	aa 1f       	adc	r26, r26
    2848:	bb 1f       	adc	r27, r27
    284a:	88 0f       	add	r24, r24
    284c:	99 1f       	adc	r25, r25
    284e:	aa 1f       	adc	r26, r26
    2850:	bb 1f       	adc	r27, r27
    2852:	9c 01       	movw	r18, r24
    2854:	ad 01       	movw	r20, r26
    2856:	80 e0       	ldi	r24, 0x00	; 0
    2858:	92 e1       	ldi	r25, 0x12	; 18
    285a:	aa e7       	ldi	r26, 0x7A	; 122
    285c:	b0 e0       	ldi	r27, 0x00	; 0
    285e:	bc 01       	movw	r22, r24
    2860:	cd 01       	movw	r24, r26
    2862:	0e 94 95 15 	call	0x2b2a	; 0x2b2a <__udivmodsi4>
    2866:	da 01       	movw	r26, r20
    2868:	c9 01       	movw	r24, r18
    286a:	01 97       	sbiw	r24, 0x01	; 1
    286c:	9a 83       	std	Y+2, r25	; 0x02
    286e:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value >> 8;
    2870:	e0 e4       	ldi	r30, 0x40	; 64
    2872:	f0 e0       	ldi	r31, 0x00	; 0
    2874:	89 81       	ldd	r24, Y+1	; 0x01
    2876:	9a 81       	ldd	r25, Y+2	; 0x02
    2878:	89 2f       	mov	r24, r25
    287a:	99 27       	eor	r25, r25
    287c:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    287e:	e9 e2       	ldi	r30, 0x29	; 41
    2880:	f0 e0       	ldi	r31, 0x00	; 0
    2882:	89 81       	ldd	r24, Y+1	; 0x01
    2884:	80 83       	st	Z, r24
}
    2886:	0f 90       	pop	r0
    2888:	0f 90       	pop	r0
    288a:	0f 90       	pop	r0
    288c:	0f 90       	pop	r0
    288e:	cf 91       	pop	r28
    2890:	df 91       	pop	r29
    2892:	08 95       	ret

00002894 <UART_sendByte>:

/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint16 data) {
    2894:	df 93       	push	r29
    2896:	cf 93       	push	r28
    2898:	00 d0       	rcall	.+0      	; 0x289a <UART_sendByte+0x6>
    289a:	cd b7       	in	r28, 0x3d	; 61
    289c:	de b7       	in	r29, 0x3e	; 62
    289e:	9a 83       	std	Y+2, r25	; 0x02
    28a0:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while (BIT_IS_CLEAR(UCSRA, UDRE)) {
    28a2:	eb e2       	ldi	r30, 0x2B	; 43
    28a4:	f0 e0       	ldi	r31, 0x00	; 0
    28a6:	80 81       	ld	r24, Z
    28a8:	88 2f       	mov	r24, r24
    28aa:	90 e0       	ldi	r25, 0x00	; 0
    28ac:	80 72       	andi	r24, 0x20	; 32
    28ae:	90 70       	andi	r25, 0x00	; 0
    28b0:	00 97       	sbiw	r24, 0x00	; 0
    28b2:	b9 f3       	breq	.-18     	; 0x28a2 <UART_sendByte+0xe>
	/*
	 * Put the required data in the UDR register and in case character size is 9 bits put the MSB in UCSRB
	 *  and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    28b4:	ec e2       	ldi	r30, 0x2C	; 44
    28b6:	f0 e0       	ldi	r31, 0x00	; 0
    28b8:	89 81       	ldd	r24, Y+1	; 0x01
    28ba:	80 83       	st	Z, r24
	if (char_size == CHAR_SIZE_9) {
    28bc:	80 91 6c 01 	lds	r24, 0x016C
    28c0:	87 30       	cpi	r24, 0x07	; 7
    28c2:	69 f4       	brne	.+26     	; 0x28de <UART_sendByte+0x4a>
		UCSRB = (UCSRB & 0xFE) | (data >> 8);
    28c4:	aa e2       	ldi	r26, 0x2A	; 42
    28c6:	b0 e0       	ldi	r27, 0x00	; 0
    28c8:	ea e2       	ldi	r30, 0x2A	; 42
    28ca:	f0 e0       	ldi	r31, 0x00	; 0
    28cc:	80 81       	ld	r24, Z
    28ce:	28 2f       	mov	r18, r24
    28d0:	2e 7f       	andi	r18, 0xFE	; 254
    28d2:	89 81       	ldd	r24, Y+1	; 0x01
    28d4:	9a 81       	ldd	r25, Y+2	; 0x02
    28d6:	89 2f       	mov	r24, r25
    28d8:	99 27       	eor	r25, r25
    28da:	82 2b       	or	r24, r18
    28dc:	8c 93       	st	X, r24
	}

}
    28de:	0f 90       	pop	r0
    28e0:	0f 90       	pop	r0
    28e2:	cf 91       	pop	r28
    28e4:	df 91       	pop	r29
    28e6:	08 95       	ret

000028e8 <UART_recieveByte>:

/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint16 UART_recieveByte(void) {
    28e8:	df 93       	push	r29
    28ea:	cf 93       	push	r28
    28ec:	00 d0       	rcall	.+0      	; 0x28ee <UART_recieveByte+0x6>
    28ee:	00 d0       	rcall	.+0      	; 0x28f0 <UART_recieveByte+0x8>
    28f0:	cd b7       	in	r28, 0x3d	; 61
    28f2:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while (BIT_IS_CLEAR(UCSRA, RXC)) {
    28f4:	eb e2       	ldi	r30, 0x2B	; 43
    28f6:	f0 e0       	ldi	r31, 0x00	; 0
    28f8:	80 81       	ld	r24, Z
    28fa:	88 23       	and	r24, r24
    28fc:	dc f7       	brge	.-10     	; 0x28f4 <UART_recieveByte+0xc>

	/*
	 * Read the received data from the Rx buffer (UDR) and in case character size is 9 bits take the MSB from UCSRB
	 * The RXC flag will be cleared after read the data
	 */
	if (char_size == CHAR_SIZE_9) {
    28fe:	80 91 6c 01 	lds	r24, 0x016C
    2902:	87 30       	cpi	r24, 0x07	; 7
    2904:	f9 f4       	brne	.+62     	; 0x2944 <UART_recieveByte+0x5c>
		uint16 data;
		data = UDR;
    2906:	ec e2       	ldi	r30, 0x2C	; 44
    2908:	f0 e0       	ldi	r31, 0x00	; 0
    290a:	80 81       	ld	r24, Z
    290c:	88 2f       	mov	r24, r24
    290e:	90 e0       	ldi	r25, 0x00	; 0
    2910:	9a 83       	std	Y+2, r25	; 0x02
    2912:	89 83       	std	Y+1, r24	; 0x01
		data |= ((UCSRA & 0x02) << 7);
    2914:	eb e2       	ldi	r30, 0x2B	; 43
    2916:	f0 e0       	ldi	r31, 0x00	; 0
    2918:	80 81       	ld	r24, Z
    291a:	88 2f       	mov	r24, r24
    291c:	90 e0       	ldi	r25, 0x00	; 0
    291e:	82 70       	andi	r24, 0x02	; 2
    2920:	90 70       	andi	r25, 0x00	; 0
    2922:	96 95       	lsr	r25
    2924:	98 2f       	mov	r25, r24
    2926:	88 27       	eor	r24, r24
    2928:	97 95       	ror	r25
    292a:	87 95       	ror	r24
    292c:	9c 01       	movw	r18, r24
    292e:	89 81       	ldd	r24, Y+1	; 0x01
    2930:	9a 81       	ldd	r25, Y+2	; 0x02
    2932:	82 2b       	or	r24, r18
    2934:	93 2b       	or	r25, r19
    2936:	9a 83       	std	Y+2, r25	; 0x02
    2938:	89 83       	std	Y+1, r24	; 0x01
		return data;
    293a:	29 81       	ldd	r18, Y+1	; 0x01
    293c:	3a 81       	ldd	r19, Y+2	; 0x02
    293e:	3c 83       	std	Y+4, r19	; 0x04
    2940:	2b 83       	std	Y+3, r18	; 0x03
    2942:	07 c0       	rjmp	.+14     	; 0x2952 <UART_recieveByte+0x6a>
	} else {
		return UDR;
    2944:	ec e2       	ldi	r30, 0x2C	; 44
    2946:	f0 e0       	ldi	r31, 0x00	; 0
    2948:	80 81       	ld	r24, Z
    294a:	28 2f       	mov	r18, r24
    294c:	30 e0       	ldi	r19, 0x00	; 0
    294e:	3c 83       	std	Y+4, r19	; 0x04
    2950:	2b 83       	std	Y+3, r18	; 0x03
    2952:	8b 81       	ldd	r24, Y+3	; 0x03
    2954:	9c 81       	ldd	r25, Y+4	; 0x04
	}
}
    2956:	0f 90       	pop	r0
    2958:	0f 90       	pop	r0
    295a:	0f 90       	pop	r0
    295c:	0f 90       	pop	r0
    295e:	cf 91       	pop	r28
    2960:	df 91       	pop	r29
    2962:	08 95       	ret

00002964 <UART_sendString>:

/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str) {
    2964:	df 93       	push	r29
    2966:	cf 93       	push	r28
    2968:	00 d0       	rcall	.+0      	; 0x296a <UART_sendString+0x6>
    296a:	0f 92       	push	r0
    296c:	cd b7       	in	r28, 0x3d	; 61
    296e:	de b7       	in	r29, 0x3e	; 62
    2970:	9b 83       	std	Y+3, r25	; 0x03
    2972:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2974:	19 82       	std	Y+1, r1	; 0x01
    2976:	10 c0       	rjmp	.+32     	; 0x2998 <UART_sendString+0x34>

	/* Send the whole string */
	while (Str[i] != '\0') {
		UART_sendByte(Str[i]);
    2978:	89 81       	ldd	r24, Y+1	; 0x01
    297a:	28 2f       	mov	r18, r24
    297c:	30 e0       	ldi	r19, 0x00	; 0
    297e:	8a 81       	ldd	r24, Y+2	; 0x02
    2980:	9b 81       	ldd	r25, Y+3	; 0x03
    2982:	fc 01       	movw	r30, r24
    2984:	e2 0f       	add	r30, r18
    2986:	f3 1f       	adc	r31, r19
    2988:	80 81       	ld	r24, Z
    298a:	88 2f       	mov	r24, r24
    298c:	90 e0       	ldi	r25, 0x00	; 0
    298e:	0e 94 4a 14 	call	0x2894	; 0x2894 <UART_sendByte>
		i++;
    2992:	89 81       	ldd	r24, Y+1	; 0x01
    2994:	8f 5f       	subi	r24, 0xFF	; 255
    2996:	89 83       	std	Y+1, r24	; 0x01
 */
void UART_sendString(const uint8 *Str) {
	uint8 i = 0;

	/* Send the whole string */
	while (Str[i] != '\0') {
    2998:	89 81       	ldd	r24, Y+1	; 0x01
    299a:	28 2f       	mov	r18, r24
    299c:	30 e0       	ldi	r19, 0x00	; 0
    299e:	8a 81       	ldd	r24, Y+2	; 0x02
    29a0:	9b 81       	ldd	r25, Y+3	; 0x03
    29a2:	fc 01       	movw	r30, r24
    29a4:	e2 0f       	add	r30, r18
    29a6:	f3 1f       	adc	r31, r19
    29a8:	80 81       	ld	r24, Z
    29aa:	88 23       	and	r24, r24
    29ac:	29 f7       	brne	.-54     	; 0x2978 <UART_sendString+0x14>
		UART_sendByte(Str[i]);
		i++;
	}

}
    29ae:	0f 90       	pop	r0
    29b0:	0f 90       	pop	r0
    29b2:	0f 90       	pop	r0
    29b4:	cf 91       	pop	r28
    29b6:	df 91       	pop	r29
    29b8:	08 95       	ret

000029ba <UART_receiveString>:

/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str) {
    29ba:	0f 93       	push	r16
    29bc:	1f 93       	push	r17
    29be:	df 93       	push	r29
    29c0:	cf 93       	push	r28
    29c2:	00 d0       	rcall	.+0      	; 0x29c4 <UART_receiveString+0xa>
    29c4:	0f 92       	push	r0
    29c6:	cd b7       	in	r28, 0x3d	; 61
    29c8:	de b7       	in	r29, 0x3e	; 62
    29ca:	9b 83       	std	Y+3, r25	; 0x03
    29cc:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    29ce:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    29d0:	89 81       	ldd	r24, Y+1	; 0x01
    29d2:	28 2f       	mov	r18, r24
    29d4:	30 e0       	ldi	r19, 0x00	; 0
    29d6:	8a 81       	ldd	r24, Y+2	; 0x02
    29d8:	9b 81       	ldd	r25, Y+3	; 0x03
    29da:	8c 01       	movw	r16, r24
    29dc:	02 0f       	add	r16, r18
    29de:	13 1f       	adc	r17, r19
    29e0:	0e 94 74 14 	call	0x28e8	; 0x28e8 <UART_recieveByte>
    29e4:	f8 01       	movw	r30, r16
    29e6:	80 83       	st	Z, r24
    29e8:	0f c0       	rjmp	.+30     	; 0x2a08 <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while (Str[i] != '#') {
		i++;
    29ea:	89 81       	ldd	r24, Y+1	; 0x01
    29ec:	8f 5f       	subi	r24, 0xFF	; 255
    29ee:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    29f0:	89 81       	ldd	r24, Y+1	; 0x01
    29f2:	28 2f       	mov	r18, r24
    29f4:	30 e0       	ldi	r19, 0x00	; 0
    29f6:	8a 81       	ldd	r24, Y+2	; 0x02
    29f8:	9b 81       	ldd	r25, Y+3	; 0x03
    29fa:	8c 01       	movw	r16, r24
    29fc:	02 0f       	add	r16, r18
    29fe:	13 1f       	adc	r17, r19
    2a00:	0e 94 74 14 	call	0x28e8	; 0x28e8 <UART_recieveByte>
    2a04:	f8 01       	movw	r30, r16
    2a06:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while (Str[i] != '#') {
    2a08:	89 81       	ldd	r24, Y+1	; 0x01
    2a0a:	28 2f       	mov	r18, r24
    2a0c:	30 e0       	ldi	r19, 0x00	; 0
    2a0e:	8a 81       	ldd	r24, Y+2	; 0x02
    2a10:	9b 81       	ldd	r25, Y+3	; 0x03
    2a12:	fc 01       	movw	r30, r24
    2a14:	e2 0f       	add	r30, r18
    2a16:	f3 1f       	adc	r31, r19
    2a18:	80 81       	ld	r24, Z
    2a1a:	83 32       	cpi	r24, 0x23	; 35
    2a1c:	31 f7       	brne	.-52     	; 0x29ea <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    2a1e:	89 81       	ldd	r24, Y+1	; 0x01
    2a20:	28 2f       	mov	r18, r24
    2a22:	30 e0       	ldi	r19, 0x00	; 0
    2a24:	8a 81       	ldd	r24, Y+2	; 0x02
    2a26:	9b 81       	ldd	r25, Y+3	; 0x03
    2a28:	fc 01       	movw	r30, r24
    2a2a:	e2 0f       	add	r30, r18
    2a2c:	f3 1f       	adc	r31, r19
    2a2e:	10 82       	st	Z, r1
}
    2a30:	0f 90       	pop	r0
    2a32:	0f 90       	pop	r0
    2a34:	0f 90       	pop	r0
    2a36:	cf 91       	pop	r28
    2a38:	df 91       	pop	r29
    2a3a:	1f 91       	pop	r17
    2a3c:	0f 91       	pop	r16
    2a3e:	08 95       	ret

00002a40 <UART_sendLong>:
/*
 * Description :
 * Send 4 bytes numbers by looping on 4 times on the UART_sendByte function and making a 1 byte pointer that increases
 * each iteration to point to the next byte of the number.
 */
void UART_sendLong(uint32 number) {
    2a40:	df 93       	push	r29
    2a42:	cf 93       	push	r28
    2a44:	cd b7       	in	r28, 0x3d	; 61
    2a46:	de b7       	in	r29, 0x3e	; 62
    2a48:	27 97       	sbiw	r28, 0x07	; 7
    2a4a:	0f b6       	in	r0, 0x3f	; 63
    2a4c:	f8 94       	cli
    2a4e:	de bf       	out	0x3e, r29	; 62
    2a50:	0f be       	out	0x3f, r0	; 63
    2a52:	cd bf       	out	0x3d, r28	; 61
    2a54:	6c 83       	std	Y+4, r22	; 0x04
    2a56:	7d 83       	std	Y+5, r23	; 0x05
    2a58:	8e 83       	std	Y+6, r24	; 0x06
    2a5a:	9f 83       	std	Y+7, r25	; 0x07
	uint8 *ptr, i;
	ptr = (uint8*) &number;
    2a5c:	ce 01       	movw	r24, r28
    2a5e:	04 96       	adiw	r24, 0x04	; 4
    2a60:	9b 83       	std	Y+3, r25	; 0x03
    2a62:	8a 83       	std	Y+2, r24	; 0x02
	for (i = 0; i < 4; i++) {
    2a64:	19 82       	std	Y+1, r1	; 0x01
    2a66:	0f c0       	rjmp	.+30     	; 0x2a86 <UART_sendLong+0x46>
		UART_sendByte(*ptr);
    2a68:	ea 81       	ldd	r30, Y+2	; 0x02
    2a6a:	fb 81       	ldd	r31, Y+3	; 0x03
    2a6c:	80 81       	ld	r24, Z
    2a6e:	88 2f       	mov	r24, r24
    2a70:	90 e0       	ldi	r25, 0x00	; 0
    2a72:	0e 94 4a 14 	call	0x2894	; 0x2894 <UART_sendByte>
		ptr++;
    2a76:	8a 81       	ldd	r24, Y+2	; 0x02
    2a78:	9b 81       	ldd	r25, Y+3	; 0x03
    2a7a:	01 96       	adiw	r24, 0x01	; 1
    2a7c:	9b 83       	std	Y+3, r25	; 0x03
    2a7e:	8a 83       	std	Y+2, r24	; 0x02
 * each iteration to point to the next byte of the number.
 */
void UART_sendLong(uint32 number) {
	uint8 *ptr, i;
	ptr = (uint8*) &number;
	for (i = 0; i < 4; i++) {
    2a80:	89 81       	ldd	r24, Y+1	; 0x01
    2a82:	8f 5f       	subi	r24, 0xFF	; 255
    2a84:	89 83       	std	Y+1, r24	; 0x01
    2a86:	89 81       	ldd	r24, Y+1	; 0x01
    2a88:	84 30       	cpi	r24, 0x04	; 4
    2a8a:	70 f3       	brcs	.-36     	; 0x2a68 <UART_sendLong+0x28>
		UART_sendByte(*ptr);
		ptr++;
	}
}
    2a8c:	27 96       	adiw	r28, 0x07	; 7
    2a8e:	0f b6       	in	r0, 0x3f	; 63
    2a90:	f8 94       	cli
    2a92:	de bf       	out	0x3e, r29	; 62
    2a94:	0f be       	out	0x3f, r0	; 63
    2a96:	cd bf       	out	0x3d, r28	; 61
    2a98:	cf 91       	pop	r28
    2a9a:	df 91       	pop	r29
    2a9c:	08 95       	ret

00002a9e <UART_recieveLong>:
/*
 * Description :
 * Receive 4 bytes numbers by looping on 4 times on the UART_recieveByte function and making a 1 byte pointer that increases
 * each iteration to point to the next byte of the number.
 */
void UART_recieveLong(uint32 *number) {
    2a9e:	df 93       	push	r29
    2aa0:	cf 93       	push	r28
    2aa2:	00 d0       	rcall	.+0      	; 0x2aa4 <UART_recieveLong+0x6>
    2aa4:	00 d0       	rcall	.+0      	; 0x2aa6 <UART_recieveLong+0x8>
    2aa6:	0f 92       	push	r0
    2aa8:	cd b7       	in	r28, 0x3d	; 61
    2aaa:	de b7       	in	r29, 0x3e	; 62
    2aac:	9d 83       	std	Y+5, r25	; 0x05
    2aae:	8c 83       	std	Y+4, r24	; 0x04
	uint8 *ptr, i;
	ptr = (uint8*) number;
    2ab0:	8c 81       	ldd	r24, Y+4	; 0x04
    2ab2:	9d 81       	ldd	r25, Y+5	; 0x05
    2ab4:	9b 83       	std	Y+3, r25	; 0x03
    2ab6:	8a 83       	std	Y+2, r24	; 0x02
	for (i = 0; i < 4; i++) {
    2ab8:	19 82       	std	Y+1, r1	; 0x01
    2aba:	0d c0       	rjmp	.+26     	; 0x2ad6 <UART_recieveLong+0x38>
		*ptr = UART_recieveByte();
    2abc:	0e 94 74 14 	call	0x28e8	; 0x28e8 <UART_recieveByte>
    2ac0:	ea 81       	ldd	r30, Y+2	; 0x02
    2ac2:	fb 81       	ldd	r31, Y+3	; 0x03
    2ac4:	80 83       	st	Z, r24
		ptr++;
    2ac6:	8a 81       	ldd	r24, Y+2	; 0x02
    2ac8:	9b 81       	ldd	r25, Y+3	; 0x03
    2aca:	01 96       	adiw	r24, 0x01	; 1
    2acc:	9b 83       	std	Y+3, r25	; 0x03
    2ace:	8a 83       	std	Y+2, r24	; 0x02
 * each iteration to point to the next byte of the number.
 */
void UART_recieveLong(uint32 *number) {
	uint8 *ptr, i;
	ptr = (uint8*) number;
	for (i = 0; i < 4; i++) {
    2ad0:	89 81       	ldd	r24, Y+1	; 0x01
    2ad2:	8f 5f       	subi	r24, 0xFF	; 255
    2ad4:	89 83       	std	Y+1, r24	; 0x01
    2ad6:	89 81       	ldd	r24, Y+1	; 0x01
    2ad8:	84 30       	cpi	r24, 0x04	; 4
    2ada:	80 f3       	brcs	.-32     	; 0x2abc <UART_recieveLong+0x1e>
		*ptr = UART_recieveByte();
		ptr++;
	}
}
    2adc:	0f 90       	pop	r0
    2ade:	0f 90       	pop	r0
    2ae0:	0f 90       	pop	r0
    2ae2:	0f 90       	pop	r0
    2ae4:	0f 90       	pop	r0
    2ae6:	cf 91       	pop	r28
    2ae8:	df 91       	pop	r29
    2aea:	08 95       	ret

00002aec <__mulsi3>:
    2aec:	62 9f       	mul	r22, r18
    2aee:	d0 01       	movw	r26, r0
    2af0:	73 9f       	mul	r23, r19
    2af2:	f0 01       	movw	r30, r0
    2af4:	82 9f       	mul	r24, r18
    2af6:	e0 0d       	add	r30, r0
    2af8:	f1 1d       	adc	r31, r1
    2afa:	64 9f       	mul	r22, r20
    2afc:	e0 0d       	add	r30, r0
    2afe:	f1 1d       	adc	r31, r1
    2b00:	92 9f       	mul	r25, r18
    2b02:	f0 0d       	add	r31, r0
    2b04:	83 9f       	mul	r24, r19
    2b06:	f0 0d       	add	r31, r0
    2b08:	74 9f       	mul	r23, r20
    2b0a:	f0 0d       	add	r31, r0
    2b0c:	65 9f       	mul	r22, r21
    2b0e:	f0 0d       	add	r31, r0
    2b10:	99 27       	eor	r25, r25
    2b12:	72 9f       	mul	r23, r18
    2b14:	b0 0d       	add	r27, r0
    2b16:	e1 1d       	adc	r30, r1
    2b18:	f9 1f       	adc	r31, r25
    2b1a:	63 9f       	mul	r22, r19
    2b1c:	b0 0d       	add	r27, r0
    2b1e:	e1 1d       	adc	r30, r1
    2b20:	f9 1f       	adc	r31, r25
    2b22:	bd 01       	movw	r22, r26
    2b24:	cf 01       	movw	r24, r30
    2b26:	11 24       	eor	r1, r1
    2b28:	08 95       	ret

00002b2a <__udivmodsi4>:
    2b2a:	a1 e2       	ldi	r26, 0x21	; 33
    2b2c:	1a 2e       	mov	r1, r26
    2b2e:	aa 1b       	sub	r26, r26
    2b30:	bb 1b       	sub	r27, r27
    2b32:	fd 01       	movw	r30, r26
    2b34:	0d c0       	rjmp	.+26     	; 0x2b50 <__udivmodsi4_ep>

00002b36 <__udivmodsi4_loop>:
    2b36:	aa 1f       	adc	r26, r26
    2b38:	bb 1f       	adc	r27, r27
    2b3a:	ee 1f       	adc	r30, r30
    2b3c:	ff 1f       	adc	r31, r31
    2b3e:	a2 17       	cp	r26, r18
    2b40:	b3 07       	cpc	r27, r19
    2b42:	e4 07       	cpc	r30, r20
    2b44:	f5 07       	cpc	r31, r21
    2b46:	20 f0       	brcs	.+8      	; 0x2b50 <__udivmodsi4_ep>
    2b48:	a2 1b       	sub	r26, r18
    2b4a:	b3 0b       	sbc	r27, r19
    2b4c:	e4 0b       	sbc	r30, r20
    2b4e:	f5 0b       	sbc	r31, r21

00002b50 <__udivmodsi4_ep>:
    2b50:	66 1f       	adc	r22, r22
    2b52:	77 1f       	adc	r23, r23
    2b54:	88 1f       	adc	r24, r24
    2b56:	99 1f       	adc	r25, r25
    2b58:	1a 94       	dec	r1
    2b5a:	69 f7       	brne	.-38     	; 0x2b36 <__udivmodsi4_loop>
    2b5c:	60 95       	com	r22
    2b5e:	70 95       	com	r23
    2b60:	80 95       	com	r24
    2b62:	90 95       	com	r25
    2b64:	9b 01       	movw	r18, r22
    2b66:	ac 01       	movw	r20, r24
    2b68:	bd 01       	movw	r22, r26
    2b6a:	cf 01       	movw	r24, r30
    2b6c:	08 95       	ret

00002b6e <__prologue_saves__>:
    2b6e:	2f 92       	push	r2
    2b70:	3f 92       	push	r3
    2b72:	4f 92       	push	r4
    2b74:	5f 92       	push	r5
    2b76:	6f 92       	push	r6
    2b78:	7f 92       	push	r7
    2b7a:	8f 92       	push	r8
    2b7c:	9f 92       	push	r9
    2b7e:	af 92       	push	r10
    2b80:	bf 92       	push	r11
    2b82:	cf 92       	push	r12
    2b84:	df 92       	push	r13
    2b86:	ef 92       	push	r14
    2b88:	ff 92       	push	r15
    2b8a:	0f 93       	push	r16
    2b8c:	1f 93       	push	r17
    2b8e:	cf 93       	push	r28
    2b90:	df 93       	push	r29
    2b92:	cd b7       	in	r28, 0x3d	; 61
    2b94:	de b7       	in	r29, 0x3e	; 62
    2b96:	ca 1b       	sub	r28, r26
    2b98:	db 0b       	sbc	r29, r27
    2b9a:	0f b6       	in	r0, 0x3f	; 63
    2b9c:	f8 94       	cli
    2b9e:	de bf       	out	0x3e, r29	; 62
    2ba0:	0f be       	out	0x3f, r0	; 63
    2ba2:	cd bf       	out	0x3d, r28	; 61
    2ba4:	09 94       	ijmp

00002ba6 <__epilogue_restores__>:
    2ba6:	2a 88       	ldd	r2, Y+18	; 0x12
    2ba8:	39 88       	ldd	r3, Y+17	; 0x11
    2baa:	48 88       	ldd	r4, Y+16	; 0x10
    2bac:	5f 84       	ldd	r5, Y+15	; 0x0f
    2bae:	6e 84       	ldd	r6, Y+14	; 0x0e
    2bb0:	7d 84       	ldd	r7, Y+13	; 0x0d
    2bb2:	8c 84       	ldd	r8, Y+12	; 0x0c
    2bb4:	9b 84       	ldd	r9, Y+11	; 0x0b
    2bb6:	aa 84       	ldd	r10, Y+10	; 0x0a
    2bb8:	b9 84       	ldd	r11, Y+9	; 0x09
    2bba:	c8 84       	ldd	r12, Y+8	; 0x08
    2bbc:	df 80       	ldd	r13, Y+7	; 0x07
    2bbe:	ee 80       	ldd	r14, Y+6	; 0x06
    2bc0:	fd 80       	ldd	r15, Y+5	; 0x05
    2bc2:	0c 81       	ldd	r16, Y+4	; 0x04
    2bc4:	1b 81       	ldd	r17, Y+3	; 0x03
    2bc6:	aa 81       	ldd	r26, Y+2	; 0x02
    2bc8:	b9 81       	ldd	r27, Y+1	; 0x01
    2bca:	ce 0f       	add	r28, r30
    2bcc:	d1 1d       	adc	r29, r1
    2bce:	0f b6       	in	r0, 0x3f	; 63
    2bd0:	f8 94       	cli
    2bd2:	de bf       	out	0x3e, r29	; 62
    2bd4:	0f be       	out	0x3f, r0	; 63
    2bd6:	cd bf       	out	0x3d, r28	; 61
    2bd8:	ed 01       	movw	r28, r26
    2bda:	08 95       	ret

00002bdc <itoa>:
    2bdc:	fb 01       	movw	r30, r22
    2bde:	9f 01       	movw	r18, r30
    2be0:	e8 94       	clt
    2be2:	42 30       	cpi	r20, 0x02	; 2
    2be4:	c4 f0       	brlt	.+48     	; 0x2c16 <itoa+0x3a>
    2be6:	45 32       	cpi	r20, 0x25	; 37
    2be8:	b4 f4       	brge	.+44     	; 0x2c16 <itoa+0x3a>
    2bea:	4a 30       	cpi	r20, 0x0A	; 10
    2bec:	29 f4       	brne	.+10     	; 0x2bf8 <itoa+0x1c>
    2bee:	97 fb       	bst	r25, 7
    2bf0:	1e f4       	brtc	.+6      	; 0x2bf8 <itoa+0x1c>
    2bf2:	90 95       	com	r25
    2bf4:	81 95       	neg	r24
    2bf6:	9f 4f       	sbci	r25, 0xFF	; 255
    2bf8:	64 2f       	mov	r22, r20
    2bfa:	77 27       	eor	r23, r23
    2bfc:	0e 94 1f 16 	call	0x2c3e	; 0x2c3e <__udivmodhi4>
    2c00:	80 5d       	subi	r24, 0xD0	; 208
    2c02:	8a 33       	cpi	r24, 0x3A	; 58
    2c04:	0c f0       	brlt	.+2      	; 0x2c08 <itoa+0x2c>
    2c06:	89 5d       	subi	r24, 0xD9	; 217
    2c08:	81 93       	st	Z+, r24
    2c0a:	cb 01       	movw	r24, r22
    2c0c:	00 97       	sbiw	r24, 0x00	; 0
    2c0e:	a1 f7       	brne	.-24     	; 0x2bf8 <itoa+0x1c>
    2c10:	16 f4       	brtc	.+4      	; 0x2c16 <itoa+0x3a>
    2c12:	5d e2       	ldi	r21, 0x2D	; 45
    2c14:	51 93       	st	Z+, r21
    2c16:	10 82       	st	Z, r1
    2c18:	c9 01       	movw	r24, r18
    2c1a:	0c 94 0f 16 	jmp	0x2c1e	; 0x2c1e <strrev>

00002c1e <strrev>:
    2c1e:	dc 01       	movw	r26, r24
    2c20:	fc 01       	movw	r30, r24
    2c22:	67 2f       	mov	r22, r23
    2c24:	71 91       	ld	r23, Z+
    2c26:	77 23       	and	r23, r23
    2c28:	e1 f7       	brne	.-8      	; 0x2c22 <strrev+0x4>
    2c2a:	32 97       	sbiw	r30, 0x02	; 2
    2c2c:	04 c0       	rjmp	.+8      	; 0x2c36 <strrev+0x18>
    2c2e:	7c 91       	ld	r23, X
    2c30:	6d 93       	st	X+, r22
    2c32:	70 83       	st	Z, r23
    2c34:	62 91       	ld	r22, -Z
    2c36:	ae 17       	cp	r26, r30
    2c38:	bf 07       	cpc	r27, r31
    2c3a:	c8 f3       	brcs	.-14     	; 0x2c2e <strrev+0x10>
    2c3c:	08 95       	ret

00002c3e <__udivmodhi4>:
    2c3e:	aa 1b       	sub	r26, r26
    2c40:	bb 1b       	sub	r27, r27
    2c42:	51 e1       	ldi	r21, 0x11	; 17
    2c44:	07 c0       	rjmp	.+14     	; 0x2c54 <__udivmodhi4_ep>

00002c46 <__udivmodhi4_loop>:
    2c46:	aa 1f       	adc	r26, r26
    2c48:	bb 1f       	adc	r27, r27
    2c4a:	a6 17       	cp	r26, r22
    2c4c:	b7 07       	cpc	r27, r23
    2c4e:	10 f0       	brcs	.+4      	; 0x2c54 <__udivmodhi4_ep>
    2c50:	a6 1b       	sub	r26, r22
    2c52:	b7 0b       	sbc	r27, r23

00002c54 <__udivmodhi4_ep>:
    2c54:	88 1f       	adc	r24, r24
    2c56:	99 1f       	adc	r25, r25
    2c58:	5a 95       	dec	r21
    2c5a:	a9 f7       	brne	.-22     	; 0x2c46 <__udivmodhi4_loop>
    2c5c:	80 95       	com	r24
    2c5e:	90 95       	com	r25
    2c60:	bc 01       	movw	r22, r24
    2c62:	cd 01       	movw	r24, r26
    2c64:	08 95       	ret

00002c66 <_exit>:
    2c66:	f8 94       	cli

00002c68 <__stop_program>:
    2c68:	ff cf       	rjmp	.-2      	; 0x2c68 <__stop_program>
